
Milestone1Gun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000047c  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800118  00800118  00000528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001057  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c9  00000000  00000000  000016df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000832  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000702  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d9  00000000  00000000  00003206  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000039df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	e9 c0       	rjmp	.+466    	; 0x208 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 33       	cpi	r26, 0x37	; 55
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	50 d1       	rcall	.+672    	; 0x364 <main>
  c4:	d9 c1       	rjmp	.+946    	; 0x478 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <shootStateSM>:
		case displaySM_update:
		
			break;
	}
	
}
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	91 05       	cpc	r25, r1
  cc:	e1 f1       	breq	.+120    	; 0x146 <shootStateSM+0x7e>
  ce:	34 f4       	brge	.+12     	; 0xdc <shootStateSM+0x14>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	61 f0       	breq	.+24     	; 0xec <shootStateSM+0x24>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	91 05       	cpc	r25, r1
  d8:	a9 f0       	breq	.+42     	; 0x104 <shootStateSM+0x3c>
  da:	5e c0       	rjmp	.+188    	; 0x198 <shootStateSM+0xd0>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	c1 f1       	breq	.+112    	; 0x152 <shootStateSM+0x8a>
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	91 05       	cpc	r25, r1
  e6:	09 f4       	brne	.+2      	; 0xea <shootStateSM+0x22>
  e8:	50 c0       	rjmp	.+160    	; 0x18a <shootStateSM+0xc2>
  ea:	56 c0       	rjmp	.+172    	; 0x198 <shootStateSM+0xd0>
  ec:	31 e0       	ldi	r19, 0x01	; 1
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <gameStart>
  f4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <gameStart+0x1>
  f8:	89 2b       	or	r24, r25
  fa:	09 f4       	brne	.+2      	; 0xfe <shootStateSM+0x36>
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	83 2f       	mov	r24, r19
 100:	92 2f       	mov	r25, r18
 102:	08 95       	ret
 104:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <tempD>
 108:	22 23       	and	r18, r18
 10a:	b1 f0       	breq	.+44     	; 0x138 <shootStateSM+0x70>
 10c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 114:	21 15       	cp	r18, r1
 116:	31 05       	cpc	r19, r1
 118:	41 f0       	breq	.+16     	; 0x12a <shootStateSM+0x62>
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	31 09       	sbc	r19, r1
 11e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 132:	23 2b       	or	r18, r19
 134:	99 f5       	brne	.+102    	; 0x19c <shootStateSM+0xd4>
 136:	ff cf       	rjmp	.-2      	; 0x136 <shootStateSM+0x6e>
 138:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 140:	23 2b       	or	r18, r19
 142:	61 f5       	brne	.+88     	; 0x19c <shootStateSM+0xd4>
 144:	ff cf       	rjmp	.-2      	; 0x144 <shootStateSM+0x7c>
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <tempB>
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <coolDownCount>
 156:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <coolDownCount+0x1>
 15a:	21 15       	cp	r18, r1
 15c:	31 05       	cpc	r19, r1
 15e:	59 f4       	brne	.+22     	; 0x176 <shootStateSM+0xae>
 160:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <tempB>
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <coolDownCount+0x1>
 16c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <coolDownCount>
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	40 93 31 01 	sts	0x0131, r20	; 0x800131 <tempB>
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	31 09       	sbc	r19, r1
 180:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <coolDownCount+0x1>
 184:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <coolDownCount>
 188:	08 95       	ret
 18a:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <tempD>
 18e:	21 30       	cpi	r18, 0x01	; 1
 190:	29 f0       	breq	.+10     	; 0x19c <shootStateSM+0xd4>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	08 95       	ret
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	08 95       	ret

0000019e <TimerSet>:
 19e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 1a2:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 1a6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 1aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
 1ae:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <_avr_timer_cntcurr>
 1b2:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <_avr_timer_cntcurr+0x1>
 1b6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_avr_timer_cntcurr+0x2>
 1ba:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <_avr_timer_cntcurr+0x3>
 1be:	08 95       	ret

000001c0 <TimerOn>:
 1c0:	8b e0       	ldi	r24, 0x0B	; 11
 1c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1c6:	8d e7       	ldi	r24, 0x7D	; 125
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1d8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1dc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 1e4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 1e8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 1ec:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 1f0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 1f4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 1f8:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 1fc:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 200:	8f b7       	in	r24, 0x3f	; 63
 202:	80 68       	ori	r24, 0x80	; 128
 204:	8f bf       	out	0x3f, r24	; 63
 206:	08 95       	ret

00000208 <__vector_13>:
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_avr_timer_cntcurr>
 21e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <_avr_timer_cntcurr+0x1>
 222:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <_avr_timer_cntcurr+0x2>
 226:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <_avr_timer_cntcurr+0x3>
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	a1 09       	sbc	r26, r1
 22e:	b1 09       	sbc	r27, r1
 230:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 234:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 238:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 23c:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 240:	89 2b       	or	r24, r25
 242:	8a 2b       	or	r24, r26
 244:	8b 2b       	or	r24, r27
 246:	99 f4       	brne	.+38     	; 0x26e <__vector_13+0x66>
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <TimerFlag>
 24e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 252:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 256:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 25a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 25e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 262:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 266:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 26a:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <initUSART>:
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	81 f0       	breq	.+32     	; 0x2a4 <initUSART+0x24>
 284:	e1 ec       	ldi	r30, 0xC1	; 193
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	88 61       	ori	r24, 0x18	; 24
 28c:	80 83       	st	Z, r24
 28e:	e2 ec       	ldi	r30, 0xC2	; 194
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	86 60       	ori	r24, 0x06	; 6
 296:	80 83       	st	Z, r24
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 29e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2a2:	08 95       	ret
 2a4:	e9 ec       	ldi	r30, 0xC9	; 201
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	88 61       	ori	r24, 0x18	; 24
 2ac:	80 83       	st	Z, r24
 2ae:	ea ec       	ldi	r30, 0xCA	; 202
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	86 60       	ori	r24, 0x06	; 6
 2b6:	80 83       	st	Z, r24
 2b8:	8c e0       	ldi	r24, 0x0C	; 12
 2ba:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 2be:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 2c2:	08 95       	ret

000002c4 <USART_Receive>:
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	41 f0       	breq	.+16     	; 0x2d8 <USART_Receive+0x14>
 2c8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	88 23       	and	r24, r24
 2d0:	ec f7       	brge	.-6      	; 0x2cc <USART_Receive+0x8>
 2d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d6:	08 95       	ret
 2d8:	e8 ec       	ldi	r30, 0xC8	; 200
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 23       	and	r24, r24
 2e0:	ec f7       	brge	.-6      	; 0x2dc <USART_Receive+0x18>
 2e2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2e6:	08 95       	ret

000002e8 <commTranslate>:
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	88 30       	cpi	r24, 0x08	; 8
 2ee:	92 07       	cpc	r25, r18
 2f0:	a1 f4       	brne	.+40     	; 0x31a <commTranslate+0x32>
 2f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2fa:	03 96       	adiw	r24, 0x03	; 3
 2fc:	87 30       	cpi	r24, 0x07	; 7
 2fe:	91 05       	cpc	r25, r1
 300:	38 f0       	brcs	.+14     	; 0x310 <commTranslate+0x28>
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 30a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 30e:	08 95       	ret
 310:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 314:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 318:	08 95       	ret
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	8d 30       	cpi	r24, 0x0D	; 13
 31e:	92 07       	cpc	r25, r18
 320:	09 f4       	brne	.+2      	; 0x324 <commTranslate+0x3c>
 322:	ff cf       	rjmp	.-2      	; 0x322 <commTranslate+0x3a>
 324:	82 51       	subi	r24, 0x12	; 18
 326:	91 40       	sbci	r25, 0x01	; 1
 328:	31 f4       	brne	.+12     	; 0x336 <commTranslate+0x4e>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <gameStart+0x1>
 332:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <gameStart>
 336:	08 95       	ret

00000338 <commStateSM>:
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	ec 01       	movw	r28, r24
 33e:	00 97       	sbiw	r24, 0x00	; 0
 340:	19 f0       	breq	.+6      	; 0x348 <commStateSM+0x10>
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	21 f0       	breq	.+8      	; 0x34e <commStateSM+0x16>
 346:	0a c0       	rjmp	.+20     	; 0x35c <commStateSM+0x24>
 348:	c1 e0       	ldi	r28, 0x01	; 1
 34a:	d0 e0       	ldi	r29, 0x00	; 0
 34c:	07 c0       	rjmp	.+14     	; 0x35c <commStateSM+0x24>
 34e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 352:	88 23       	and	r24, r24
 354:	1c f4       	brge	.+6      	; 0x35c <commStateSM+0x24>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	b5 df       	rcall	.-150    	; 0x2c4 <USART_Receive>
 35a:	c6 df       	rcall	.-116    	; 0x2e8 <commTranslate>
 35c:	ce 01       	movw	r24, r28
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <main>:
	}
	return commState;
}
	
int main(void)
{
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	00 d0       	rcall	.+0      	; 0x36a <main+0x6>
 36a:	00 d0       	rcall	.+0      	; 0x36c <main+0x8>
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRB = 0xFF; PORTB = 0x00;
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	84 b9       	out	0x04, r24	; 4
 374:	15 b8       	out	0x05, r1	; 5
	DDRD = 0x00; PORTD = 0xFF;
 376:	1a b8       	out	0x0a, r1	; 10
 378:	8b b9       	out	0x0b, r24	; 11
	initUSART(0);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	81 df       	rcall	.-254    	; 0x280 <initUSART>
	static task task1;
	static task task2;
		
	task *tasks[] = {&task1, &task2};
 37e:	a3 e2       	ldi	r26, 0x23	; 35
 380:	b1 e0       	ldi	r27, 0x01	; 1
 382:	ba 83       	std	Y+2, r27	; 0x02
 384:	a9 83       	std	Y+1, r26	; 0x01
 386:	e8 e1       	ldi	r30, 0x18	; 24
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	fc 83       	std	Y+4, r31	; 0x04
 38c:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	task1.state = commStateSM_init;
 38e:	1c 92       	st	X, r1
	task1.period = 100;
 390:	44 e6       	ldi	r20, 0x64	; 100
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	4d 93       	st	X+, r20
 39c:	5d 93       	st	X+, r21
 39e:	6d 93       	st	X+, r22
 3a0:	7c 93       	st	X, r23
 3a2:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = task1.period;	
 3a4:	15 96       	adiw	r26, 0x05	; 5
 3a6:	4d 93       	st	X+, r20
 3a8:	5d 93       	st	X+, r21
 3aa:	6d 93       	st	X+, r22
 3ac:	7c 93       	st	X, r23
 3ae:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &commStateSM;
 3b0:	8c e9       	ldi	r24, 0x9C	; 156
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	1a 96       	adiw	r26, 0x0a	; 10
 3b6:	9c 93       	st	X, r25
 3b8:	8e 93       	st	-X, r24
 3ba:	19 97       	sbiw	r26, 0x09	; 9
	
	task2.state = shootStateSM_init;
 3bc:	10 82       	st	Z, r1
	task2.period = 100;
 3be:	41 83       	std	Z+1, r20	; 0x01
 3c0:	52 83       	std	Z+2, r21	; 0x02
 3c2:	63 83       	std	Z+3, r22	; 0x03
 3c4:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = task2.period;
 3c6:	45 83       	std	Z+5, r20	; 0x05
 3c8:	56 83       	std	Z+6, r21	; 0x06
 3ca:	67 83       	std	Z+7, r22	; 0x07
 3cc:	70 87       	std	Z+8, r23	; 0x08
	task2.TickFct = &shootStateSM;	
 3ce:	84 e6       	ldi	r24, 0x64	; 100
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	92 87       	std	Z+10, r25	; 0x0a
 3d4:	81 87       	std	Z+9, r24	; 0x09
	TimerSet(100);
 3d6:	64 e6       	ldi	r22, 0x64	; 100
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 3de:	df de       	rcall	.-578    	; 0x19e <TimerSet>
 3e0:	ef de       	rcall	.-546    	; 0x1c0 <TimerOn>
 3e2:	7e 01       	movw	r14, r28
 3e4:	85 e0       	ldi	r24, 0x05	; 5
 3e6:	e8 0e       	add	r14, r24
 3e8:	f1 1c       	adc	r15, r1
	unsigned int i;
	//====End of Task Scheduler Setup====
	while (1)	
	{
		tempD = PIND & 0x01;
 3ea:	89 b1       	in	r24, 0x09	; 9
 3ec:	81 70       	andi	r24, 0x01	; 1
 3ee:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <tempD>
 3f2:	de 01       	movw	r26, r28
 3f4:	11 96       	adiw	r26, 0x01	; 1
 3f6:	6d 01       	movw	r12, r26
		for( i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period){
 3f8:	f6 01       	movw	r30, r12
 3fa:	01 91       	ld	r16, Z+
 3fc:	11 91       	ld	r17, Z+
 3fe:	6f 01       	movw	r12, r30
 400:	d8 01       	movw	r26, r16
 402:	15 96       	adiw	r26, 0x05	; 5
 404:	4d 91       	ld	r20, X+
 406:	5d 91       	ld	r21, X+
 408:	6d 91       	ld	r22, X+
 40a:	7c 91       	ld	r23, X
 40c:	18 97       	sbiw	r26, 0x08	; 8
 40e:	11 96       	adiw	r26, 0x01	; 1
 410:	8d 91       	ld	r24, X+
 412:	9d 91       	ld	r25, X+
 414:	0d 90       	ld	r0, X+
 416:	bc 91       	ld	r27, X
 418:	a0 2d       	mov	r26, r0
 41a:	48 17       	cp	r20, r24
 41c:	59 07       	cpc	r21, r25
 41e:	6a 07       	cpc	r22, r26
 420:	7b 07       	cpc	r23, r27
 422:	81 f4       	brne	.+32     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 424:	f8 01       	movw	r30, r16
 426:	80 81       	ld	r24, Z
 428:	01 84       	ldd	r0, Z+9	; 0x09
 42a:	f2 85       	ldd	r31, Z+10	; 0x0a
 42c:	e0 2d       	mov	r30, r0
 42e:	08 2e       	mov	r0, r24
 430:	00 0c       	add	r0, r0
 432:	99 0b       	sbc	r25, r25
 434:	09 95       	icall
 436:	d8 01       	movw	r26, r16
 438:	8c 93       	st	X, r24
				tasks[i]->elapsedTime = 0;
 43a:	f8 01       	movw	r30, r16
 43c:	15 82       	std	Z+5, r1	; 0x05
 43e:	16 82       	std	Z+6, r1	; 0x06
 440:	17 82       	std	Z+7, r1	; 0x07
 442:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i] ->elapsedTime += 100;
 444:	f8 01       	movw	r30, r16
 446:	85 81       	ldd	r24, Z+5	; 0x05
 448:	96 81       	ldd	r25, Z+6	; 0x06
 44a:	a7 81       	ldd	r26, Z+7	; 0x07
 44c:	b0 85       	ldd	r27, Z+8	; 0x08
 44e:	8c 59       	subi	r24, 0x9C	; 156
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	af 4f       	sbci	r26, 0xFF	; 255
 454:	bf 4f       	sbci	r27, 0xFF	; 255
 456:	85 83       	std	Z+5, r24	; 0x05
 458:	96 83       	std	Z+6, r25	; 0x06
 45a:	a7 83       	std	Z+7, r26	; 0x07
 45c:	b0 87       	std	Z+8, r27	; 0x08
	unsigned int i;
	//====End of Task Scheduler Setup====
	while (1)	
	{
		tempD = PIND & 0x01;
		for( i = 0; i < numTasks; i++){
 45e:	ce 14       	cp	r12, r14
 460:	df 04       	cpc	r13, r15
 462:	51 f6       	brne	.-108    	; 0x3f8 <main+0x94>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i] ->elapsedTime += 100;
		}	
		PORTB = tempB;
 464:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <tempB>
 468:	85 b9       	out	0x05, r24	; 5
	while(!TimerFlag);
 46a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <TimerFlag>
 46e:	88 23       	and	r24, r24
 470:	e1 f3       	breq	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	TimerFlag = 0;
 472:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <TimerFlag>
	}
 476:	b9 cf       	rjmp	.-142    	; 0x3ea <main+0x86>

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
