
Milestone1Gun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800120  00800120  00000688  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b8  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a71  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca4  00000000  00000000  00002a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00003708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084f  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f52  00000000  00000000  000042d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005229  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 34       	cpi	r26, 0x48	; 72
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e8 d1       	rcall	.+976    	; 0x494 <main>
  c4:	85 c2       	rjmp	.+1290   	; 0x5d0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
		write_data(nokia_lcd.screen[i]);
}
  c8:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
  cc:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
  d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
  d4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
  d8:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <_avr_timer_cntcurr>
  dc:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <_avr_timer_cntcurr+0x1>
  e0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_avr_timer_cntcurr+0x2>
  e4:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 10e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 112:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 116:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 11a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_avr_timer_cntcurr>
 11e:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_avr_timer_cntcurr+0x1>
 122:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <_avr_timer_cntcurr+0x2>
 126:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_avr_timer_cntcurr>
 148:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <_avr_timer_cntcurr+0x2>
 150:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_avr_timer_cntcurr>
 15e:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_avr_timer_cntcurr+0x1>
 162:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <_avr_timer_cntcurr+0x2>
 166:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <TimerFlag>
 178:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 17c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 180:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 184:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 188:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_avr_timer_cntcurr>
 18c:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_avr_timer_cntcurr+0x1>
 190:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <_avr_timer_cntcurr+0x2>
 194:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <initUSART>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <initUSART+0x24>
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	80 83       	st	Z, r24
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 60       	ori	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24
 1c2:	83 e3       	ldi	r24, 0x33	; 51
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1cc:	08 95       	ret
 1ce:	e9 ec       	ldi	r30, 0xC9	; 201
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
 1d8:	ea ec       	ldi	r30, 0xCA	; 202
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
 1e2:	83 e3       	ldi	r24, 0x33	; 51
 1e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ec:	08 95       	ret

000001ee <USART_Flush>:
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	29 f4       	brne	.+10     	; 0x1fc <USART_Flush+0xe>
 1f2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1f6:	88 23       	and	r24, r24
 1f8:	74 f0       	brlt	.+28     	; 0x216 <USART_Flush+0x28>
 1fa:	08 95       	ret
 1fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 200:	88 23       	and	r24, r24
 202:	8c f4       	brge	.+34     	; 0x226 <USART_Flush+0x38>
 204:	a6 ec       	ldi	r26, 0xC6	; 198
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e0 ec       	ldi	r30, 0xC0	; 192
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	8c 91       	ld	r24, X
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	e4 f3       	brlt	.-8      	; 0x20c <USART_Flush+0x1e>
 214:	08 95       	ret
 216:	ae ec       	ldi	r26, 0xCE	; 206
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e8 ec       	ldi	r30, 0xC8	; 200
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	8c 91       	ld	r24, X
 220:	80 81       	ld	r24, Z
 222:	88 23       	and	r24, r24
 224:	e4 f3       	brlt	.-8      	; 0x21e <USART_Flush+0x30>
 226:	08 95       	ret

00000228 <USART_Send>:
 228:	61 30       	cpi	r22, 0x01	; 1
 22a:	41 f0       	breq	.+16     	; 0x23c <USART_Send+0x14>
 22c:	e0 ec       	ldi	r30, 0xC0	; 192
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	90 81       	ld	r25, Z
 232:	95 ff       	sbrs	r25, 5
 234:	fd cf       	rjmp	.-6      	; 0x230 <USART_Send+0x8>
 236:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 23a:	08 95       	ret
 23c:	e8 ec       	ldi	r30, 0xC8	; 200
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	90 81       	ld	r25, Z
 242:	95 ff       	sbrs	r25, 5
 244:	fd cf       	rjmp	.-6      	; 0x240 <USART_Send+0x18>
 246:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 24a:	08 95       	ret

0000024c <USART_Receive>:
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	41 f0       	breq	.+16     	; 0x260 <USART_Receive+0x14>
 250:	e0 ec       	ldi	r30, 0xC0	; 192
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	88 23       	and	r24, r24
 258:	ec f7       	brge	.-6      	; 0x254 <USART_Receive+0x8>
 25a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 25e:	08 95       	ret
 260:	e8 ec       	ldi	r30, 0xC8	; 200
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 23       	and	r24, r24
 268:	ec f7       	brge	.-6      	; 0x264 <USART_Receive+0x18>
 26a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 26e:	08 95       	ret

00000270 <commTranslate>:
void gameOver(){
	//Display Score and Game Over Screen
	sendToTarget(0xFF);
	while(1);
}
void commTranslate(unsigned char data){
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
	if(data == "0x01"){
 274:	c8 2f       	mov	r28, r24
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	c0 31       	cpi	r28, 0x10	; 16
 27c:	d8 07       	cpc	r29, r24
 27e:	a1 f4       	brne	.+40     	; 0x2a8 <commTranslate+0x38>
		//Hit a special target, add 3 bullets to bulletCount
		if((bulletCount + 3) > 6){
 280:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bulletCount>
 284:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bulletCount+0x1>
 288:	03 96       	adiw	r24, 0x03	; 3
 28a:	87 30       	cpi	r24, 0x07	; 7
 28c:	91 05       	cpc	r25, r1
 28e:	38 f0       	brcs	.+14     	; 0x29e <commTranslate+0x2e>
			bulletCount = 6;
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <bulletCount+0x1>
 298:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bulletCount>
 29c:	13 c0       	rjmp	.+38     	; 0x2c4 <commTranslate+0x54>
		}
		else{
			bulletCount = bulletCount + 3;
 29e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <bulletCount+0x1>
 2a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bulletCount>
 2a6:	0e c0       	rjmp	.+28     	; 0x2c4 <commTranslate+0x54>
		}
		return;
	}
	if(data == "0x02"){
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	c5 31       	cpi	r28, 0x15	; 21
 2ac:	d8 07       	cpc	r29, r24
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <commTranslate+0x42>
		//Time is up
		gameOver();
 2b0:	30 d0       	rcall	.+96     	; 0x312 <gameOver>
	}
	if(data == "0x03"){
 2b2:	ca 51       	subi	r28, 0x1A	; 26
 2b4:	d1 40       	sbci	r29, 0x01	; 1
 2b6:	31 f4       	brne	.+12     	; 0x2c4 <commTranslate+0x54>
		//Start Game
		gameStart = 1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <sendToTarget>:
unsigned char tempB = 0x00;
unsigned char tempA = 0x00;
unsigned int coolDownCount = 2;
unsigned int bulletCount = 6;
unsigned int gameStart = 1;
void sendToTarget(unsigned char data){
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	c8 2f       	mov	r28, r24
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 2d0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
unsigned char payload = 0x00;
if(USART_HasReceived(0)){ //Message Received
 2d4:	88 23       	and	r24, r24
 2d6:	44 f4       	brge	.+16     	; 0x2e8 <sendToTarget+0x1e>
	payload = USART_Receive(0);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	b8 df       	rcall	.-144    	; 0x24c <USART_Receive>
 2dc:	d8 2f       	mov	r29, r24
	USART_Flush(0);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	86 df       	rcall	.-244    	; 0x1ee <USART_Flush>
	commTranslate(payload);
 2e2:	8d 2f       	mov	r24, r29
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	c4 df       	rcall	.-120    	; 0x270 <commTranslate>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 2e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
}
	if(USART_IsSendReady(0)){
 2ec:	85 ff       	sbrs	r24, 5
		USART_Send(data,0);
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <sendToTarget+0x42>
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	8c 2f       	mov	r24, r28
 2f4:	99 df       	rcall	.-206    	; 0x228 <USART_Send>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 2f6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		while(USART_HasTransmitted(0) == 0){
 2fa:	86 fd       	sbrc	r24, 6
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <sendToTarget+0x42>
			PORTB = 0xFF;
 2fe:	9f ef       	ldi	r25, 0xFF	; 255
 300:	e0 ec       	ldi	r30, 0xC0	; 192
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	95 b9       	out	0x05, r25	; 5
 306:	80 81       	ld	r24, Z
	USART_Flush(0);
	commTranslate(payload);
}
	if(USART_IsSendReady(0)){
		USART_Send(data,0);
		while(USART_HasTransmitted(0) == 0){
 308:	86 ff       	sbrs	r24, 6
 30a:	fc cf       	rjmp	.-8      	; 0x304 <sendToTarget+0x3a>
			PORTB = 0xFF;
		}
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <gameOver>:

void gameOver(){
	//Display Score and Game Over Screen
	sendToTarget(0xFF);
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	da df       	rcall	.-76     	; 0x2ca <sendToTarget>
 316:	ff cf       	rjmp	.-2      	; 0x316 <gameOver+0x4>

00000318 <shootStateSM>:
		//Start Game
		gameStart = 1;
	}
}
enum shootStates {shootStateSM_init, shootStateSM_wait, shootStateSM_shoot, shootStateSM_cooldown, shootStateSM_waitRelease};
int shootStateSM(int shootState){
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 320:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
unsigned char payload = 0x00;
if(USART_HasReceived(0)){ //Message Received
 324:	88 23       	and	r24, r24
 326:	3c f4       	brge	.+14     	; 0x336 <shootStateSM+0x1e>
	payload = USART_Receive(0);
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 df       	rcall	.-224    	; 0x24c <USART_Receive>
 32c:	18 2f       	mov	r17, r24
	USART_Flush(0);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	5e df       	rcall	.-324    	; 0x1ee <USART_Flush>
	commTranslate(payload);
 332:	81 2f       	mov	r24, r17
 334:	9d df       	rcall	.-198    	; 0x270 <commTranslate>
 336:	c2 30       	cpi	r28, 0x02	; 2
}
	switch(shootState){
 338:	d1 05       	cpc	r29, r1
 33a:	09 f4       	brne	.+2      	; 0x33e <shootStateSM+0x26>
 33c:	3d c0       	rjmp	.+122    	; 0x3b8 <shootStateSM+0xa0>
 33e:	34 f4       	brge	.+12     	; 0x34c <shootStateSM+0x34>
 340:	20 97       	sbiw	r28, 0x00	; 0
 342:	61 f0       	breq	.+24     	; 0x35c <shootStateSM+0x44>
 344:	c1 30       	cpi	r28, 0x01	; 1
 346:	d1 05       	cpc	r29, r1
 348:	a9 f0       	breq	.+42     	; 0x374 <shootStateSM+0x5c>
 34a:	5d c0       	rjmp	.+186    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 34c:	c3 30       	cpi	r28, 0x03	; 3
 34e:	d1 05       	cpc	r29, r1
 350:	c9 f1       	breq	.+114    	; 0x3c4 <shootStateSM+0xac>
 352:	c4 30       	cpi	r28, 0x04	; 4
 354:	d1 05       	cpc	r29, r1
 356:	09 f4       	brne	.+2      	; 0x35a <shootStateSM+0x42>
 358:	4f c0       	rjmp	.+158    	; 0x3f8 <shootStateSM+0xe0>
 35a:	55 c0       	rjmp	.+170    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 35c:	91 e0       	ldi	r25, 0x01	; 1
		case shootStateSM_init:
			if(gameStart == 0){
				shootState = shootStateSM_init;
			}
			else{
				shootState = shootStateSM_wait;
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 364:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 368:	23 2b       	or	r18, r19
 36a:	09 f4       	brne	.+2      	; 0x36e <shootStateSM+0x56>
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	c9 2f       	mov	r28, r25
 370:	d8 2f       	mov	r29, r24
 372:	4e c0       	rjmp	.+156    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 374:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tempA>
			}
			break;
		case shootStateSM_wait:
			if(tempA){
 378:	88 23       	and	r24, r24
 37a:	a9 f0       	breq	.+42     	; 0x3a6 <shootStateSM+0x8e>
 37c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bulletCount>
				if(bulletCount > 0){
 380:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bulletCount+0x1>
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	61 f0       	breq	.+24     	; 0x3a0 <shootStateSM+0x88>
 388:	01 97       	sbiw	r24, 0x01	; 1
					bulletCount = bulletCount - 1;
 38a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <bulletCount+0x1>
 38e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bulletCount>
					sendToTarget(bulletCount);
 392:	9b df       	rcall	.-202    	; 0x2ca <sendToTarget>
 394:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bulletCount>
					shootState = shootStateSM_shoot;
				}
				if(bulletCount == 0){
 398:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bulletCount+0x1>
 39c:	89 2b       	or	r24, r25
					sendToTarget(bulletCount);
 39e:	b1 f5       	brne	.+108    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	93 df       	rcall	.-218    	; 0x2ca <sendToTarget>
					gameOver();
 3a4:	b6 df       	rcall	.-148    	; 0x312 <gameOver>
 3a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bulletCount>
				}
			}
			else{
				if(bulletCount == 0){
 3aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bulletCount+0x1>
 3ae:	00 97       	sbiw	r24, 0x00	; 0
					gameOver();
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <shootStateSM+0x9c>
 3b2:	af df       	rcall	.-162    	; 0x312 <gameOver>
				}
				sendToTarget(bulletCount);
 3b4:	8a df       	rcall	.-236    	; 0x2ca <sendToTarget>
 3b6:	2c c0       	rjmp	.+88     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
				shootState = shootStateSM_wait;
			}
			break;
		case shootStateSM_shoot:
			tempB = 0x01;
 3ba:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <tempB>
 3be:	c3 e0       	ldi	r28, 0x03	; 3
			shootState = shootStateSM_cooldown;
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
 3c2:	26 c0       	rjmp	.+76     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			break;
 3c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <coolDownCount>
		case shootStateSM_cooldown:
			if(coolDownCount  == 0){
 3c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <coolDownCount+0x1>
 3cc:	00 97       	sbiw	r24, 0x00	; 0
 3ce:	59 f4       	brne	.+22     	; 0x3e6 <shootStateSM+0xce>
 3d0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <tempB>
				tempB = 0x00;
 3d4:	82 e0       	ldi	r24, 0x02	; 2
				coolDownCount = 2;
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <coolDownCount+0x1>
 3dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <coolDownCount>
 3e0:	c4 e0       	ldi	r28, 0x04	; 4
				shootState = shootStateSM_waitRelease;
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
 3e4:	15 c0       	rjmp	.+42     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e6:	21 e0       	ldi	r18, 0x01	; 1
			}
			else{
				tempB = 0x01;
 3e8:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <tempB>
 3ec:	01 97       	sbiw	r24, 0x01	; 1
				coolDownCount = coolDownCount - 1;
 3ee:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <coolDownCount+0x1>
 3f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <coolDownCount>
 3f6:	0c c0       	rjmp	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tempA>
				shootState = shootStateSM_cooldown;
			}
			break;
		case shootStateSM_waitRelease:
			if(tempA == 0x01){
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	41 f0       	breq	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 400:	c1 e0       	ldi	r28, 0x01	; 1
				shootState = shootStateSM_waitRelease;
			}
			else{
				shootState = shootStateSM_wait;
 402:	d0 e0       	ldi	r29, 0x00	; 0
 404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 406:	c0 e0       	ldi	r28, 0x00	; 0
			}
			break;

		default:
			shootState = shootStateSM_init;
 408:	d0 e0       	ldi	r29, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	c2 e0       	ldi	r28, 0x02	; 2
		case shootStateSM_wait:
			if(tempA){
				if(bulletCount > 0){
					bulletCount = bulletCount - 1;
					sendToTarget(bulletCount);
					shootState = shootStateSM_shoot;
 40e:	d0 e0       	ldi	r29, 0x00	; 0
 410:	ce 01       	movw	r24, r28

		default:
			shootState = shootStateSM_init;
	}
	return shootState;
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	08 95       	ret

0000041a <displaySM>:
 41a:	1f 93       	push	r17

enum displayStates{displaySM_init, displaySM_update};

int displaySM(int displayState){
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	ec 01       	movw	r28, r24
 422:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 426:	88 23       	and	r24, r24
 428:	3c f4       	brge	.+14     	; 0x438 <displaySM+0x1e>
		payload = USART_Receive(0);
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0f df       	rcall	.-482    	; 0x24c <USART_Receive>
 42e:	18 2f       	mov	r17, r24
		USART_Flush(0);
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	dd de       	rcall	.-582    	; 0x1ee <USART_Flush>
		commTranslate(payload);
 434:	81 2f       	mov	r24, r17
 436:	1c df       	rcall	.-456    	; 0x270 <commTranslate>
 438:	20 97       	sbiw	r28, 0x00	; 0
	}
	switch(displayState){
 43a:	59 f4       	brne	.+22     	; 0x452 <displaySM+0x38>
 43c:	91 e0       	ldi	r25, 0x01	; 1
		case displaySM_init:
			if(gameStart == 0){
				//display game start screen
			}
			else{
				displayState = displaySM_update;
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 444:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 448:	23 2b       	or	r18, r19
 44a:	09 f4       	brne	.+2      	; 0x44e <displaySM+0x34>
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	c9 2f       	mov	r28, r25
 450:	d8 2f       	mov	r29, r24
 452:	ce 01       	movw	r24, r28
			//display bullets
			displayState = displaySM_update;
			break;
	}
	return displayState;
}
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	08 95       	ret

0000045c <commStateSM>:
 45c:	1f 93       	push	r17

//commStates are in charge of communication from target
enum commStates{commStateSM_init, commStateSM_loop};

int commStateSM(int commState){
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	ec 01       	movw	r28, r24
	unsigned char payload = 0x00;
	switch(commState){
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	19 f0       	breq	.+6      	; 0x46e <commStateSM+0x12>
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	21 f0       	breq	.+8      	; 0x474 <commStateSM+0x18>
 46c:	0e c0       	rjmp	.+28     	; 0x48a <commStateSM+0x2e>
		case commStateSM_init:
			commState = commStateSM_loop;
 46e:	c1 e0       	ldi	r28, 0x01	; 1
 470:	d0 e0       	ldi	r29, 0x00	; 0
 472:	0b c0       	rjmp	.+22     	; 0x48a <commStateSM+0x2e>
 474:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
			break;

		case commStateSM_loop:
			if(USART_HasReceived(0)){ //Message Received
 478:	88 23       	and	r24, r24
 47a:	3c f4       	brge	.+14     	; 0x48a <commStateSM+0x2e>
				payload = USART_Receive(0);
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	e6 de       	rcall	.-564    	; 0x24c <USART_Receive>
 480:	18 2f       	mov	r17, r24
				USART_Flush(0);
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	b4 de       	rcall	.-664    	; 0x1ee <USART_Flush>
				commTranslate(payload);
 486:	81 2f       	mov	r24, r17
 488:	f3 de       	rcall	.-538    	; 0x270 <commTranslate>
 48a:	ce 01       	movw	r24, r28
			}
			commState = commStateSM_loop;
			break;
	}
	return commState;
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	08 95       	ret

00000494 <main>:
 494:	cf 93       	push	r28

int main(void)
{
 496:	df 93       	push	r29
 498:	00 d0       	rcall	.+0      	; 0x49a <main+0x6>
 49a:	00 d0       	rcall	.+0      	; 0x49c <main+0x8>
 49c:	00 d0       	rcall	.+0      	; 0x49e <main+0xa>
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF; PORTB = 0x00;
 4a2:	8f ef       	ldi	r24, 0xFF	; 255
 4a4:	84 b9       	out	0x04, r24	; 4
 4a6:	15 b8       	out	0x05, r1	; 5
	//PORTC FOR Nokia 5110 LCD
	DDRA = 0x00; PORTA = 0xFF;
 4a8:	11 b8       	out	0x01, r1	; 1
 4aa:	82 b9       	out	0x02, r24	; 2
	initUSART(0);
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	7d de       	rcall	.-774    	; 0x1aa <initUSART>
	USART_Flush(0);
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	9d de       	rcall	.-710    	; 0x1ee <USART_Flush>
	static task task1;
	static task task2;
	static task task3;

	task *tasks[] = {&task1,&task2,&task3};
 4b4:	86 e0       	ldi	r24, 0x06	; 6
 4b6:	ea e0       	ldi	r30, 0x0A	; 10
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	de 01       	movw	r26, r28
 4bc:	11 96       	adiw	r26, 0x01	; 1
 4be:	01 90       	ld	r0, Z+
 4c0:	0d 92       	st	X+, r0
 4c2:	8a 95       	dec	r24
 4c4:	e1 f7       	brne	.-8      	; 0x4be <main+0x2a>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	task1.state = commStateSM_init;
 4c6:	e6 e3       	ldi	r30, 0x36	; 54
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	10 82       	st	Z, r1
	task1.period = 50;
 4cc:	82 e3       	ldi	r24, 0x32	; 50
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	a0 e0       	ldi	r26, 0x00	; 0
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	81 83       	std	Z+1, r24	; 0x01
 4d6:	92 83       	std	Z+2, r25	; 0x02
 4d8:	a3 83       	std	Z+3, r26	; 0x03
 4da:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = task1.period;
 4dc:	85 83       	std	Z+5, r24	; 0x05
 4de:	96 83       	std	Z+6, r25	; 0x06
 4e0:	a7 83       	std	Z+7, r26	; 0x07
 4e2:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &commStateSM;
 4e4:	2e e2       	ldi	r18, 0x2E	; 46
 4e6:	32 e0       	ldi	r19, 0x02	; 2
 4e8:	32 87       	std	Z+10, r19	; 0x0a
 4ea:	21 87       	std	Z+9, r18	; 0x09

	task2.state = shootStateSM_init;
 4ec:	eb e2       	ldi	r30, 0x2B	; 43
 4ee:	f1 e0       	ldi	r31, 0x01	; 1
 4f0:	10 82       	st	Z, r1
	task2.period = 100;
 4f2:	44 e6       	ldi	r20, 0x64	; 100
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	41 83       	std	Z+1, r20	; 0x01
 4fc:	52 83       	std	Z+2, r21	; 0x02
 4fe:	63 83       	std	Z+3, r22	; 0x03
 500:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = task2.period;
 502:	45 83       	std	Z+5, r20	; 0x05
 504:	56 83       	std	Z+6, r21	; 0x06
 506:	67 83       	std	Z+7, r22	; 0x07
 508:	70 87       	std	Z+8, r23	; 0x08
	task2.TickFct = &shootStateSM;
 50a:	2c e8       	ldi	r18, 0x8C	; 140
 50c:	31 e0       	ldi	r19, 0x01	; 1
 50e:	32 87       	std	Z+10, r19	; 0x0a
 510:	21 87       	std	Z+9, r18	; 0x09

	task3.state = displaySM_init;
 512:	e0 e2       	ldi	r30, 0x20	; 32
 514:	f1 e0       	ldi	r31, 0x01	; 1
 516:	10 82       	st	Z, r1
	task3.period = 50;
 518:	81 83       	std	Z+1, r24	; 0x01
 51a:	92 83       	std	Z+2, r25	; 0x02
 51c:	a3 83       	std	Z+3, r26	; 0x03
 51e:	b4 83       	std	Z+4, r27	; 0x04
	task3.elapsedTime = task3.period;
 520:	85 83       	std	Z+5, r24	; 0x05
 522:	96 83       	std	Z+6, r25	; 0x06
 524:	a7 83       	std	Z+7, r26	; 0x07
 526:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &displaySM;
 528:	8d e0       	ldi	r24, 0x0D	; 13
 52a:	92 e0       	ldi	r25, 0x02	; 2
 52c:	92 87       	std	Z+10, r25	; 0x0a
 52e:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(50);
 530:	62 e3       	ldi	r22, 0x32	; 50
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 538:	c7 dd       	rcall	.-1138   	; 0xc8 <TimerSet>
 53a:	d7 dd       	rcall	.-1106   	; 0xea <TimerOn>
 53c:	7e 01       	movw	r14, r28
 53e:	87 e0       	ldi	r24, 0x07	; 7
 540:	e8 0e       	add	r14, r24
 542:	f1 1c       	adc	r15, r1
	unsigned int i;
	//====End of Task Scheduler Setup====
	while (1)
	{
		tempA = PINA & 0x01;
 544:	80 b1       	in	r24, 0x00	; 0
 546:	81 70       	andi	r24, 0x01	; 1
 548:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <tempA>
 54c:	de 01       	movw	r26, r28
 54e:	11 96       	adiw	r26, 0x01	; 1
 550:	6d 01       	movw	r12, r26
		for( i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period){
 552:	f6 01       	movw	r30, r12
 554:	01 91       	ld	r16, Z+
 556:	11 91       	ld	r17, Z+
 558:	6f 01       	movw	r12, r30
 55a:	d8 01       	movw	r26, r16
 55c:	15 96       	adiw	r26, 0x05	; 5
 55e:	4d 91       	ld	r20, X+
 560:	5d 91       	ld	r21, X+
 562:	6d 91       	ld	r22, X+
 564:	7c 91       	ld	r23, X
 566:	18 97       	sbiw	r26, 0x08	; 8
 568:	11 96       	adiw	r26, 0x01	; 1
 56a:	8d 91       	ld	r24, X+
 56c:	9d 91       	ld	r25, X+
 56e:	0d 90       	ld	r0, X+
 570:	bc 91       	ld	r27, X
 572:	a0 2d       	mov	r26, r0
 574:	48 17       	cp	r20, r24
 576:	59 07       	cpc	r21, r25
 578:	6a 07       	cpc	r22, r26
 57a:	7b 07       	cpc	r23, r27
 57c:	81 f4       	brne	.+32     	; 0x59e <main+0x10a>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 57e:	f8 01       	movw	r30, r16
 580:	80 81       	ld	r24, Z
 582:	01 84       	ldd	r0, Z+9	; 0x09
 584:	f2 85       	ldd	r31, Z+10	; 0x0a
 586:	e0 2d       	mov	r30, r0
 588:	08 2e       	mov	r0, r24
 58a:	00 0c       	add	r0, r0
 58c:	99 0b       	sbc	r25, r25
 58e:	09 95       	icall
 590:	d8 01       	movw	r26, r16
 592:	8c 93       	st	X, r24
				tasks[i]->elapsedTime = 0;
 594:	f8 01       	movw	r30, r16
 596:	15 82       	std	Z+5, r1	; 0x05
 598:	16 82       	std	Z+6, r1	; 0x06
 59a:	17 82       	std	Z+7, r1	; 0x07
 59c:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i] ->elapsedTime += 50;
 59e:	f8 01       	movw	r30, r16
 5a0:	85 81       	ldd	r24, Z+5	; 0x05
 5a2:	96 81       	ldd	r25, Z+6	; 0x06
 5a4:	a7 81       	ldd	r26, Z+7	; 0x07
 5a6:	b0 85       	ldd	r27, Z+8	; 0x08
 5a8:	c2 96       	adiw	r24, 0x32	; 50
 5aa:	a1 1d       	adc	r26, r1
 5ac:	b1 1d       	adc	r27, r1
 5ae:	85 83       	std	Z+5, r24	; 0x05
 5b0:	96 83       	std	Z+6, r25	; 0x06
 5b2:	a7 83       	std	Z+7, r26	; 0x07
 5b4:	b0 87       	std	Z+8, r27	; 0x08
			PORTB = tempB;
 5b6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <tempB>
 5ba:	85 b9       	out	0x05, r24	; 5
	unsigned int i;
	//====End of Task Scheduler Setup====
	while (1)
	{
		tempA = PINA & 0x01;
		for( i = 0; i < numTasks; i++){
 5bc:	ce 14       	cp	r12, r14
 5be:	df 04       	cpc	r13, r15
 5c0:	41 f6       	brne	.-112    	; 0x552 <main+0xbe>
				tasks[i]->elapsedTime = 0;
			}
			tasks[i] ->elapsedTime += 50;
			PORTB = tempB;
		}
	while(!TimerFlag);
 5c2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <TimerFlag>
 5c6:	88 23       	and	r24, r24
 5c8:	e1 f3       	breq	.-8      	; 0x5c2 <main+0x12e>
	TimerFlag = 0;
 5ca:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <TimerFlag>
	}
 5ce:	ba cf       	rjmp	.-140    	; 0x544 <main+0xb0>

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
