
Milestone1Gun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002e2  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800106  00800106  0000037c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6b  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095a  00000000  00000000  0000131f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072e  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062d  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000670  00000000  00000000  00002b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003201  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ee       	ldi	r30, 0xE2	; 226
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ba d0       	rcall	.+372    	; 0x238 <main>
  c4:	0c c1       	rjmp	.+536    	; 0x2de <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <shootStateSM>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	91 05       	cpc	r25, r1
  cc:	a9 f0       	breq	.+42     	; 0xf8 <shootStateSM+0x30>
  ce:	34 f4       	brge	.+12     	; 0xdc <shootStateSM+0x14>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	d9 f1       	breq	.+118    	; 0x14a <shootStateSM+0x82>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	91 05       	cpc	r25, r1
  d8:	51 f0       	breq	.+20     	; 0xee <shootStateSM+0x26>
  da:	06 c0       	rjmp	.+12     	; 0xe8 <shootStateSM+0x20>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	89 f0       	breq	.+34     	; 0x104 <shootStateSM+0x3c>
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	91 05       	cpc	r25, r1
  e6:	51 f1       	breq	.+84     	; 0x13c <shootStateSM+0x74>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	08 95       	ret
  ee:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <tempD>
  f2:	21 11       	cpse	r18, r1
  f4:	2d c0       	rjmp	.+90     	; 0x150 <shootStateSM+0x88>
  f6:	08 95       	ret
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <tempB>
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	08 95       	ret
 104:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	21 15       	cp	r18, r1
 10e:	31 05       	cpc	r19, r1
 110:	59 f4       	brne	.+22     	; 0x128 <shootStateSM+0x60>
 112:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <tempB>
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <tempB>
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	31 09       	sbc	r19, r1
 132:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	08 95       	ret
 13c:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <tempD>
 140:	21 30       	cpi	r18, 0x01	; 1
 142:	41 f0       	breq	.+16     	; 0x154 <shootStateSM+0x8c>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	08 95       	ret

00000156 <TimerSet>:
 156:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 15a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 15e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 162:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
 166:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <_avr_timer_cntcurr>
 16a:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <_avr_timer_cntcurr+0x1>
 16e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_avr_timer_cntcurr+0x2>
 172:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_avr_timer_cntcurr+0x3>
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 19c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 1a0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 1a4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 1a8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr>
 1ac:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x1>
 1b0:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <_avr_timer_cntcurr+0x2>
 1b4:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <_avr_timer_cntcurr+0x3>
 1b8:	8f b7       	in	r24, 0x3f	; 63
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8f bf       	out	0x3f, r24	; 63
 1be:	08 95       	ret

000001c0 <__vector_13>:
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_cntcurr>
 1d6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x1>
 1da:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_cntcurr+0x2>
 1de:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_cntcurr+0x3>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr>
 1ec:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x1>
 1f0:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <_avr_timer_cntcurr+0x2>
 1f4:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <_avr_timer_cntcurr+0x3>
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	99 f4       	brne	.+38     	; 0x226 <__vector_13+0x66>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <TimerFlag>
 206:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 20a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 20e:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 212:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 216:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <_avr_timer_cntcurr>
 21a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_avr_timer_cntcurr+0x1>
 21e:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <_avr_timer_cntcurr+0x2>
 222:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <_avr_timer_cntcurr+0x3>
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <main>:
	return shootState;
}
int main(void)
{
    /* Replace with your application code */
	DDRB = 0xFF; PORTB = 0x00;
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	84 b9       	out	0x04, r24	; 4
 23c:	15 b8       	out	0x05, r1	; 5
	DDRD = 0x00; PORTD = 0xFF;
 23e:	1a b8       	out	0x0a, r1	; 10
 240:	8b b9       	out	0x0b, r24	; 11
	static task task1;
		
	task *tasks[] = {&task1,};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
		
	task1.state = shootStateSM_init;
 242:	e6 e0       	ldi	r30, 0x06	; 6
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	10 82       	st	Z, r1
	task1.period = 100;
 248:	84 e6       	ldi	r24, 0x64	; 100
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	a0 e0       	ldi	r26, 0x00	; 0
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	81 83       	std	Z+1, r24	; 0x01
 252:	92 83       	std	Z+2, r25	; 0x02
 254:	a3 83       	std	Z+3, r26	; 0x03
 256:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = task1.period;
 258:	85 83       	std	Z+5, r24	; 0x05
 25a:	96 83       	std	Z+6, r25	; 0x06
 25c:	a7 83       	std	Z+7, r26	; 0x07
 25e:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &shootStateSM;	
 260:	84 e6       	ldi	r24, 0x64	; 100
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	92 87       	std	Z+10, r25	; 0x0a
 266:	81 87       	std	Z+9, r24	; 0x09
	TimerSet(100);
 268:	64 e6       	ldi	r22, 0x64	; 100
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	72 df       	rcall	.-284    	; 0x156 <TimerSet>
	TimerOn();
 272:	82 df       	rcall	.-252    	; 0x178 <TimerOn>
 274:	c6 e0       	ldi	r28, 0x06	; 6
	//====End of Task Scheduler Setup====
	while (1)	
	{
		tempD = PIND & 0x01;
		for( i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period){
 276:	d1 e0       	ldi	r29, 0x01	; 1
 278:	89 b1       	in	r24, 0x09	; 9
	TimerOn();
	unsigned int i;
	//====End of Task Scheduler Setup====
	while (1)	
	{
		tempD = PIND & 0x01;
 27a:	81 70       	andi	r24, 0x01	; 1
 27c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <tempD>
 280:	4d 81       	ldd	r20, Y+5	; 0x05
		for( i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period){
 282:	5e 81       	ldd	r21, Y+6	; 0x06
 284:	6f 81       	ldd	r22, Y+7	; 0x07
 286:	78 85       	ldd	r23, Y+8	; 0x08
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	ab 81       	ldd	r26, Y+3	; 0x03
 28e:	bc 81       	ldd	r27, Y+4	; 0x04
 290:	48 17       	cp	r20, r24
 292:	59 07       	cpc	r21, r25
 294:	6a 07       	cpc	r22, r26
 296:	7b 07       	cpc	r23, r27
 298:	61 f4       	brne	.+24     	; 0x2b2 <main+0x7a>
 29a:	88 81       	ld	r24, Y
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 29c:	e9 85       	ldd	r30, Y+9	; 0x09
 29e:	fa 85       	ldd	r31, Y+10	; 0x0a
 2a0:	08 2e       	mov	r0, r24
 2a2:	00 0c       	add	r0, r0
 2a4:	99 0b       	sbc	r25, r25
 2a6:	09 95       	icall
 2a8:	88 83       	st	Y, r24
 2aa:	1d 82       	std	Y+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 2ac:	1e 82       	std	Y+6, r1	; 0x06
 2ae:	1f 82       	std	Y+7, r1	; 0x07
 2b0:	18 86       	std	Y+8, r1	; 0x08
 2b2:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i] ->elapsedTime += 100;
 2b4:	9e 81       	ldd	r25, Y+6	; 0x06
 2b6:	af 81       	ldd	r26, Y+7	; 0x07
 2b8:	b8 85       	ldd	r27, Y+8	; 0x08
 2ba:	8c 59       	subi	r24, 0x9C	; 156
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	af 4f       	sbci	r26, 0xFF	; 255
 2c0:	bf 4f       	sbci	r27, 0xFF	; 255
 2c2:	8d 83       	std	Y+5, r24	; 0x05
 2c4:	9e 83       	std	Y+6, r25	; 0x06
 2c6:	af 83       	std	Y+7, r26	; 0x07
 2c8:	b8 87       	std	Y+8, r27	; 0x08
 2ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tempB>
		}	
		PORTB = tempB;
 2ce:	85 b9       	out	0x05, r24	; 5
 2d0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <TimerFlag>
	while(!TimerFlag);
 2d4:	88 23       	and	r24, r24
 2d6:	e1 f3       	breq	.-8      	; 0x2d0 <main+0x98>
 2d8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <TimerFlag>
	TimerFlag = 0;
 2dc:	cd cf       	rjmp	.-102    	; 0x278 <main+0x40>

000002de <_exit>:
	}
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
