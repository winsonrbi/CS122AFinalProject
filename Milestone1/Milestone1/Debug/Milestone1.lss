
Milestone1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000fde  00001072  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800158  00800158  000010ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001505  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a78  00000000  00000000  00002785  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b03  00000000  00000000  000031fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00003d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e1  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c34  00000000  00000000  00004829  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000545d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	ec c2       	rjmp	.+1496   	; 0x5ee <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 35       	cpi	r26, 0x58	; 88
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e5       	ldi	r26, 0x58	; 88
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 3a       	cpi	r26, 0xA1	; 161
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	12 d3       	rcall	.+1572   	; 0x6e8 <main>
  c4:	8a c7       	rjmp	.+3860   	; 0xfda <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 17c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 180:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 184:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
 188:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <_avr_timer_cntcurr>
 18c:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <_avr_timer_cntcurr+0x1>
 190:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <_avr_timer_cntcurr+0x2>
 194:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <_avr_timer_cntcurr+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 1be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 1c2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 1c6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 1ca:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 1ce:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 1d2:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 1d6:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_avr_timer_cntcurr>
 1f8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <_avr_timer_cntcurr+0x1>
 1fc:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <_avr_timer_cntcurr+0x2>
 200:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <_avr_timer_cntcurr+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 20e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 212:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 216:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <TimerFlag>
 228:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 22c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 230:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 234:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 238:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 23c:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 240:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 244:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <initUSART>:
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	81 f0       	breq	.+32     	; 0x27e <initUSART+0x24>
 25e:	e1 ec       	ldi	r30, 0xC1	; 193
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 61       	ori	r24, 0x18	; 24
 266:	80 83       	st	Z, r24
 268:	e2 ec       	ldi	r30, 0xC2	; 194
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	80 83       	st	Z, r24
 272:	83 e3       	ldi	r24, 0x33	; 51
 274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 27c:	08 95       	ret
 27e:	e9 ec       	ldi	r30, 0xC9	; 201
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 61       	ori	r24, 0x18	; 24
 286:	80 83       	st	Z, r24
 288:	ea ec       	ldi	r30, 0xCA	; 202
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	80 83       	st	Z, r24
 292:	83 e3       	ldi	r24, 0x33	; 51
 294:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 298:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 29c:	08 95       	ret

0000029e <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	29 f4       	brne	.+10     	; 0x2ac <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2a2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 2a6:	88 23       	and	r24, r24
 2a8:	74 f0       	brlt	.+28     	; 0x2c6 <USART_Flush+0x28>
 2aa:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 2ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2b0:	88 23       	and	r24, r24
 2b2:	8c f4       	brge	.+34     	; 0x2d6 <USART_Flush+0x38>
 2b4:	a6 ec       	ldi	r26, 0xC6	; 198
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	8c 91       	ld	r24, X
 2be:	80 81       	ld	r24, Z
 2c0:	88 23       	and	r24, r24
 2c2:	e4 f3       	brlt	.-8      	; 0x2bc <USART_Flush+0x1e>
 2c4:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2c6:	ae ec       	ldi	r26, 0xCE	; 206
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e8 ec       	ldi	r30, 0xC8	; 200
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	8c 91       	ld	r24, X
 2d0:	80 81       	ld	r24, Z
 2d2:	88 23       	and	r24, r24
 2d4:	e4 f3       	brlt	.-8      	; 0x2ce <USART_Flush+0x30>
 2d6:	08 95       	ret

000002d8 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	41 f0       	breq	.+16     	; 0x2ec <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	90 81       	ld	r25, Z
 2e2:	95 ff       	sbrs	r25, 5
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <USART_Send+0x8>
		UDR0 = sendMe;
 2e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2ea:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 2ec:	e8 ec       	ldi	r30, 0xC8	; 200
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	90 81       	ld	r25, Z
 2f2:	95 ff       	sbrs	r25, 5
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <USART_Send+0x18>
		UDR1 = sendMe;
 2f6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2fa:	08 95       	ret

000002fc <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	41 f0       	breq	.+16     	; 0x310 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 300:	e0 ec       	ldi	r30, 0xC0	; 192
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	88 23       	and	r24, r24
 308:	ec f7       	brge	.-6      	; 0x304 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 30a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 30e:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 310:	e8 ec       	ldi	r30, 0xC8	; 200
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	88 23       	and	r24, r24
 318:	ec f7       	brge	.-6      	; 0x314 <USART_Receive+0x18>
		return UDR1;
 31a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 31e:	08 95       	ret

00000320 <DisplayString>:
	pins = (PINB & 0x07);
	hitCheck(pins);
}


void DisplayString( unsigned char column, const unsigned char* string) {
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
 326:	fb 01       	movw	r30, r22
 328:	90 81       	ld	r25, Z
 32a:	99 23       	and	r25, r25
 32c:	51 f0       	breq	.+20     	; 0x342 <DisplayString+0x22>
 32e:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 330:	11 e0       	ldi	r17, 0x01	; 1
 332:	18 0f       	add	r17, r24
 334:	e8 de       	rcall	.-560    	; 0x106 <LCD_Cursor>
		LCD_WriteData(*string++);
 336:	89 91       	ld	r24, Y+
 338:	fd de       	rcall	.-518    	; 0x134 <LCD_WriteData>


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 33a:	81 2f       	mov	r24, r17
}


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
 33c:	98 81       	ld	r25, Y
 33e:	91 11       	cpse	r25, r1
 340:	f7 cf       	rjmp	.-18     	; 0x330 <DisplayString+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	08 95       	ret

0000034a <randTarget>:
}
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
	USART_Send(sendValue,0);
}

void randTarget(){
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
	//TODO FINISH LED COLORS AND OUTPUT
	randomNumber = rand()%3;
 34e:	21 d3       	rcall	.+1602   	; 0x992 <rand>
 350:	c3 e0       	ldi	r28, 0x03	; 3
 352:	d0 e0       	ldi	r29, 0x00	; 0
 354:	be 01       	movw	r22, r28
 356:	8d d2       	rcall	.+1306   	; 0x872 <__divmodhi4>
 358:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <randomNumber+0x1>
 35c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <randomNumber>
	ammoBack = rand()% 3;
 360:	18 d3       	rcall	.+1584   	; 0x992 <rand>
 362:	be 01       	movw	r22, r28
 364:	86 d2       	rcall	.+1292   	; 0x872 <__divmodhi4>
 366:	28 2f       	mov	r18, r24
 368:	39 2f       	mov	r19, r25
 36a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <ammoBack>
 36e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <ammoBack+0x1>
 372:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <randomNumber>
	if(randomNumber == 0){
 376:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <randomNumber+0x1>
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	99 f4       	brne	.+38     	; 0x3a4 <randTarget+0x5a>
 37e:	23 2b       	or	r18, r19
		if(ammoBack == 0){
 380:	39 f4       	brne	.+14     	; 0x390 <randTarget+0x46>
 382:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 384:	87 e0       	ldi	r24, 0x07	; 7
			PORTA = 0X07;
 386:	82 b9       	out	0x02, r24	; 2
 388:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 38a:	83 7e       	andi	r24, 0xE3	; 227
 38c:	8b b9       	out	0x0b, r24	; 11
 38e:	06 c0       	rjmp	.+12     	; 0x39c <randTarget+0x52>
 390:	12 b8       	out	0x02, r1	; 2
		}
		else{
			//Green Light
			PORTA = 0x00;
 392:	82 e0       	ldi	r24, 0x02	; 2
			PORTA = 0x02;
 394:	82 b9       	out	0x02, r24	; 2
 396:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 398:	83 7e       	andi	r24, 0xE3	; 227
 39a:	8b b9       	out	0x0b, r24	; 11
 39c:	81 e0       	ldi	r24, 0x01	; 1
		}
		currTarget = 0x01;
 39e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3a2:	27 c0       	rjmp	.+78     	; 0x3f2 <randTarget+0xa8>
 3a4:	01 97       	sbiw	r24, 0x01	; 1
	}
	else if (randomNumber == 1){
 3a6:	99 f4       	brne	.+38     	; 0x3ce <randTarget+0x84>
 3a8:	23 2b       	or	r18, r19
		if(ammoBack == 0){
 3aa:	39 f4       	brne	.+14     	; 0x3ba <randTarget+0x70>
 3ac:	12 b8       	out	0x02, r1	; 2
			//White Light
			PORTA = 0x00;
 3ae:	88 e3       	ldi	r24, 0x38	; 56
			PORTA = 0x38;
 3b0:	82 b9       	out	0x02, r24	; 2
 3b2:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 3b4:	83 7e       	andi	r24, 0xE3	; 227
 3b6:	8b b9       	out	0x0b, r24	; 11
 3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <randTarget+0x7c>
 3ba:	12 b8       	out	0x02, r1	; 2
		}
		else{
			//Green Light
			PORTA = 0x00;
 3bc:	80 e1       	ldi	r24, 0x10	; 16
			PORTA = 0x10;
 3be:	82 b9       	out	0x02, r24	; 2
 3c0:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 3c2:	83 7e       	andi	r24, 0xE3	; 227
 3c4:	8b b9       	out	0x0b, r24	; 11
 3c6:	82 e0       	ldi	r24, 0x02	; 2
		}		
		currTarget = 0x02;
 3c8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3cc:	12 c0       	rjmp	.+36     	; 0x3f2 <randTarget+0xa8>
 3ce:	23 2b       	or	r18, r19
	}
	else{
		if(ammoBack == 0){
 3d0:	41 f4       	brne	.+16     	; 0x3e2 <randTarget+0x98>
 3d2:	8b b1       	in	r24, 0x0b	; 11
			//White Light
			PORTD = PORTD & 0xE3;
 3d4:	83 7e       	andi	r24, 0xE3	; 227
 3d6:	8b b9       	out	0x0b, r24	; 11
 3d8:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD | 0x01C;
 3da:	8c 61       	ori	r24, 0x1C	; 28
 3dc:	8b b9       	out	0x0b, r24	; 11
 3de:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 3e0:	05 c0       	rjmp	.+10     	; 0x3ec <randTarget+0xa2>
 3e2:	8b b1       	in	r24, 0x0b	; 11
		}
		else{
			//Green Light
			PORTD = PORTD & 0xE3;
 3e4:	83 7e       	andi	r24, 0xE3	; 227
 3e6:	8b b9       	out	0x0b, r24	; 11
 3e8:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD = PORTD | 0x08;
 3ea:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 3ec:	84 e0       	ldi	r24, 0x04	; 4
		}
		currTarget = 0x04;
 3ee:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3f2:	df 91       	pop	r29
	}
	return;
}
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <GameOver>:
 3f8:	cf 93       	push	r28
		break;
	}
	return commState;
}

void GameOver(){
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	c0 54       	subi	r28, 0x40	; 64
 402:	d1 09       	sbc	r29, r1
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
	char gameOverString[64];
	sendToGun(0x02);
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	96 d0       	rcall	.+300    	; 0x53e <sendToGun>
	sprintf(gameOverString,"Game Over,      Final Score: %d",score);
 412:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x1>
 416:	8f 93       	push	r24
 418:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 41c:	8f 93       	push	r24
 41e:	82 e1       	ldi	r24, 0x12	; 18
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	9f 93       	push	r25
 424:	8f 93       	push	r24
 426:	8e 01       	movw	r16, r28
 428:	0f 5f       	subi	r16, 0xFF	; 255
 42a:	1f 4f       	sbci	r17, 0xFF	; 255
 42c:	1f 93       	push	r17
 42e:	0f 93       	push	r16
 430:	be d2       	rcall	.+1404   	; 0x9ae <sprintf>
	LCD_DisplayString(1, gameOverString);
 432:	b8 01       	movw	r22, r16
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	87 de       	rcall	.-754    	; 0x146 <LCD_DisplayString>
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	ff cf       	rjmp	.-2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>

00000446 <commTranslate>:
volatile unsigned char pins = 0;
unsigned int bullets = 6;
//====END OF GLOBALS=====
void commTranslate(unsigned char data){
	//LCD_DisplayString(1,data);
	if(data == 0xFF){
 446:	8f 3f       	cpi	r24, 0xFF	; 255
 448:	09 f4       	brne	.+2      	; 0x44c <commTranslate+0x6>
		GameOver();
 44a:	d6 df       	rcall	.-84     	; 0x3f8 <GameOver>
	}
	else{
		bullets = data;
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bullets+0x1>
 452:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bullets>
		if(bullets == 0){
 456:	89 2b       	or	r24, r25
			GameOver();
 458:	09 f4       	brne	.+2      	; 0x45c <commTranslate+0x16>
 45a:	ce cf       	rjmp	.-100    	; 0x3f8 <GameOver>
 45c:	08 95       	ret

0000045e <targetSelectSM>:
	}
	return timerState;
}

enum targetSelectStates {targetSelectSM_init, targetSelectSM_targetSelect, targetSelectSM_hitWait};
int targetSelectSM(int targetSelectState){
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	ec 01       	movw	r28, r24
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 464:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 468:	88 23       	and	r24, r24
 46a:	1c f4       	brge	.+6      	; 0x472 <targetSelectSM+0x14>
		payload = USART_Receive(0);
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	46 df       	rcall	.-372    	; 0x2fc <USART_Receive>
		commTranslate(payload);
 470:	ea df       	rcall	.-44     	; 0x446 <commTranslate>
 472:	c1 30       	cpi	r28, 0x01	; 1
	}
	switch(targetSelectState){
 474:	d1 05       	cpc	r29, r1
 476:	61 f0       	breq	.+24     	; 0x490 <targetSelectSM+0x32>
 478:	c2 30       	cpi	r28, 0x02	; 2
 47a:	d1 05       	cpc	r29, r1
 47c:	69 f0       	breq	.+26     	; 0x498 <targetSelectSM+0x3a>
 47e:	20 97       	sbiw	r28, 0x00	; 0
 480:	e1 f4       	brne	.+56     	; 0x4ba <targetSelectSM+0x5c>
 482:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <score+0x1>
		case targetSelectSM_init:
		score = 0;
 486:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <score>
 48a:	c1 e0       	ldi	r28, 0x01	; 1
		targetSelectState = targetSelectSM_targetSelect;
 48c:	d0 e0       	ldi	r29, 0x00	; 0
		break;
 48e:	15 c0       	rjmp	.+42     	; 0x4ba <targetSelectSM+0x5c>

		case targetSelectSM_targetSelect:
		randTarget();
 490:	5c df       	rcall	.-328    	; 0x34a <randTarget>
 492:	c2 e0       	ldi	r28, 0x02	; 2
		targetSelectState = targetSelectSM_hitWait;
 494:	d0 e0       	ldi	r29, 0x00	; 0
 496:	11 c0       	rjmp	.+34     	; 0x4ba <targetSelectSM+0x5c>
		break;
 498:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <wait>

		case targetSelectSM_hitWait:
		++wait;
 49c:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <wait+0x1>
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <wait+0x1>
 4a6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <wait>
 4aa:	0a 97       	sbiw	r24, 0x0a	; 10
		if(wait == 10){ //2 Seconds is over, time to switch targets
 4ac:	31 f4       	brne	.+12     	; 0x4ba <targetSelectSM+0x5c>
 4ae:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <wait+0x1>
			wait = 0;
 4b2:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <wait>
 4b6:	c1 e0       	ldi	r28, 0x01	; 1
			targetSelectState = targetSelectSM_targetSelect;
 4b8:	d0 e0       	ldi	r29, 0x00	; 0
 4ba:	ce 01       	movw	r24, r28
			targetSelectState = targetSelectSM_hitWait;
		}
		break;
	}
	return targetSelectState;
}
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <LCDDisplaySM>:
 4c2:	1f 93       	push	r17

enum LCDDisplayStates{LCDDisplaySM_update, LCDDisplaySM_GameOver};
int LCDDisplaySM(int LCDDisplayState){
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	ec 01       	movw	r28, r24
 4ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 4ce:	88 23       	and	r24, r24
 4d0:	3c f4       	brge	.+14     	; 0x4e0 <LCDDisplaySM+0x1e>
		payload = USART_Receive(0);
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	13 df       	rcall	.-474    	; 0x2fc <USART_Receive>
 4d6:	18 2f       	mov	r17, r24
		USART_Flush(0);
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	e1 de       	rcall	.-574    	; 0x29e <USART_Flush>
		commTranslate(payload);
 4dc:	81 2f       	mov	r24, r17
 4de:	b3 df       	rcall	.-154    	; 0x446 <commTranslate>
 4e0:	cd 2b       	or	r28, r29
	}
	switch(LCDDisplayState){
 4e2:	39 f5       	brne	.+78     	; 0x532 <LCDDisplaySM+0x70>
 4e4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bullets+0x1>
		case LCDDisplaySM_update:
		sprintf(combineString,"Time: %02d        Score: %d Ammo:%d ",timeLeft,score,bullets);
 4e8:	8f 93       	push	r24
 4ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bullets>
 4ee:	8f 93       	push	r24
 4f0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x1>
 4f4:	8f 93       	push	r24
 4f6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 4fa:	8f 93       	push	r24
 4fc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <timeLeft+0x1>
 500:	8f 93       	push	r24
 502:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timeLeft>
 506:	8f 93       	push	r24
 508:	82 e3       	ldi	r24, 0x32	; 50
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	9f 93       	push	r25
 50e:	8f 93       	push	r24
 510:	89 e9       	ldi	r24, 0x99	; 153
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	9f 93       	push	r25
 516:	8f 93       	push	r24
 518:	4a d2       	rcall	.+1172   	; 0x9ae <sprintf>
 51a:	69 e9       	ldi	r22, 0x99	; 153
		DisplayString(1,combineString);
 51c:	71 e0       	ldi	r23, 0x01	; 1
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	ff de       	rcall	.-514    	; 0x320 <DisplayString>
 522:	8d b7       	in	r24, 0x3d	; 61
 524:	9e b7       	in	r25, 0x3e	; 62
		LCDDisplayState = LCDDisplaySM_update;
		
		break;
 526:	0a 96       	adiw	r24, 0x0a	; 10
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	9e bf       	out	0x3e, r25	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	8d bf       	out	0x3d, r24	; 61
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0

		default:
		LCDDisplayState = LCDDisplaySM_update;
	}
	return LCDDisplayState;
}
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	08 95       	ret

0000053e <sendToGun>:
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29

void sendToGun(unsigned char sendValue){
 542:	c8 2f       	mov	r28, r24
 544:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
unsigned char payload = 0x00;
if(USART_HasReceived(0)){ //Message Received
 548:	88 23       	and	r24, r24
 54a:	3c f4       	brge	.+14     	; 0x55a <sendToGun+0x1c>
	payload = USART_Receive(0);
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	d6 de       	rcall	.-596    	; 0x2fc <USART_Receive>
 550:	d8 2f       	mov	r29, r24
	USART_Flush(0);
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	a4 de       	rcall	.-696    	; 0x29e <USART_Flush>
	commTranslate(payload);
 556:	8d 2f       	mov	r24, r29
 558:	76 df       	rcall	.-276    	; 0x446 <commTranslate>
 55a:	e0 ec       	ldi	r30, 0xC0	; 192
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	85 ff       	sbrs	r24, 5
}
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
 562:	fd cf       	rjmp	.-6      	; 0x55e <sendToGun+0x20>
	USART_Send(sendValue,0);
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	8c 2f       	mov	r24, r28
 568:	b7 de       	rcall	.-658    	; 0x2d8 <USART_Send>
 56a:	df 91       	pop	r29
}
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <hitCheck>:
 570:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <pinUp>
}
void hitCheck(unsigned char pins){
	//Used by PCINT Interrupt to check whether correct target was hit, compare Target to IR receiver
	//Returns true if correct target was hit
	//TODO: Fix if statement if not correct
	if(pinUp == 1){
 574:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <pinUp+0x1>
 578:	21 30       	cpi	r18, 0x01	; 1
 57a:	31 05       	cpc	r19, r1
 57c:	29 f4       	brne	.+10     	; 0x588 <hitCheck+0x18>
		pinUp = 0;
 57e:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <pinUp+0x1>
 582:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <pinUp>
		return;
 586:	08 95       	ret
	}
	if(pins == currTarget){
 588:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <currTarget>
 58c:	98 13       	cpse	r25, r24
 58e:	2e c0       	rjmp	.+92     	; 0x5ec <hitCheck+0x7c>
		if(ammoBack == 0){
 590:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <ammoBack>
 594:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <ammoBack+0x1>
 598:	89 2b       	or	r24, r25
 59a:	61 f4       	brne	.+24     	; 0x5b4 <hitCheck+0x44>
			sendToGun(0x01);
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	ce df       	rcall	.-100    	; 0x53e <sendToGun>
			score++;
 5a2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 5a6:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <score+0x1>
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <score+0x1>
 5b0:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <score>
		}
		if(pinUp == 0){
 5b4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <pinUp>
 5b8:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <pinUp+0x1>
 5bc:	89 2b       	or	r24, r25
 5be:	b1 f4       	brne	.+44     	; 0x5ec <hitCheck+0x7c>
			currTarget = 0xFF;
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
			PORTA = 0x00;
 5c6:	12 b8       	out	0x02, r1	; 2
			PORTD = PORTD & 0xE3;
 5c8:	8b b1       	in	r24, 0x0b	; 11
 5ca:	83 7e       	andi	r24, 0xE3	; 227
 5cc:	8b b9       	out	0x0b, r24	; 11
			pinUp = 1;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <pinUp+0x1>
 5d6:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <pinUp>
			score++;
 5da:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 5de:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <score+0x1>
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <score+0x1>
 5e8:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <score>
 5ec:	08 95       	ret

000005ee <__vector_5>:
	}
	else{
		return;
	}
}
ISR(PCINT1_vect){
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	0b b6       	in	r0, 0x3b	; 59
 5fa:	0f 92       	push	r0
 5fc:	2f 93       	push	r18
 5fe:	3f 93       	push	r19
 600:	4f 93       	push	r20
 602:	5f 93       	push	r21
 604:	6f 93       	push	r22
 606:	7f 93       	push	r23
 608:	8f 93       	push	r24
 60a:	9f 93       	push	r25
 60c:	af 93       	push	r26
 60e:	bf 93       	push	r27
 610:	ef 93       	push	r30
 612:	ff 93       	push	r31
	pins = (PINB & 0x07);
 614:	83 b1       	in	r24, 0x03	; 3
 616:	87 70       	andi	r24, 0x07	; 7
 618:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <pins>
	hitCheck(pins);
 61c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <pins>
 620:	a7 df       	rcall	.-178    	; 0x570 <hitCheck>
}
 622:	ff 91       	pop	r31
 624:	ef 91       	pop	r30
 626:	bf 91       	pop	r27
 628:	af 91       	pop	r26
 62a:	9f 91       	pop	r25
 62c:	8f 91       	pop	r24
 62e:	7f 91       	pop	r23
 630:	6f 91       	pop	r22
 632:	5f 91       	pop	r21
 634:	4f 91       	pop	r20
 636:	3f 91       	pop	r19
 638:	2f 91       	pop	r18
 63a:	0f 90       	pop	r0
 63c:	0b be       	out	0x3b, r0	; 59
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <commStateSM>:
		currTarget = 0x04;
	}
	return;
}
enum commStates{commStateSM_init, commStateSM_loop};
int commStateSM(int commState){
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	ec 01       	movw	r28, r24
	unsigned char payload = 0x00;
	switch(commState){
 650:	00 97       	sbiw	r24, 0x00	; 0
 652:	19 f0       	breq	.+6      	; 0x65a <commStateSM+0x12>
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	21 f0       	breq	.+8      	; 0x660 <commStateSM+0x18>
 658:	0e c0       	rjmp	.+28     	; 0x676 <commStateSM+0x2e>
		case commStateSM_init:
		commState = commStateSM_loop;
 65a:	c1 e0       	ldi	r28, 0x01	; 1
 65c:	d0 e0       	ldi	r29, 0x00	; 0
 65e:	0b c0       	rjmp	.+22     	; 0x676 <commStateSM+0x2e>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 660:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		break;
		
		case commStateSM_loop:
		if(USART_HasReceived(0)){ //Message Received
 664:	88 23       	and	r24, r24
 666:	3c f4       	brge	.+14     	; 0x676 <commStateSM+0x2e>
			payload = USART_Receive(0);
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	48 de       	rcall	.-880    	; 0x2fc <USART_Receive>
 66c:	18 2f       	mov	r17, r24
			USART_Flush(0);
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	16 de       	rcall	.-980    	; 0x29e <USART_Flush>
			commTranslate(payload);
 672:	81 2f       	mov	r24, r17
 674:	e8 de       	rcall	.-560    	; 0x446 <commTranslate>
 676:	ce 01       	movw	r24, r28
		}
		commState = commStateSM_loop;
		break;
	}
	return commState;
}
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	1f 91       	pop	r17
 67e:	08 95       	ret

00000680 <timerSM>:
 680:	1f 93       	push	r17
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
enum timerStates{timerSM_init, timerSM_Countdown, timerSM_GameOver};
int timerSM(int timerState){
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	ec 01       	movw	r28, r24
 688:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 68c:	88 23       	and	r24, r24
 68e:	3c f4       	brge	.+14     	; 0x69e <timerSM+0x1e>
		payload = USART_Receive(0);
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	34 de       	rcall	.-920    	; 0x2fc <USART_Receive>
 694:	18 2f       	mov	r17, r24
		USART_Flush(0);
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	02 de       	rcall	.-1020   	; 0x29e <USART_Flush>
		commTranslate(payload);
 69a:	81 2f       	mov	r24, r17
 69c:	d4 de       	rcall	.-600    	; 0x446 <commTranslate>
 69e:	c1 30       	cpi	r28, 0x01	; 1
		
	}
	switch(timerState){
 6a0:	d1 05       	cpc	r29, r1
 6a2:	71 f0       	breq	.+28     	; 0x6c0 <timerSM+0x40>
 6a4:	c2 30       	cpi	r28, 0x02	; 2
 6a6:	d1 05       	cpc	r29, r1
 6a8:	c1 f0       	breq	.+48     	; 0x6da <timerSM+0x5a>
 6aa:	20 97       	sbiw	r28, 0x00	; 0
 6ac:	c1 f4       	brne	.+48     	; 0x6de <timerSM+0x5e>
 6ae:	8c e3       	ldi	r24, 0x3C	; 60
		case timerSM_init:
		timeLeft = 60;
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timeLeft+0x1>
 6b6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timeLeft>
 6ba:	c1 e0       	ldi	r28, 0x01	; 1
		timerState = timerSM_Countdown;
 6bc:	d0 e0       	ldi	r29, 0x00	; 0
 6be:	0f c0       	rjmp	.+30     	; 0x6de <timerSM+0x5e>
		break;
 6c0:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timeLeft>

		case timerSM_Countdown:
		if(timeLeft > 0){
 6c4:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <timeLeft+0x1>
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	31 f0       	breq	.+12     	; 0x6d8 <timerSM+0x58>
 6cc:	01 97       	sbiw	r24, 0x01	; 1
			timeLeft = timeLeft - 1;
 6ce:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timeLeft+0x1>
 6d2:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timeLeft>
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <timerSM+0x5e>
			timerState = timerSM_Countdown;
		}
		else{
			timerState = timerSM_GameOver;
			GameOver();
 6d8:	8f de       	rcall	.-738    	; 0x3f8 <GameOver>
 6da:	c0 e0       	ldi	r28, 0x00	; 0
		}
		break;

		case timerSM_GameOver:
		timerState = timerSM_init;
 6dc:	d0 e0       	ldi	r29, 0x00	; 0
 6de:	ce 01       	movw	r24, r28
		break;
	}
	return timerState;
}
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	1f 91       	pop	r17
 6e6:	08 95       	ret

000006e8 <main>:
 6e8:	cf 93       	push	r28
	while(1);
}


int main(void)
{
 6ea:	df 93       	push	r29
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	28 97       	sbiw	r28, 0x08	; 8
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	de bf       	out	0x3e, r29	; 62
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	cd bf       	out	0x3d, r28	; 61

	(PCMSK1) |= (1<< PCINT8);
 6fc:	ec e6       	ldi	r30, 0x6C	; 108
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	81 60       	ori	r24, 0x01	; 1
 704:	80 83       	st	Z, r24
	(PCMSK1) |= (1<< PCINT9);
 706:	80 81       	ld	r24, Z
 708:	82 60       	ori	r24, 0x02	; 2
 70a:	80 83       	st	Z, r24
	(PCMSK1) |= (1<< PCINT10);
 70c:	80 81       	ld	r24, Z
 70e:	84 60       	ori	r24, 0x04	; 4
 710:	80 83       	st	Z, r24
	(PCICR) |= (1<< PCIE1);
 712:	e8 e6       	ldi	r30, 0x68	; 104
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	82 60       	ori	r24, 0x02	; 2
 71a:	80 83       	st	Z, r24
	sei();
 71c:	78 94       	sei
	DDRD = 0xFF; PORTD = 0x00;
 71e:	8f ef       	ldi	r24, 0xFF	; 255
 720:	8a b9       	out	0x0a, r24	; 10
 722:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0XFF; PORTC = 0x00;
 724:	87 b9       	out	0x07, r24	; 7
 726:	18 b8       	out	0x08, r1	; 8
	DDRB = 0x00; PORTB = 0xFF;
 728:	14 b8       	out	0x04, r1	; 4
 72a:	85 b9       	out	0x05, r24	; 5
	DDRA = 0xFF; PORTA = 0x00;
 72c:	81 b9       	out	0x01, r24	; 1
 72e:	12 b8       	out	0x02, r1	; 2
	LCD_init();
 730:	f2 dc       	rcall	.-1564   	; 0x116 <LCD_init>
	initUSART(0);
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	92 dd       	rcall	.-1244   	; 0x25a <initUSART>
	USART_Flush(0);
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	b2 dd       	rcall	.-1180   	; 0x29e <USART_Flush>
 73a:	88 e0       	ldi	r24, 0x08	; 8
	static task task1;
	static task task2;
	static task task3;
	static task task4;

	task *tasks[] = {&task1,&task2,&task3,&task4};
 73c:	ea e0       	ldi	r30, 0x0A	; 10
 73e:	f1 e0       	ldi	r31, 0x01	; 1
 740:	de 01       	movw	r26, r28
 742:	11 96       	adiw	r26, 0x01	; 1
 744:	01 90       	ld	r0, Z+
 746:	0d 92       	st	X+, r0
 748:	8a 95       	dec	r24
 74a:	e1 f7       	brne	.-8      	; 0x744 <main+0x5c>
 74c:	e9 e7       	ldi	r30, 0x79	; 121
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	task1.state = timerSM_init;
 74e:	f1 e0       	ldi	r31, 0x01	; 1
 750:	10 82       	st	Z, r1
 752:	88 ee       	ldi	r24, 0xE8	; 232
	task1.period = 1000;
 754:	93 e0       	ldi	r25, 0x03	; 3
 756:	a0 e0       	ldi	r26, 0x00	; 0
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	81 83       	std	Z+1, r24	; 0x01
 75c:	92 83       	std	Z+2, r25	; 0x02
 75e:	a3 83       	std	Z+3, r26	; 0x03
 760:	b4 83       	std	Z+4, r27	; 0x04
 762:	85 83       	std	Z+5, r24	; 0x05
	task1.elapsedTime = task1.period;
 764:	96 83       	std	Z+6, r25	; 0x06
 766:	a7 83       	std	Z+7, r26	; 0x07
 768:	b0 87       	std	Z+8, r27	; 0x08
 76a:	80 e4       	ldi	r24, 0x40	; 64
	task1.TickFct = &timerSM;
 76c:	93 e0       	ldi	r25, 0x03	; 3
 76e:	92 87       	std	Z+10, r25	; 0x0a
 770:	81 87       	std	Z+9, r24	; 0x09
 772:	ee e6       	ldi	r30, 0x6E	; 110

	task2.state = targetSelectSM_init;
 774:	f1 e0       	ldi	r31, 0x01	; 1
 776:	10 82       	st	Z, r1
 778:	88 ec       	ldi	r24, 0xC8	; 200
	task2.period = 200;
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	a0 e0       	ldi	r26, 0x00	; 0
 77e:	b0 e0       	ldi	r27, 0x00	; 0
 780:	81 83       	std	Z+1, r24	; 0x01
 782:	92 83       	std	Z+2, r25	; 0x02
 784:	a3 83       	std	Z+3, r26	; 0x03
 786:	b4 83       	std	Z+4, r27	; 0x04
 788:	85 83       	std	Z+5, r24	; 0x05
	task2.elapsedTime = task2.period;
 78a:	96 83       	std	Z+6, r25	; 0x06
 78c:	a7 83       	std	Z+7, r26	; 0x07
 78e:	b0 87       	std	Z+8, r27	; 0x08
 790:	2f e2       	ldi	r18, 0x2F	; 47
	task2.TickFct = &targetSelectSM;
 792:	32 e0       	ldi	r19, 0x02	; 2
 794:	32 87       	std	Z+10, r19	; 0x0a
 796:	21 87       	std	Z+9, r18	; 0x09
 798:	e3 e6       	ldi	r30, 0x63	; 99

	task3.state = LCDDisplaySM_update;
 79a:	f1 e0       	ldi	r31, 0x01	; 1
 79c:	10 82       	st	Z, r1
 79e:	81 83       	std	Z+1, r24	; 0x01
	task3.period = 200;
 7a0:	92 83       	std	Z+2, r25	; 0x02
 7a2:	a3 83       	std	Z+3, r26	; 0x03
 7a4:	b4 83       	std	Z+4, r27	; 0x04
 7a6:	85 83       	std	Z+5, r24	; 0x05
	task3.elapsedTime = task3.period;
 7a8:	96 83       	std	Z+6, r25	; 0x06
 7aa:	a7 83       	std	Z+7, r26	; 0x07
 7ac:	b0 87       	std	Z+8, r27	; 0x08
 7ae:	81 e6       	ldi	r24, 0x61	; 97
	task3.TickFct = &LCDDisplaySM;
 7b0:	92 e0       	ldi	r25, 0x02	; 2
 7b2:	92 87       	std	Z+10, r25	; 0x0a
 7b4:	81 87       	std	Z+9, r24	; 0x09
 7b6:	e8 e5       	ldi	r30, 0x58	; 88

	task4.state = commStateSM_init;
 7b8:	f1 e0       	ldi	r31, 0x01	; 1
 7ba:	10 82       	st	Z, r1
 7bc:	82 e3       	ldi	r24, 0x32	; 50
	task4.period = 50;
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	a0 e0       	ldi	r26, 0x00	; 0
 7c2:	b0 e0       	ldi	r27, 0x00	; 0
 7c4:	81 83       	std	Z+1, r24	; 0x01
 7c6:	92 83       	std	Z+2, r25	; 0x02
 7c8:	a3 83       	std	Z+3, r26	; 0x03
 7ca:	b4 83       	std	Z+4, r27	; 0x04
 7cc:	85 83       	std	Z+5, r24	; 0x05
	task4.elapsedTime = task4.period;
 7ce:	96 83       	std	Z+6, r25	; 0x06
 7d0:	a7 83       	std	Z+7, r26	; 0x07
 7d2:	b0 87       	std	Z+8, r27	; 0x08
 7d4:	84 e2       	ldi	r24, 0x24	; 36
	task4.TickFct = &commStateSM;
 7d6:	93 e0       	ldi	r25, 0x03	; 3
 7d8:	92 87       	std	Z+10, r25	; 0x0a
 7da:	81 87       	std	Z+9, r24	; 0x09
 7dc:	62 e3       	ldi	r22, 0x32	; 50
	
	TimerSet(50);
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	c9 dc       	rcall	.-1646   	; 0x178 <TimerSet>
	TimerOn();
 7e6:	d9 dc       	rcall	.-1614   	; 0x19a <TimerOn>
 7e8:	83 e0       	ldi	r24, 0x03	; 3
	unsigned int i;
	//====End of Task Scheduler Setup====
	//Send start game signal to gun
	sendToGun(0x03);
 7ea:	a9 de       	rcall	.-686    	; 0x53e <sendToGun>
 7ec:	7e 01       	movw	r14, r28
 7ee:	89 e0       	ldi	r24, 0x09	; 9
 7f0:	e8 0e       	add	r14, r24
 7f2:	f1 1c       	adc	r15, r1
 7f4:	de 01       	movw	r26, r28
 7f6:	11 96       	adiw	r26, 0x01	; 1
 7f8:	6d 01       	movw	r12, r26
 7fa:	f6 01       	movw	r30, r12
 7fc:	01 91       	ld	r16, Z+
			LCD_DisplayString(1,USART_Receive(0));
			USART_Flush(0);
		}
		*/
		for( i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period){
 7fe:	11 91       	ld	r17, Z+
 800:	6f 01       	movw	r12, r30
 802:	d8 01       	movw	r26, r16
 804:	15 96       	adiw	r26, 0x05	; 5
 806:	4d 91       	ld	r20, X+
 808:	5d 91       	ld	r21, X+
 80a:	6d 91       	ld	r22, X+
 80c:	7c 91       	ld	r23, X
 80e:	18 97       	sbiw	r26, 0x08	; 8
 810:	11 96       	adiw	r26, 0x01	; 1
 812:	8d 91       	ld	r24, X+
 814:	9d 91       	ld	r25, X+
 816:	0d 90       	ld	r0, X+
 818:	bc 91       	ld	r27, X
 81a:	a0 2d       	mov	r26, r0
 81c:	48 17       	cp	r20, r24
 81e:	59 07       	cpc	r21, r25
 820:	6a 07       	cpc	r22, r26
 822:	7b 07       	cpc	r23, r27
 824:	81 f4       	brne	.+32     	; 0x846 <main+0x15e>
 826:	f8 01       	movw	r30, r16
 828:	80 81       	ld	r24, Z
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 82a:	01 84       	ldd	r0, Z+9	; 0x09
 82c:	f2 85       	ldd	r31, Z+10	; 0x0a
 82e:	e0 2d       	mov	r30, r0
 830:	08 2e       	mov	r0, r24
 832:	00 0c       	add	r0, r0
 834:	99 0b       	sbc	r25, r25
 836:	09 95       	icall
 838:	d8 01       	movw	r26, r16
 83a:	8c 93       	st	X, r24
 83c:	f8 01       	movw	r30, r16
 83e:	15 82       	std	Z+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 840:	16 82       	std	Z+6, r1	; 0x06
 842:	17 82       	std	Z+7, r1	; 0x07
 844:	10 86       	std	Z+8, r1	; 0x08
 846:	f8 01       	movw	r30, r16
 848:	85 81       	ldd	r24, Z+5	; 0x05
			}
			tasks[i] ->elapsedTime += 50;
 84a:	96 81       	ldd	r25, Z+6	; 0x06
 84c:	a7 81       	ldd	r26, Z+7	; 0x07
 84e:	b0 85       	ldd	r27, Z+8	; 0x08
 850:	c2 96       	adiw	r24, 0x32	; 50
 852:	a1 1d       	adc	r26, r1
 854:	b1 1d       	adc	r27, r1
 856:	85 83       	std	Z+5, r24	; 0x05
 858:	96 83       	std	Z+6, r25	; 0x06
 85a:	a7 83       	std	Z+7, r26	; 0x07
 85c:	b0 87       	std	Z+8, r27	; 0x08
 85e:	ce 14       	cp	r12, r14
 860:	df 04       	cpc	r13, r15
		while(USART_HasReceived(0)){
			LCD_DisplayString(1,USART_Receive(0));
			USART_Flush(0);
		}
		*/
		for( i = 0; i < numTasks; i++){
 862:	59 f6       	brne	.-106    	; 0x7fa <main+0x112>
 864:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <TimerFlag>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i] ->elapsedTime += 50;
		}
		while(!TimerFlag);
 868:	88 23       	and	r24, r24
 86a:	e1 f3       	breq	.-8      	; 0x864 <main+0x17c>
 86c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <TimerFlag>
		TimerFlag = 0;
 870:	c1 cf       	rjmp	.-126    	; 0x7f4 <main+0x10c>

00000872 <__divmodhi4>:
 872:	97 fb       	bst	r25, 7
    }
 874:	07 2e       	mov	r0, r23
 876:	16 f4       	brtc	.+4      	; 0x87c <__divmodhi4+0xa>
 878:	00 94       	com	r0
 87a:	06 d0       	rcall	.+12     	; 0x888 <__divmodhi4_neg1>
 87c:	77 fd       	sbrc	r23, 7
 87e:	08 d0       	rcall	.+16     	; 0x890 <__divmodhi4_neg2>
 880:	2d d0       	rcall	.+90     	; 0x8dc <__udivmodhi4>
 882:	07 fc       	sbrc	r0, 7
 884:	05 d0       	rcall	.+10     	; 0x890 <__divmodhi4_neg2>
 886:	3e f4       	brtc	.+14     	; 0x896 <__divmodhi4_exit>

00000888 <__divmodhi4_neg1>:
 888:	90 95       	com	r25
 88a:	81 95       	neg	r24
 88c:	9f 4f       	sbci	r25, 0xFF	; 255
 88e:	08 95       	ret

00000890 <__divmodhi4_neg2>:
 890:	70 95       	com	r23
 892:	61 95       	neg	r22
 894:	7f 4f       	sbci	r23, 0xFF	; 255

00000896 <__divmodhi4_exit>:
 896:	08 95       	ret

00000898 <__udivmodsi4>:
 898:	a1 e2       	ldi	r26, 0x21	; 33
 89a:	1a 2e       	mov	r1, r26
 89c:	aa 1b       	sub	r26, r26
 89e:	bb 1b       	sub	r27, r27
 8a0:	fd 01       	movw	r30, r26
 8a2:	0d c0       	rjmp	.+26     	; 0x8be <__udivmodsi4_ep>

000008a4 <__udivmodsi4_loop>:
 8a4:	aa 1f       	adc	r26, r26
 8a6:	bb 1f       	adc	r27, r27
 8a8:	ee 1f       	adc	r30, r30
 8aa:	ff 1f       	adc	r31, r31
 8ac:	a2 17       	cp	r26, r18
 8ae:	b3 07       	cpc	r27, r19
 8b0:	e4 07       	cpc	r30, r20
 8b2:	f5 07       	cpc	r31, r21
 8b4:	20 f0       	brcs	.+8      	; 0x8be <__udivmodsi4_ep>
 8b6:	a2 1b       	sub	r26, r18
 8b8:	b3 0b       	sbc	r27, r19
 8ba:	e4 0b       	sbc	r30, r20
 8bc:	f5 0b       	sbc	r31, r21

000008be <__udivmodsi4_ep>:
 8be:	66 1f       	adc	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	1a 94       	dec	r1
 8c8:	69 f7       	brne	.-38     	; 0x8a4 <__udivmodsi4_loop>
 8ca:	60 95       	com	r22
 8cc:	70 95       	com	r23
 8ce:	80 95       	com	r24
 8d0:	90 95       	com	r25
 8d2:	9b 01       	movw	r18, r22
 8d4:	ac 01       	movw	r20, r24
 8d6:	bd 01       	movw	r22, r26
 8d8:	cf 01       	movw	r24, r30
 8da:	08 95       	ret

000008dc <__udivmodhi4>:
 8dc:	aa 1b       	sub	r26, r26
 8de:	bb 1b       	sub	r27, r27
 8e0:	51 e1       	ldi	r21, 0x11	; 17
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <__udivmodhi4_ep>

000008e4 <__udivmodhi4_loop>:
 8e4:	aa 1f       	adc	r26, r26
 8e6:	bb 1f       	adc	r27, r27
 8e8:	a6 17       	cp	r26, r22
 8ea:	b7 07       	cpc	r27, r23
 8ec:	10 f0       	brcs	.+4      	; 0x8f2 <__udivmodhi4_ep>
 8ee:	a6 1b       	sub	r26, r22
 8f0:	b7 0b       	sbc	r27, r23

000008f2 <__udivmodhi4_ep>:
 8f2:	88 1f       	adc	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	5a 95       	dec	r21
 8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__udivmodhi4_loop>
 8fa:	80 95       	com	r24
 8fc:	90 95       	com	r25
 8fe:	bc 01       	movw	r22, r24
 900:	cd 01       	movw	r24, r26
 902:	08 95       	ret

00000904 <do_rand>:
 904:	8f 92       	push	r8
 906:	9f 92       	push	r9
 908:	af 92       	push	r10
 90a:	bf 92       	push	r11
 90c:	cf 92       	push	r12
 90e:	df 92       	push	r13
 910:	ef 92       	push	r14
 912:	ff 92       	push	r15
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	ec 01       	movw	r28, r24
 91a:	68 81       	ld	r22, Y
 91c:	79 81       	ldd	r23, Y+1	; 0x01
 91e:	8a 81       	ldd	r24, Y+2	; 0x02
 920:	9b 81       	ldd	r25, Y+3	; 0x03
 922:	61 15       	cp	r22, r1
 924:	71 05       	cpc	r23, r1
 926:	81 05       	cpc	r24, r1
 928:	91 05       	cpc	r25, r1
 92a:	21 f4       	brne	.+8      	; 0x934 <do_rand+0x30>
 92c:	64 e2       	ldi	r22, 0x24	; 36
 92e:	79 ed       	ldi	r23, 0xD9	; 217
 930:	8b e5       	ldi	r24, 0x5B	; 91
 932:	97 e0       	ldi	r25, 0x07	; 7
 934:	2d e1       	ldi	r18, 0x1D	; 29
 936:	33 ef       	ldi	r19, 0xF3	; 243
 938:	41 e0       	ldi	r20, 0x01	; 1
 93a:	50 e0       	ldi	r21, 0x00	; 0
 93c:	13 d3       	rcall	.+1574   	; 0xf64 <__divmodsi4>
 93e:	49 01       	movw	r8, r18
 940:	5a 01       	movw	r10, r20
 942:	9b 01       	movw	r18, r22
 944:	ac 01       	movw	r20, r24
 946:	a7 ea       	ldi	r26, 0xA7	; 167
 948:	b1 e4       	ldi	r27, 0x41	; 65
 94a:	28 d3       	rcall	.+1616   	; 0xf9c <__muluhisi3>
 94c:	6b 01       	movw	r12, r22
 94e:	7c 01       	movw	r14, r24
 950:	ac ee       	ldi	r26, 0xEC	; 236
 952:	b4 ef       	ldi	r27, 0xF4	; 244
 954:	a5 01       	movw	r20, r10
 956:	94 01       	movw	r18, r8
 958:	2d d3       	rcall	.+1626   	; 0xfb4 <__mulohisi3>
 95a:	dc 01       	movw	r26, r24
 95c:	cb 01       	movw	r24, r22
 95e:	8c 0d       	add	r24, r12
 960:	9d 1d       	adc	r25, r13
 962:	ae 1d       	adc	r26, r14
 964:	bf 1d       	adc	r27, r15
 966:	b7 ff       	sbrs	r27, 7
 968:	03 c0       	rjmp	.+6      	; 0x970 <do_rand+0x6c>
 96a:	01 97       	sbiw	r24, 0x01	; 1
 96c:	a1 09       	sbc	r26, r1
 96e:	b0 48       	sbci	r27, 0x80	; 128
 970:	88 83       	st	Y, r24
 972:	99 83       	std	Y+1, r25	; 0x01
 974:	aa 83       	std	Y+2, r26	; 0x02
 976:	bb 83       	std	Y+3, r27	; 0x03
 978:	9f 77       	andi	r25, 0x7F	; 127
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	ff 90       	pop	r15
 980:	ef 90       	pop	r14
 982:	df 90       	pop	r13
 984:	cf 90       	pop	r12
 986:	bf 90       	pop	r11
 988:	af 90       	pop	r10
 98a:	9f 90       	pop	r9
 98c:	8f 90       	pop	r8
 98e:	08 95       	ret

00000990 <rand_r>:
 990:	b9 cf       	rjmp	.-142    	; 0x904 <do_rand>

00000992 <rand>:
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	91 e0       	ldi	r25, 0x01	; 1
 996:	b6 cf       	rjmp	.-148    	; 0x904 <do_rand>

00000998 <srand>:
 998:	a0 e0       	ldi	r26, 0x00	; 0
 99a:	b0 e0       	ldi	r27, 0x00	; 0
 99c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 9a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 9a4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 9a8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 9ac:	08 95       	ret

000009ae <sprintf>:
 9ae:	0f 93       	push	r16
 9b0:	1f 93       	push	r17
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	cd b7       	in	r28, 0x3d	; 61
 9b8:	de b7       	in	r29, 0x3e	; 62
 9ba:	2e 97       	sbiw	r28, 0x0e	; 14
 9bc:	0f b6       	in	r0, 0x3f	; 63
 9be:	f8 94       	cli
 9c0:	de bf       	out	0x3e, r29	; 62
 9c2:	0f be       	out	0x3f, r0	; 63
 9c4:	cd bf       	out	0x3d, r28	; 61
 9c6:	0d 89       	ldd	r16, Y+21	; 0x15
 9c8:	1e 89       	ldd	r17, Y+22	; 0x16
 9ca:	86 e0       	ldi	r24, 0x06	; 6
 9cc:	8c 83       	std	Y+4, r24	; 0x04
 9ce:	1a 83       	std	Y+2, r17	; 0x02
 9d0:	09 83       	std	Y+1, r16	; 0x01
 9d2:	8f ef       	ldi	r24, 0xFF	; 255
 9d4:	9f e7       	ldi	r25, 0x7F	; 127
 9d6:	9e 83       	std	Y+6, r25	; 0x06
 9d8:	8d 83       	std	Y+5, r24	; 0x05
 9da:	ae 01       	movw	r20, r28
 9dc:	47 5e       	subi	r20, 0xE7	; 231
 9de:	5f 4f       	sbci	r21, 0xFF	; 255
 9e0:	6f 89       	ldd	r22, Y+23	; 0x17
 9e2:	78 8d       	ldd	r23, Y+24	; 0x18
 9e4:	ce 01       	movw	r24, r28
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	10 d0       	rcall	.+32     	; 0xa0a <vfprintf>
 9ea:	ef 81       	ldd	r30, Y+7	; 0x07
 9ec:	f8 85       	ldd	r31, Y+8	; 0x08
 9ee:	e0 0f       	add	r30, r16
 9f0:	f1 1f       	adc	r31, r17
 9f2:	10 82       	st	Z, r1
 9f4:	2e 96       	adiw	r28, 0x0e	; 14
 9f6:	0f b6       	in	r0, 0x3f	; 63
 9f8:	f8 94       	cli
 9fa:	de bf       	out	0x3e, r29	; 62
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	cd bf       	out	0x3d, r28	; 61
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	1f 91       	pop	r17
 a06:	0f 91       	pop	r16
 a08:	08 95       	ret

00000a0a <vfprintf>:
 a0a:	2f 92       	push	r2
 a0c:	3f 92       	push	r3
 a0e:	4f 92       	push	r4
 a10:	5f 92       	push	r5
 a12:	6f 92       	push	r6
 a14:	7f 92       	push	r7
 a16:	8f 92       	push	r8
 a18:	9f 92       	push	r9
 a1a:	af 92       	push	r10
 a1c:	bf 92       	push	r11
 a1e:	cf 92       	push	r12
 a20:	df 92       	push	r13
 a22:	ef 92       	push	r14
 a24:	ff 92       	push	r15
 a26:	0f 93       	push	r16
 a28:	1f 93       	push	r17
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	cd b7       	in	r28, 0x3d	; 61
 a30:	de b7       	in	r29, 0x3e	; 62
 a32:	2b 97       	sbiw	r28, 0x0b	; 11
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	f8 94       	cli
 a38:	de bf       	out	0x3e, r29	; 62
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	cd bf       	out	0x3d, r28	; 61
 a3e:	6c 01       	movw	r12, r24
 a40:	7b 01       	movw	r14, r22
 a42:	8a 01       	movw	r16, r20
 a44:	fc 01       	movw	r30, r24
 a46:	17 82       	std	Z+7, r1	; 0x07
 a48:	16 82       	std	Z+6, r1	; 0x06
 a4a:	83 81       	ldd	r24, Z+3	; 0x03
 a4c:	81 ff       	sbrs	r24, 1
 a4e:	bf c1       	rjmp	.+894    	; 0xdce <vfprintf+0x3c4>
 a50:	ce 01       	movw	r24, r28
 a52:	01 96       	adiw	r24, 0x01	; 1
 a54:	3c 01       	movw	r6, r24
 a56:	f6 01       	movw	r30, r12
 a58:	93 81       	ldd	r25, Z+3	; 0x03
 a5a:	f7 01       	movw	r30, r14
 a5c:	93 fd       	sbrc	r25, 3
 a5e:	85 91       	lpm	r24, Z+
 a60:	93 ff       	sbrs	r25, 3
 a62:	81 91       	ld	r24, Z+
 a64:	7f 01       	movw	r14, r30
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <vfprintf+0x62>
 a6a:	ad c1       	rjmp	.+858    	; 0xdc6 <vfprintf+0x3bc>
 a6c:	85 32       	cpi	r24, 0x25	; 37
 a6e:	39 f4       	brne	.+14     	; 0xa7e <vfprintf+0x74>
 a70:	93 fd       	sbrc	r25, 3
 a72:	85 91       	lpm	r24, Z+
 a74:	93 ff       	sbrs	r25, 3
 a76:	81 91       	ld	r24, Z+
 a78:	7f 01       	movw	r14, r30
 a7a:	85 32       	cpi	r24, 0x25	; 37
 a7c:	21 f4       	brne	.+8      	; 0xa86 <vfprintf+0x7c>
 a7e:	b6 01       	movw	r22, r12
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	d6 d1       	rcall	.+940    	; 0xe30 <fputc>
 a84:	e8 cf       	rjmp	.-48     	; 0xa56 <vfprintf+0x4c>
 a86:	91 2c       	mov	r9, r1
 a88:	21 2c       	mov	r2, r1
 a8a:	31 2c       	mov	r3, r1
 a8c:	ff e1       	ldi	r31, 0x1F	; 31
 a8e:	f3 15       	cp	r31, r3
 a90:	d8 f0       	brcs	.+54     	; 0xac8 <vfprintf+0xbe>
 a92:	8b 32       	cpi	r24, 0x2B	; 43
 a94:	79 f0       	breq	.+30     	; 0xab4 <vfprintf+0xaa>
 a96:	38 f4       	brcc	.+14     	; 0xaa6 <vfprintf+0x9c>
 a98:	80 32       	cpi	r24, 0x20	; 32
 a9a:	79 f0       	breq	.+30     	; 0xaba <vfprintf+0xb0>
 a9c:	83 32       	cpi	r24, 0x23	; 35
 a9e:	a1 f4       	brne	.+40     	; 0xac8 <vfprintf+0xbe>
 aa0:	23 2d       	mov	r18, r3
 aa2:	20 61       	ori	r18, 0x10	; 16
 aa4:	1d c0       	rjmp	.+58     	; 0xae0 <vfprintf+0xd6>
 aa6:	8d 32       	cpi	r24, 0x2D	; 45
 aa8:	61 f0       	breq	.+24     	; 0xac2 <vfprintf+0xb8>
 aaa:	80 33       	cpi	r24, 0x30	; 48
 aac:	69 f4       	brne	.+26     	; 0xac8 <vfprintf+0xbe>
 aae:	23 2d       	mov	r18, r3
 ab0:	21 60       	ori	r18, 0x01	; 1
 ab2:	16 c0       	rjmp	.+44     	; 0xae0 <vfprintf+0xd6>
 ab4:	83 2d       	mov	r24, r3
 ab6:	82 60       	ori	r24, 0x02	; 2
 ab8:	38 2e       	mov	r3, r24
 aba:	e3 2d       	mov	r30, r3
 abc:	e4 60       	ori	r30, 0x04	; 4
 abe:	3e 2e       	mov	r3, r30
 ac0:	2a c0       	rjmp	.+84     	; 0xb16 <vfprintf+0x10c>
 ac2:	f3 2d       	mov	r31, r3
 ac4:	f8 60       	ori	r31, 0x08	; 8
 ac6:	1d c0       	rjmp	.+58     	; 0xb02 <vfprintf+0xf8>
 ac8:	37 fc       	sbrc	r3, 7
 aca:	2d c0       	rjmp	.+90     	; 0xb26 <vfprintf+0x11c>
 acc:	20 ed       	ldi	r18, 0xD0	; 208
 ace:	28 0f       	add	r18, r24
 ad0:	2a 30       	cpi	r18, 0x0A	; 10
 ad2:	40 f0       	brcs	.+16     	; 0xae4 <vfprintf+0xda>
 ad4:	8e 32       	cpi	r24, 0x2E	; 46
 ad6:	b9 f4       	brne	.+46     	; 0xb06 <vfprintf+0xfc>
 ad8:	36 fc       	sbrc	r3, 6
 ada:	75 c1       	rjmp	.+746    	; 0xdc6 <vfprintf+0x3bc>
 adc:	23 2d       	mov	r18, r3
 ade:	20 64       	ori	r18, 0x40	; 64
 ae0:	32 2e       	mov	r3, r18
 ae2:	19 c0       	rjmp	.+50     	; 0xb16 <vfprintf+0x10c>
 ae4:	36 fe       	sbrs	r3, 6
 ae6:	06 c0       	rjmp	.+12     	; 0xaf4 <vfprintf+0xea>
 ae8:	8a e0       	ldi	r24, 0x0A	; 10
 aea:	98 9e       	mul	r9, r24
 aec:	20 0d       	add	r18, r0
 aee:	11 24       	eor	r1, r1
 af0:	92 2e       	mov	r9, r18
 af2:	11 c0       	rjmp	.+34     	; 0xb16 <vfprintf+0x10c>
 af4:	ea e0       	ldi	r30, 0x0A	; 10
 af6:	2e 9e       	mul	r2, r30
 af8:	20 0d       	add	r18, r0
 afa:	11 24       	eor	r1, r1
 afc:	22 2e       	mov	r2, r18
 afe:	f3 2d       	mov	r31, r3
 b00:	f0 62       	ori	r31, 0x20	; 32
 b02:	3f 2e       	mov	r3, r31
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <vfprintf+0x10c>
 b06:	8c 36       	cpi	r24, 0x6C	; 108
 b08:	21 f4       	brne	.+8      	; 0xb12 <vfprintf+0x108>
 b0a:	83 2d       	mov	r24, r3
 b0c:	80 68       	ori	r24, 0x80	; 128
 b0e:	38 2e       	mov	r3, r24
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <vfprintf+0x10c>
 b12:	88 36       	cpi	r24, 0x68	; 104
 b14:	41 f4       	brne	.+16     	; 0xb26 <vfprintf+0x11c>
 b16:	f7 01       	movw	r30, r14
 b18:	93 fd       	sbrc	r25, 3
 b1a:	85 91       	lpm	r24, Z+
 b1c:	93 ff       	sbrs	r25, 3
 b1e:	81 91       	ld	r24, Z+
 b20:	7f 01       	movw	r14, r30
 b22:	81 11       	cpse	r24, r1
 b24:	b3 cf       	rjmp	.-154    	; 0xa8c <vfprintf+0x82>
 b26:	98 2f       	mov	r25, r24
 b28:	9f 7d       	andi	r25, 0xDF	; 223
 b2a:	95 54       	subi	r25, 0x45	; 69
 b2c:	93 30       	cpi	r25, 0x03	; 3
 b2e:	28 f4       	brcc	.+10     	; 0xb3a <vfprintf+0x130>
 b30:	0c 5f       	subi	r16, 0xFC	; 252
 b32:	1f 4f       	sbci	r17, 0xFF	; 255
 b34:	9f e3       	ldi	r25, 0x3F	; 63
 b36:	99 83       	std	Y+1, r25	; 0x01
 b38:	0d c0       	rjmp	.+26     	; 0xb54 <vfprintf+0x14a>
 b3a:	83 36       	cpi	r24, 0x63	; 99
 b3c:	31 f0       	breq	.+12     	; 0xb4a <vfprintf+0x140>
 b3e:	83 37       	cpi	r24, 0x73	; 115
 b40:	71 f0       	breq	.+28     	; 0xb5e <vfprintf+0x154>
 b42:	83 35       	cpi	r24, 0x53	; 83
 b44:	09 f0       	breq	.+2      	; 0xb48 <vfprintf+0x13e>
 b46:	55 c0       	rjmp	.+170    	; 0xbf2 <vfprintf+0x1e8>
 b48:	20 c0       	rjmp	.+64     	; 0xb8a <vfprintf+0x180>
 b4a:	f8 01       	movw	r30, r16
 b4c:	80 81       	ld	r24, Z
 b4e:	89 83       	std	Y+1, r24	; 0x01
 b50:	0e 5f       	subi	r16, 0xFE	; 254
 b52:	1f 4f       	sbci	r17, 0xFF	; 255
 b54:	88 24       	eor	r8, r8
 b56:	83 94       	inc	r8
 b58:	91 2c       	mov	r9, r1
 b5a:	53 01       	movw	r10, r6
 b5c:	12 c0       	rjmp	.+36     	; 0xb82 <vfprintf+0x178>
 b5e:	28 01       	movw	r4, r16
 b60:	f2 e0       	ldi	r31, 0x02	; 2
 b62:	4f 0e       	add	r4, r31
 b64:	51 1c       	adc	r5, r1
 b66:	f8 01       	movw	r30, r16
 b68:	a0 80       	ld	r10, Z
 b6a:	b1 80       	ldd	r11, Z+1	; 0x01
 b6c:	36 fe       	sbrs	r3, 6
 b6e:	03 c0       	rjmp	.+6      	; 0xb76 <vfprintf+0x16c>
 b70:	69 2d       	mov	r22, r9
 b72:	70 e0       	ldi	r23, 0x00	; 0
 b74:	02 c0       	rjmp	.+4      	; 0xb7a <vfprintf+0x170>
 b76:	6f ef       	ldi	r22, 0xFF	; 255
 b78:	7f ef       	ldi	r23, 0xFF	; 255
 b7a:	c5 01       	movw	r24, r10
 b7c:	4e d1       	rcall	.+668    	; 0xe1a <strnlen>
 b7e:	4c 01       	movw	r8, r24
 b80:	82 01       	movw	r16, r4
 b82:	f3 2d       	mov	r31, r3
 b84:	ff 77       	andi	r31, 0x7F	; 127
 b86:	3f 2e       	mov	r3, r31
 b88:	15 c0       	rjmp	.+42     	; 0xbb4 <vfprintf+0x1aa>
 b8a:	28 01       	movw	r4, r16
 b8c:	22 e0       	ldi	r18, 0x02	; 2
 b8e:	42 0e       	add	r4, r18
 b90:	51 1c       	adc	r5, r1
 b92:	f8 01       	movw	r30, r16
 b94:	a0 80       	ld	r10, Z
 b96:	b1 80       	ldd	r11, Z+1	; 0x01
 b98:	36 fe       	sbrs	r3, 6
 b9a:	03 c0       	rjmp	.+6      	; 0xba2 <vfprintf+0x198>
 b9c:	69 2d       	mov	r22, r9
 b9e:	70 e0       	ldi	r23, 0x00	; 0
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <vfprintf+0x19c>
 ba2:	6f ef       	ldi	r22, 0xFF	; 255
 ba4:	7f ef       	ldi	r23, 0xFF	; 255
 ba6:	c5 01       	movw	r24, r10
 ba8:	2d d1       	rcall	.+602    	; 0xe04 <strnlen_P>
 baa:	4c 01       	movw	r8, r24
 bac:	f3 2d       	mov	r31, r3
 bae:	f0 68       	ori	r31, 0x80	; 128
 bb0:	3f 2e       	mov	r3, r31
 bb2:	82 01       	movw	r16, r4
 bb4:	33 fc       	sbrc	r3, 3
 bb6:	19 c0       	rjmp	.+50     	; 0xbea <vfprintf+0x1e0>
 bb8:	82 2d       	mov	r24, r2
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	88 16       	cp	r8, r24
 bbe:	99 06       	cpc	r9, r25
 bc0:	a0 f4       	brcc	.+40     	; 0xbea <vfprintf+0x1e0>
 bc2:	b6 01       	movw	r22, r12
 bc4:	80 e2       	ldi	r24, 0x20	; 32
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	33 d1       	rcall	.+614    	; 0xe30 <fputc>
 bca:	2a 94       	dec	r2
 bcc:	f5 cf       	rjmp	.-22     	; 0xbb8 <vfprintf+0x1ae>
 bce:	f5 01       	movw	r30, r10
 bd0:	37 fc       	sbrc	r3, 7
 bd2:	85 91       	lpm	r24, Z+
 bd4:	37 fe       	sbrs	r3, 7
 bd6:	81 91       	ld	r24, Z+
 bd8:	5f 01       	movw	r10, r30
 bda:	b6 01       	movw	r22, r12
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	28 d1       	rcall	.+592    	; 0xe30 <fputc>
 be0:	21 10       	cpse	r2, r1
 be2:	2a 94       	dec	r2
 be4:	21 e0       	ldi	r18, 0x01	; 1
 be6:	82 1a       	sub	r8, r18
 be8:	91 08       	sbc	r9, r1
 bea:	81 14       	cp	r8, r1
 bec:	91 04       	cpc	r9, r1
 bee:	79 f7       	brne	.-34     	; 0xbce <vfprintf+0x1c4>
 bf0:	e1 c0       	rjmp	.+450    	; 0xdb4 <vfprintf+0x3aa>
 bf2:	84 36       	cpi	r24, 0x64	; 100
 bf4:	11 f0       	breq	.+4      	; 0xbfa <vfprintf+0x1f0>
 bf6:	89 36       	cpi	r24, 0x69	; 105
 bf8:	39 f5       	brne	.+78     	; 0xc48 <vfprintf+0x23e>
 bfa:	f8 01       	movw	r30, r16
 bfc:	37 fe       	sbrs	r3, 7
 bfe:	07 c0       	rjmp	.+14     	; 0xc0e <vfprintf+0x204>
 c00:	60 81       	ld	r22, Z
 c02:	71 81       	ldd	r23, Z+1	; 0x01
 c04:	82 81       	ldd	r24, Z+2	; 0x02
 c06:	93 81       	ldd	r25, Z+3	; 0x03
 c08:	0c 5f       	subi	r16, 0xFC	; 252
 c0a:	1f 4f       	sbci	r17, 0xFF	; 255
 c0c:	08 c0       	rjmp	.+16     	; 0xc1e <vfprintf+0x214>
 c0e:	60 81       	ld	r22, Z
 c10:	71 81       	ldd	r23, Z+1	; 0x01
 c12:	07 2e       	mov	r0, r23
 c14:	00 0c       	add	r0, r0
 c16:	88 0b       	sbc	r24, r24
 c18:	99 0b       	sbc	r25, r25
 c1a:	0e 5f       	subi	r16, 0xFE	; 254
 c1c:	1f 4f       	sbci	r17, 0xFF	; 255
 c1e:	f3 2d       	mov	r31, r3
 c20:	ff 76       	andi	r31, 0x6F	; 111
 c22:	3f 2e       	mov	r3, r31
 c24:	97 ff       	sbrs	r25, 7
 c26:	09 c0       	rjmp	.+18     	; 0xc3a <vfprintf+0x230>
 c28:	90 95       	com	r25
 c2a:	80 95       	com	r24
 c2c:	70 95       	com	r23
 c2e:	61 95       	neg	r22
 c30:	7f 4f       	sbci	r23, 0xFF	; 255
 c32:	8f 4f       	sbci	r24, 0xFF	; 255
 c34:	9f 4f       	sbci	r25, 0xFF	; 255
 c36:	f0 68       	ori	r31, 0x80	; 128
 c38:	3f 2e       	mov	r3, r31
 c3a:	2a e0       	ldi	r18, 0x0A	; 10
 c3c:	30 e0       	ldi	r19, 0x00	; 0
 c3e:	a3 01       	movw	r20, r6
 c40:	33 d1       	rcall	.+614    	; 0xea8 <__ultoa_invert>
 c42:	88 2e       	mov	r8, r24
 c44:	86 18       	sub	r8, r6
 c46:	44 c0       	rjmp	.+136    	; 0xcd0 <vfprintf+0x2c6>
 c48:	85 37       	cpi	r24, 0x75	; 117
 c4a:	31 f4       	brne	.+12     	; 0xc58 <vfprintf+0x24e>
 c4c:	23 2d       	mov	r18, r3
 c4e:	2f 7e       	andi	r18, 0xEF	; 239
 c50:	b2 2e       	mov	r11, r18
 c52:	2a e0       	ldi	r18, 0x0A	; 10
 c54:	30 e0       	ldi	r19, 0x00	; 0
 c56:	25 c0       	rjmp	.+74     	; 0xca2 <vfprintf+0x298>
 c58:	93 2d       	mov	r25, r3
 c5a:	99 7f       	andi	r25, 0xF9	; 249
 c5c:	b9 2e       	mov	r11, r25
 c5e:	8f 36       	cpi	r24, 0x6F	; 111
 c60:	c1 f0       	breq	.+48     	; 0xc92 <vfprintf+0x288>
 c62:	18 f4       	brcc	.+6      	; 0xc6a <vfprintf+0x260>
 c64:	88 35       	cpi	r24, 0x58	; 88
 c66:	79 f0       	breq	.+30     	; 0xc86 <vfprintf+0x27c>
 c68:	ae c0       	rjmp	.+348    	; 0xdc6 <vfprintf+0x3bc>
 c6a:	80 37       	cpi	r24, 0x70	; 112
 c6c:	19 f0       	breq	.+6      	; 0xc74 <vfprintf+0x26a>
 c6e:	88 37       	cpi	r24, 0x78	; 120
 c70:	21 f0       	breq	.+8      	; 0xc7a <vfprintf+0x270>
 c72:	a9 c0       	rjmp	.+338    	; 0xdc6 <vfprintf+0x3bc>
 c74:	e9 2f       	mov	r30, r25
 c76:	e0 61       	ori	r30, 0x10	; 16
 c78:	be 2e       	mov	r11, r30
 c7a:	b4 fe       	sbrs	r11, 4
 c7c:	0d c0       	rjmp	.+26     	; 0xc98 <vfprintf+0x28e>
 c7e:	fb 2d       	mov	r31, r11
 c80:	f4 60       	ori	r31, 0x04	; 4
 c82:	bf 2e       	mov	r11, r31
 c84:	09 c0       	rjmp	.+18     	; 0xc98 <vfprintf+0x28e>
 c86:	34 fe       	sbrs	r3, 4
 c88:	0a c0       	rjmp	.+20     	; 0xc9e <vfprintf+0x294>
 c8a:	29 2f       	mov	r18, r25
 c8c:	26 60       	ori	r18, 0x06	; 6
 c8e:	b2 2e       	mov	r11, r18
 c90:	06 c0       	rjmp	.+12     	; 0xc9e <vfprintf+0x294>
 c92:	28 e0       	ldi	r18, 0x08	; 8
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	05 c0       	rjmp	.+10     	; 0xca2 <vfprintf+0x298>
 c98:	20 e1       	ldi	r18, 0x10	; 16
 c9a:	30 e0       	ldi	r19, 0x00	; 0
 c9c:	02 c0       	rjmp	.+4      	; 0xca2 <vfprintf+0x298>
 c9e:	20 e1       	ldi	r18, 0x10	; 16
 ca0:	32 e0       	ldi	r19, 0x02	; 2
 ca2:	f8 01       	movw	r30, r16
 ca4:	b7 fe       	sbrs	r11, 7
 ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <vfprintf+0x2ac>
 ca8:	60 81       	ld	r22, Z
 caa:	71 81       	ldd	r23, Z+1	; 0x01
 cac:	82 81       	ldd	r24, Z+2	; 0x02
 cae:	93 81       	ldd	r25, Z+3	; 0x03
 cb0:	0c 5f       	subi	r16, 0xFC	; 252
 cb2:	1f 4f       	sbci	r17, 0xFF	; 255
 cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <vfprintf+0x2b8>
 cb6:	60 81       	ld	r22, Z
 cb8:	71 81       	ldd	r23, Z+1	; 0x01
 cba:	80 e0       	ldi	r24, 0x00	; 0
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	0e 5f       	subi	r16, 0xFE	; 254
 cc0:	1f 4f       	sbci	r17, 0xFF	; 255
 cc2:	a3 01       	movw	r20, r6
 cc4:	f1 d0       	rcall	.+482    	; 0xea8 <__ultoa_invert>
 cc6:	88 2e       	mov	r8, r24
 cc8:	86 18       	sub	r8, r6
 cca:	fb 2d       	mov	r31, r11
 ccc:	ff 77       	andi	r31, 0x7F	; 127
 cce:	3f 2e       	mov	r3, r31
 cd0:	36 fe       	sbrs	r3, 6
 cd2:	0d c0       	rjmp	.+26     	; 0xcee <vfprintf+0x2e4>
 cd4:	23 2d       	mov	r18, r3
 cd6:	2e 7f       	andi	r18, 0xFE	; 254
 cd8:	a2 2e       	mov	r10, r18
 cda:	89 14       	cp	r8, r9
 cdc:	58 f4       	brcc	.+22     	; 0xcf4 <vfprintf+0x2ea>
 cde:	34 fe       	sbrs	r3, 4
 ce0:	0b c0       	rjmp	.+22     	; 0xcf8 <vfprintf+0x2ee>
 ce2:	32 fc       	sbrc	r3, 2
 ce4:	09 c0       	rjmp	.+18     	; 0xcf8 <vfprintf+0x2ee>
 ce6:	83 2d       	mov	r24, r3
 ce8:	8e 7e       	andi	r24, 0xEE	; 238
 cea:	a8 2e       	mov	r10, r24
 cec:	05 c0       	rjmp	.+10     	; 0xcf8 <vfprintf+0x2ee>
 cee:	b8 2c       	mov	r11, r8
 cf0:	a3 2c       	mov	r10, r3
 cf2:	03 c0       	rjmp	.+6      	; 0xcfa <vfprintf+0x2f0>
 cf4:	b8 2c       	mov	r11, r8
 cf6:	01 c0       	rjmp	.+2      	; 0xcfa <vfprintf+0x2f0>
 cf8:	b9 2c       	mov	r11, r9
 cfa:	a4 fe       	sbrs	r10, 4
 cfc:	0f c0       	rjmp	.+30     	; 0xd1c <vfprintf+0x312>
 cfe:	fe 01       	movw	r30, r28
 d00:	e8 0d       	add	r30, r8
 d02:	f1 1d       	adc	r31, r1
 d04:	80 81       	ld	r24, Z
 d06:	80 33       	cpi	r24, 0x30	; 48
 d08:	21 f4       	brne	.+8      	; 0xd12 <vfprintf+0x308>
 d0a:	9a 2d       	mov	r25, r10
 d0c:	99 7e       	andi	r25, 0xE9	; 233
 d0e:	a9 2e       	mov	r10, r25
 d10:	09 c0       	rjmp	.+18     	; 0xd24 <vfprintf+0x31a>
 d12:	a2 fe       	sbrs	r10, 2
 d14:	06 c0       	rjmp	.+12     	; 0xd22 <vfprintf+0x318>
 d16:	b3 94       	inc	r11
 d18:	b3 94       	inc	r11
 d1a:	04 c0       	rjmp	.+8      	; 0xd24 <vfprintf+0x31a>
 d1c:	8a 2d       	mov	r24, r10
 d1e:	86 78       	andi	r24, 0x86	; 134
 d20:	09 f0       	breq	.+2      	; 0xd24 <vfprintf+0x31a>
 d22:	b3 94       	inc	r11
 d24:	a3 fc       	sbrc	r10, 3
 d26:	10 c0       	rjmp	.+32     	; 0xd48 <vfprintf+0x33e>
 d28:	a0 fe       	sbrs	r10, 0
 d2a:	06 c0       	rjmp	.+12     	; 0xd38 <vfprintf+0x32e>
 d2c:	b2 14       	cp	r11, r2
 d2e:	80 f4       	brcc	.+32     	; 0xd50 <vfprintf+0x346>
 d30:	28 0c       	add	r2, r8
 d32:	92 2c       	mov	r9, r2
 d34:	9b 18       	sub	r9, r11
 d36:	0d c0       	rjmp	.+26     	; 0xd52 <vfprintf+0x348>
 d38:	b2 14       	cp	r11, r2
 d3a:	58 f4       	brcc	.+22     	; 0xd52 <vfprintf+0x348>
 d3c:	b6 01       	movw	r22, r12
 d3e:	80 e2       	ldi	r24, 0x20	; 32
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	76 d0       	rcall	.+236    	; 0xe30 <fputc>
 d44:	b3 94       	inc	r11
 d46:	f8 cf       	rjmp	.-16     	; 0xd38 <vfprintf+0x32e>
 d48:	b2 14       	cp	r11, r2
 d4a:	18 f4       	brcc	.+6      	; 0xd52 <vfprintf+0x348>
 d4c:	2b 18       	sub	r2, r11
 d4e:	02 c0       	rjmp	.+4      	; 0xd54 <vfprintf+0x34a>
 d50:	98 2c       	mov	r9, r8
 d52:	21 2c       	mov	r2, r1
 d54:	a4 fe       	sbrs	r10, 4
 d56:	0f c0       	rjmp	.+30     	; 0xd76 <vfprintf+0x36c>
 d58:	b6 01       	movw	r22, r12
 d5a:	80 e3       	ldi	r24, 0x30	; 48
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	68 d0       	rcall	.+208    	; 0xe30 <fputc>
 d60:	a2 fe       	sbrs	r10, 2
 d62:	16 c0       	rjmp	.+44     	; 0xd90 <vfprintf+0x386>
 d64:	a1 fc       	sbrc	r10, 1
 d66:	03 c0       	rjmp	.+6      	; 0xd6e <vfprintf+0x364>
 d68:	88 e7       	ldi	r24, 0x78	; 120
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	02 c0       	rjmp	.+4      	; 0xd72 <vfprintf+0x368>
 d6e:	88 e5       	ldi	r24, 0x58	; 88
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	b6 01       	movw	r22, r12
 d74:	0c c0       	rjmp	.+24     	; 0xd8e <vfprintf+0x384>
 d76:	8a 2d       	mov	r24, r10
 d78:	86 78       	andi	r24, 0x86	; 134
 d7a:	51 f0       	breq	.+20     	; 0xd90 <vfprintf+0x386>
 d7c:	a1 fe       	sbrs	r10, 1
 d7e:	02 c0       	rjmp	.+4      	; 0xd84 <vfprintf+0x37a>
 d80:	8b e2       	ldi	r24, 0x2B	; 43
 d82:	01 c0       	rjmp	.+2      	; 0xd86 <vfprintf+0x37c>
 d84:	80 e2       	ldi	r24, 0x20	; 32
 d86:	a7 fc       	sbrc	r10, 7
 d88:	8d e2       	ldi	r24, 0x2D	; 45
 d8a:	b6 01       	movw	r22, r12
 d8c:	90 e0       	ldi	r25, 0x00	; 0
 d8e:	50 d0       	rcall	.+160    	; 0xe30 <fputc>
 d90:	89 14       	cp	r8, r9
 d92:	30 f4       	brcc	.+12     	; 0xda0 <vfprintf+0x396>
 d94:	b6 01       	movw	r22, r12
 d96:	80 e3       	ldi	r24, 0x30	; 48
 d98:	90 e0       	ldi	r25, 0x00	; 0
 d9a:	4a d0       	rcall	.+148    	; 0xe30 <fputc>
 d9c:	9a 94       	dec	r9
 d9e:	f8 cf       	rjmp	.-16     	; 0xd90 <vfprintf+0x386>
 da0:	8a 94       	dec	r8
 da2:	f3 01       	movw	r30, r6
 da4:	e8 0d       	add	r30, r8
 da6:	f1 1d       	adc	r31, r1
 da8:	80 81       	ld	r24, Z
 daa:	b6 01       	movw	r22, r12
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	40 d0       	rcall	.+128    	; 0xe30 <fputc>
 db0:	81 10       	cpse	r8, r1
 db2:	f6 cf       	rjmp	.-20     	; 0xda0 <vfprintf+0x396>
 db4:	22 20       	and	r2, r2
 db6:	09 f4       	brne	.+2      	; 0xdba <vfprintf+0x3b0>
 db8:	4e ce       	rjmp	.-868    	; 0xa56 <vfprintf+0x4c>
 dba:	b6 01       	movw	r22, r12
 dbc:	80 e2       	ldi	r24, 0x20	; 32
 dbe:	90 e0       	ldi	r25, 0x00	; 0
 dc0:	37 d0       	rcall	.+110    	; 0xe30 <fputc>
 dc2:	2a 94       	dec	r2
 dc4:	f7 cf       	rjmp	.-18     	; 0xdb4 <vfprintf+0x3aa>
 dc6:	f6 01       	movw	r30, r12
 dc8:	86 81       	ldd	r24, Z+6	; 0x06
 dca:	97 81       	ldd	r25, Z+7	; 0x07
 dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <vfprintf+0x3c8>
 dce:	8f ef       	ldi	r24, 0xFF	; 255
 dd0:	9f ef       	ldi	r25, 0xFF	; 255
 dd2:	2b 96       	adiw	r28, 0x0b	; 11
 dd4:	0f b6       	in	r0, 0x3f	; 63
 dd6:	f8 94       	cli
 dd8:	de bf       	out	0x3e, r29	; 62
 dda:	0f be       	out	0x3f, r0	; 63
 ddc:	cd bf       	out	0x3d, r28	; 61
 dde:	df 91       	pop	r29
 de0:	cf 91       	pop	r28
 de2:	1f 91       	pop	r17
 de4:	0f 91       	pop	r16
 de6:	ff 90       	pop	r15
 de8:	ef 90       	pop	r14
 dea:	df 90       	pop	r13
 dec:	cf 90       	pop	r12
 dee:	bf 90       	pop	r11
 df0:	af 90       	pop	r10
 df2:	9f 90       	pop	r9
 df4:	8f 90       	pop	r8
 df6:	7f 90       	pop	r7
 df8:	6f 90       	pop	r6
 dfa:	5f 90       	pop	r5
 dfc:	4f 90       	pop	r4
 dfe:	3f 90       	pop	r3
 e00:	2f 90       	pop	r2
 e02:	08 95       	ret

00000e04 <strnlen_P>:
 e04:	fc 01       	movw	r30, r24
 e06:	05 90       	lpm	r0, Z+
 e08:	61 50       	subi	r22, 0x01	; 1
 e0a:	70 40       	sbci	r23, 0x00	; 0
 e0c:	01 10       	cpse	r0, r1
 e0e:	d8 f7       	brcc	.-10     	; 0xe06 <strnlen_P+0x2>
 e10:	80 95       	com	r24
 e12:	90 95       	com	r25
 e14:	8e 0f       	add	r24, r30
 e16:	9f 1f       	adc	r25, r31
 e18:	08 95       	ret

00000e1a <strnlen>:
 e1a:	fc 01       	movw	r30, r24
 e1c:	61 50       	subi	r22, 0x01	; 1
 e1e:	70 40       	sbci	r23, 0x00	; 0
 e20:	01 90       	ld	r0, Z+
 e22:	01 10       	cpse	r0, r1
 e24:	d8 f7       	brcc	.-10     	; 0xe1c <strnlen+0x2>
 e26:	80 95       	com	r24
 e28:	90 95       	com	r25
 e2a:	8e 0f       	add	r24, r30
 e2c:	9f 1f       	adc	r25, r31
 e2e:	08 95       	ret

00000e30 <fputc>:
 e30:	0f 93       	push	r16
 e32:	1f 93       	push	r17
 e34:	cf 93       	push	r28
 e36:	df 93       	push	r29
 e38:	fb 01       	movw	r30, r22
 e3a:	23 81       	ldd	r18, Z+3	; 0x03
 e3c:	21 fd       	sbrc	r18, 1
 e3e:	03 c0       	rjmp	.+6      	; 0xe46 <fputc+0x16>
 e40:	8f ef       	ldi	r24, 0xFF	; 255
 e42:	9f ef       	ldi	r25, 0xFF	; 255
 e44:	2c c0       	rjmp	.+88     	; 0xe9e <fputc+0x6e>
 e46:	22 ff       	sbrs	r18, 2
 e48:	16 c0       	rjmp	.+44     	; 0xe76 <fputc+0x46>
 e4a:	46 81       	ldd	r20, Z+6	; 0x06
 e4c:	57 81       	ldd	r21, Z+7	; 0x07
 e4e:	24 81       	ldd	r18, Z+4	; 0x04
 e50:	35 81       	ldd	r19, Z+5	; 0x05
 e52:	42 17       	cp	r20, r18
 e54:	53 07       	cpc	r21, r19
 e56:	44 f4       	brge	.+16     	; 0xe68 <fputc+0x38>
 e58:	a0 81       	ld	r26, Z
 e5a:	b1 81       	ldd	r27, Z+1	; 0x01
 e5c:	9d 01       	movw	r18, r26
 e5e:	2f 5f       	subi	r18, 0xFF	; 255
 e60:	3f 4f       	sbci	r19, 0xFF	; 255
 e62:	31 83       	std	Z+1, r19	; 0x01
 e64:	20 83       	st	Z, r18
 e66:	8c 93       	st	X, r24
 e68:	26 81       	ldd	r18, Z+6	; 0x06
 e6a:	37 81       	ldd	r19, Z+7	; 0x07
 e6c:	2f 5f       	subi	r18, 0xFF	; 255
 e6e:	3f 4f       	sbci	r19, 0xFF	; 255
 e70:	37 83       	std	Z+7, r19	; 0x07
 e72:	26 83       	std	Z+6, r18	; 0x06
 e74:	14 c0       	rjmp	.+40     	; 0xe9e <fputc+0x6e>
 e76:	8b 01       	movw	r16, r22
 e78:	ec 01       	movw	r28, r24
 e7a:	fb 01       	movw	r30, r22
 e7c:	00 84       	ldd	r0, Z+8	; 0x08
 e7e:	f1 85       	ldd	r31, Z+9	; 0x09
 e80:	e0 2d       	mov	r30, r0
 e82:	09 95       	icall
 e84:	89 2b       	or	r24, r25
 e86:	e1 f6       	brne	.-72     	; 0xe40 <fputc+0x10>
 e88:	d8 01       	movw	r26, r16
 e8a:	16 96       	adiw	r26, 0x06	; 6
 e8c:	8d 91       	ld	r24, X+
 e8e:	9c 91       	ld	r25, X
 e90:	17 97       	sbiw	r26, 0x07	; 7
 e92:	01 96       	adiw	r24, 0x01	; 1
 e94:	17 96       	adiw	r26, 0x07	; 7
 e96:	9c 93       	st	X, r25
 e98:	8e 93       	st	-X, r24
 e9a:	16 97       	sbiw	r26, 0x06	; 6
 e9c:	ce 01       	movw	r24, r28
 e9e:	df 91       	pop	r29
 ea0:	cf 91       	pop	r28
 ea2:	1f 91       	pop	r17
 ea4:	0f 91       	pop	r16
 ea6:	08 95       	ret

00000ea8 <__ultoa_invert>:
 ea8:	fa 01       	movw	r30, r20
 eaa:	aa 27       	eor	r26, r26
 eac:	28 30       	cpi	r18, 0x08	; 8
 eae:	51 f1       	breq	.+84     	; 0xf04 <__ultoa_invert+0x5c>
 eb0:	20 31       	cpi	r18, 0x10	; 16
 eb2:	81 f1       	breq	.+96     	; 0xf14 <__ultoa_invert+0x6c>
 eb4:	e8 94       	clt
 eb6:	6f 93       	push	r22
 eb8:	6e 7f       	andi	r22, 0xFE	; 254
 eba:	6e 5f       	subi	r22, 0xFE	; 254
 ebc:	7f 4f       	sbci	r23, 0xFF	; 255
 ebe:	8f 4f       	sbci	r24, 0xFF	; 255
 ec0:	9f 4f       	sbci	r25, 0xFF	; 255
 ec2:	af 4f       	sbci	r26, 0xFF	; 255
 ec4:	b1 e0       	ldi	r27, 0x01	; 1
 ec6:	3e d0       	rcall	.+124    	; 0xf44 <__ultoa_invert+0x9c>
 ec8:	b4 e0       	ldi	r27, 0x04	; 4
 eca:	3c d0       	rcall	.+120    	; 0xf44 <__ultoa_invert+0x9c>
 ecc:	67 0f       	add	r22, r23
 ece:	78 1f       	adc	r23, r24
 ed0:	89 1f       	adc	r24, r25
 ed2:	9a 1f       	adc	r25, r26
 ed4:	a1 1d       	adc	r26, r1
 ed6:	68 0f       	add	r22, r24
 ed8:	79 1f       	adc	r23, r25
 eda:	8a 1f       	adc	r24, r26
 edc:	91 1d       	adc	r25, r1
 ede:	a1 1d       	adc	r26, r1
 ee0:	6a 0f       	add	r22, r26
 ee2:	71 1d       	adc	r23, r1
 ee4:	81 1d       	adc	r24, r1
 ee6:	91 1d       	adc	r25, r1
 ee8:	a1 1d       	adc	r26, r1
 eea:	20 d0       	rcall	.+64     	; 0xf2c <__ultoa_invert+0x84>
 eec:	09 f4       	brne	.+2      	; 0xef0 <__ultoa_invert+0x48>
 eee:	68 94       	set
 ef0:	3f 91       	pop	r19
 ef2:	2a e0       	ldi	r18, 0x0A	; 10
 ef4:	26 9f       	mul	r18, r22
 ef6:	11 24       	eor	r1, r1
 ef8:	30 19       	sub	r19, r0
 efa:	30 5d       	subi	r19, 0xD0	; 208
 efc:	31 93       	st	Z+, r19
 efe:	de f6       	brtc	.-74     	; 0xeb6 <__ultoa_invert+0xe>
 f00:	cf 01       	movw	r24, r30
 f02:	08 95       	ret
 f04:	46 2f       	mov	r20, r22
 f06:	47 70       	andi	r20, 0x07	; 7
 f08:	40 5d       	subi	r20, 0xD0	; 208
 f0a:	41 93       	st	Z+, r20
 f0c:	b3 e0       	ldi	r27, 0x03	; 3
 f0e:	0f d0       	rcall	.+30     	; 0xf2e <__ultoa_invert+0x86>
 f10:	c9 f7       	brne	.-14     	; 0xf04 <__ultoa_invert+0x5c>
 f12:	f6 cf       	rjmp	.-20     	; 0xf00 <__ultoa_invert+0x58>
 f14:	46 2f       	mov	r20, r22
 f16:	4f 70       	andi	r20, 0x0F	; 15
 f18:	40 5d       	subi	r20, 0xD0	; 208
 f1a:	4a 33       	cpi	r20, 0x3A	; 58
 f1c:	18 f0       	brcs	.+6      	; 0xf24 <__ultoa_invert+0x7c>
 f1e:	49 5d       	subi	r20, 0xD9	; 217
 f20:	31 fd       	sbrc	r19, 1
 f22:	40 52       	subi	r20, 0x20	; 32
 f24:	41 93       	st	Z+, r20
 f26:	02 d0       	rcall	.+4      	; 0xf2c <__ultoa_invert+0x84>
 f28:	a9 f7       	brne	.-22     	; 0xf14 <__ultoa_invert+0x6c>
 f2a:	ea cf       	rjmp	.-44     	; 0xf00 <__ultoa_invert+0x58>
 f2c:	b4 e0       	ldi	r27, 0x04	; 4
 f2e:	a6 95       	lsr	r26
 f30:	97 95       	ror	r25
 f32:	87 95       	ror	r24
 f34:	77 95       	ror	r23
 f36:	67 95       	ror	r22
 f38:	ba 95       	dec	r27
 f3a:	c9 f7       	brne	.-14     	; 0xf2e <__ultoa_invert+0x86>
 f3c:	00 97       	sbiw	r24, 0x00	; 0
 f3e:	61 05       	cpc	r22, r1
 f40:	71 05       	cpc	r23, r1
 f42:	08 95       	ret
 f44:	9b 01       	movw	r18, r22
 f46:	ac 01       	movw	r20, r24
 f48:	0a 2e       	mov	r0, r26
 f4a:	06 94       	lsr	r0
 f4c:	57 95       	ror	r21
 f4e:	47 95       	ror	r20
 f50:	37 95       	ror	r19
 f52:	27 95       	ror	r18
 f54:	ba 95       	dec	r27
 f56:	c9 f7       	brne	.-14     	; 0xf4a <__ultoa_invert+0xa2>
 f58:	62 0f       	add	r22, r18
 f5a:	73 1f       	adc	r23, r19
 f5c:	84 1f       	adc	r24, r20
 f5e:	95 1f       	adc	r25, r21
 f60:	a0 1d       	adc	r26, r0
 f62:	08 95       	ret

00000f64 <__divmodsi4>:
 f64:	05 2e       	mov	r0, r21
 f66:	97 fb       	bst	r25, 7
 f68:	16 f4       	brtc	.+4      	; 0xf6e <__divmodsi4+0xa>
 f6a:	00 94       	com	r0
 f6c:	0f d0       	rcall	.+30     	; 0xf8c <__negsi2>
 f6e:	57 fd       	sbrc	r21, 7
 f70:	05 d0       	rcall	.+10     	; 0xf7c <__divmodsi4_neg2>
 f72:	92 dc       	rcall	.-1756   	; 0x898 <__udivmodsi4>
 f74:	07 fc       	sbrc	r0, 7
 f76:	02 d0       	rcall	.+4      	; 0xf7c <__divmodsi4_neg2>
 f78:	46 f4       	brtc	.+16     	; 0xf8a <__divmodsi4_exit>
 f7a:	08 c0       	rjmp	.+16     	; 0xf8c <__negsi2>

00000f7c <__divmodsi4_neg2>:
 f7c:	50 95       	com	r21
 f7e:	40 95       	com	r20
 f80:	30 95       	com	r19
 f82:	21 95       	neg	r18
 f84:	3f 4f       	sbci	r19, 0xFF	; 255
 f86:	4f 4f       	sbci	r20, 0xFF	; 255
 f88:	5f 4f       	sbci	r21, 0xFF	; 255

00000f8a <__divmodsi4_exit>:
 f8a:	08 95       	ret

00000f8c <__negsi2>:
 f8c:	90 95       	com	r25
 f8e:	80 95       	com	r24
 f90:	70 95       	com	r23
 f92:	61 95       	neg	r22
 f94:	7f 4f       	sbci	r23, 0xFF	; 255
 f96:	8f 4f       	sbci	r24, 0xFF	; 255
 f98:	9f 4f       	sbci	r25, 0xFF	; 255
 f9a:	08 95       	ret

00000f9c <__muluhisi3>:
 f9c:	0f d0       	rcall	.+30     	; 0xfbc <__umulhisi3>
 f9e:	a5 9f       	mul	r26, r21
 fa0:	90 0d       	add	r25, r0
 fa2:	b4 9f       	mul	r27, r20
 fa4:	90 0d       	add	r25, r0
 fa6:	a4 9f       	mul	r26, r20
 fa8:	80 0d       	add	r24, r0
 faa:	91 1d       	adc	r25, r1
 fac:	11 24       	eor	r1, r1
 fae:	08 95       	ret

00000fb0 <__mulshisi3>:
 fb0:	b7 ff       	sbrs	r27, 7
 fb2:	f4 cf       	rjmp	.-24     	; 0xf9c <__muluhisi3>

00000fb4 <__mulohisi3>:
 fb4:	f3 df       	rcall	.-26     	; 0xf9c <__muluhisi3>
 fb6:	82 1b       	sub	r24, r18
 fb8:	93 0b       	sbc	r25, r19
 fba:	08 95       	ret

00000fbc <__umulhisi3>:
 fbc:	a2 9f       	mul	r26, r18
 fbe:	b0 01       	movw	r22, r0
 fc0:	b3 9f       	mul	r27, r19
 fc2:	c0 01       	movw	r24, r0
 fc4:	a3 9f       	mul	r26, r19
 fc6:	70 0d       	add	r23, r0
 fc8:	81 1d       	adc	r24, r1
 fca:	11 24       	eor	r1, r1
 fcc:	91 1d       	adc	r25, r1
 fce:	b2 9f       	mul	r27, r18
 fd0:	70 0d       	add	r23, r0
 fd2:	81 1d       	adc	r24, r1
 fd4:	11 24       	eor	r1, r1
 fd6:	91 1d       	adc	r25, r1
 fd8:	08 95       	ret

00000fda <_exit>:
 fda:	f8 94       	cli

00000fdc <__stop_program>:
 fdc:	ff cf       	rjmp	.-2      	; 0xfdc <__stop_program>
