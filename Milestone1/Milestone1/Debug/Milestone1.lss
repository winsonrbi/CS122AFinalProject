
Milestone1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000fc2  00001056  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800158  00800158  000010ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014da  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a78  00000000  00000000  0000273e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac7  00000000  00000000  000031b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00003c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e1  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1b  00000000  00000000  000047a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000053c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	de c2       	rjmp	.+1468   	; 0x5d2 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 35       	cpi	r26, 0x58	; 88
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e5       	ldi	r26, 0x58	; 88
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 3a       	cpi	r26, 0xA1	; 161
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	04 d3       	rcall	.+1544   	; 0x6cc <main>
  c4:	7c c7       	rjmp	.+3832   	; 0xfbe <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 17c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 180:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 184:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
 188:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <_avr_timer_cntcurr>
 18c:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <_avr_timer_cntcurr+0x1>
 190:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <_avr_timer_cntcurr+0x2>
 194:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <_avr_timer_cntcurr+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 1be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 1c2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 1c6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 1ca:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 1ce:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 1d2:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 1d6:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_avr_timer_cntcurr>
 1f8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <_avr_timer_cntcurr+0x1>
 1fc:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <_avr_timer_cntcurr+0x2>
 200:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <_avr_timer_cntcurr+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 20e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 212:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 216:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <TimerFlag>
 228:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 22c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 230:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 234:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 238:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 23c:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 240:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 244:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <initUSART>:
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	81 f0       	breq	.+32     	; 0x27e <initUSART+0x24>
 25e:	e1 ec       	ldi	r30, 0xC1	; 193
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 61       	ori	r24, 0x18	; 24
 266:	80 83       	st	Z, r24
 268:	e2 ec       	ldi	r30, 0xC2	; 194
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	80 83       	st	Z, r24
 272:	83 e3       	ldi	r24, 0x33	; 51
 274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 27c:	08 95       	ret
 27e:	e9 ec       	ldi	r30, 0xC9	; 201
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 61       	ori	r24, 0x18	; 24
 286:	80 83       	st	Z, r24
 288:	ea ec       	ldi	r30, 0xCA	; 202
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	80 83       	st	Z, r24
 292:	83 e3       	ldi	r24, 0x33	; 51
 294:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 298:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 29c:	08 95       	ret

0000029e <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	29 f4       	brne	.+10     	; 0x2ac <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2a2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 2a6:	88 23       	and	r24, r24
 2a8:	74 f0       	brlt	.+28     	; 0x2c6 <USART_Flush+0x28>
 2aa:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 2ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2b0:	88 23       	and	r24, r24
 2b2:	8c f4       	brge	.+34     	; 0x2d6 <USART_Flush+0x38>
 2b4:	a6 ec       	ldi	r26, 0xC6	; 198
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	8c 91       	ld	r24, X
 2be:	80 81       	ld	r24, Z
 2c0:	88 23       	and	r24, r24
 2c2:	e4 f3       	brlt	.-8      	; 0x2bc <USART_Flush+0x1e>
 2c4:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2c6:	ae ec       	ldi	r26, 0xCE	; 206
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e8 ec       	ldi	r30, 0xC8	; 200
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	8c 91       	ld	r24, X
 2d0:	80 81       	ld	r24, Z
 2d2:	88 23       	and	r24, r24
 2d4:	e4 f3       	brlt	.-8      	; 0x2ce <USART_Flush+0x30>
 2d6:	08 95       	ret

000002d8 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	41 f0       	breq	.+16     	; 0x2ec <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	90 81       	ld	r25, Z
 2e2:	95 ff       	sbrs	r25, 5
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <USART_Send+0x8>
		UDR0 = sendMe;
 2e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2ea:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 2ec:	e8 ec       	ldi	r30, 0xC8	; 200
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	90 81       	ld	r25, Z
 2f2:	95 ff       	sbrs	r25, 5
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <USART_Send+0x18>
		UDR1 = sendMe;
 2f6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2fa:	08 95       	ret

000002fc <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	41 f0       	breq	.+16     	; 0x310 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 300:	e0 ec       	ldi	r30, 0xC0	; 192
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	88 23       	and	r24, r24
 308:	ec f7       	brge	.-6      	; 0x304 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 30a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 30e:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 310:	e8 ec       	ldi	r30, 0xC8	; 200
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	88 23       	and	r24, r24
 318:	ec f7       	brge	.-6      	; 0x314 <USART_Receive+0x18>
		return UDR1;
 31a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 31e:	08 95       	ret

00000320 <DisplayString>:
	pins = (PINB & 0x07);
	hitCheck(pins);
}


void DisplayString( unsigned char column, const unsigned char* string) {
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
 326:	fb 01       	movw	r30, r22
 328:	90 81       	ld	r25, Z
 32a:	99 23       	and	r25, r25
 32c:	51 f0       	breq	.+20     	; 0x342 <DisplayString+0x22>
 32e:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 330:	11 e0       	ldi	r17, 0x01	; 1
 332:	18 0f       	add	r17, r24
 334:	e8 de       	rcall	.-560    	; 0x106 <LCD_Cursor>
		LCD_WriteData(*string++);
 336:	89 91       	ld	r24, Y+
 338:	fd de       	rcall	.-518    	; 0x134 <LCD_WriteData>


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 33a:	81 2f       	mov	r24, r17
}


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
 33c:	98 81       	ld	r25, Y
 33e:	91 11       	cpse	r25, r1
 340:	f7 cf       	rjmp	.-18     	; 0x330 <DisplayString+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	08 95       	ret

0000034a <randTarget>:
}
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
	USART_Send(sendValue,0);
}

void randTarget(){
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
	//TODO FINISH LED COLORS AND OUTPUT
	randomNumber = rand()%3;
 34e:	13 d3       	rcall	.+1574   	; 0x976 <rand>
 350:	c3 e0       	ldi	r28, 0x03	; 3
 352:	d0 e0       	ldi	r29, 0x00	; 0
 354:	be 01       	movw	r22, r28
 356:	7f d2       	rcall	.+1278   	; 0x856 <__divmodhi4>
 358:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <randomNumber+0x1>
 35c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <randomNumber>
	ammoBack = rand()% 3;
 360:	0a d3       	rcall	.+1556   	; 0x976 <rand>
 362:	be 01       	movw	r22, r28
 364:	78 d2       	rcall	.+1264   	; 0x856 <__divmodhi4>
 366:	28 2f       	mov	r18, r24
 368:	39 2f       	mov	r19, r25
 36a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <ammoBack>
 36e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <ammoBack+0x1>
 372:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <randomNumber>
	if(randomNumber == 0){
 376:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <randomNumber+0x1>
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	89 f4       	brne	.+34     	; 0x3a0 <randTarget+0x56>
 37e:	23 2b       	or	r18, r19
		if(ammoBack == 0){
 380:	31 f4       	brne	.+12     	; 0x38e <randTarget+0x44>
 382:	87 e0       	ldi	r24, 0x07	; 7
			PORTA = 0X07;
 384:	82 b9       	out	0x02, r24	; 2
 386:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 388:	83 7e       	andi	r24, 0xE3	; 227
 38a:	8b b9       	out	0x0b, r24	; 11
 38c:	05 c0       	rjmp	.+10     	; 0x398 <randTarget+0x4e>
 38e:	81 e0       	ldi	r24, 0x01	; 1
		}
		else{
			//Green Light
			PORTA = 0x01;
 390:	82 b9       	out	0x02, r24	; 2
 392:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 394:	83 7e       	andi	r24, 0xE3	; 227
 396:	8b b9       	out	0x0b, r24	; 11
 398:	81 e0       	ldi	r24, 0x01	; 1
		}
		currTarget = 0x01;
 39a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 39e:	1f c0       	rjmp	.+62     	; 0x3de <randTarget+0x94>
 3a0:	01 97       	sbiw	r24, 0x01	; 1
	}
	else if (randomNumber == 1){
 3a2:	89 f4       	brne	.+34     	; 0x3c6 <randTarget+0x7c>
 3a4:	23 2b       	or	r18, r19
		if(ammoBack == 0){
 3a6:	31 f4       	brne	.+12     	; 0x3b4 <randTarget+0x6a>
 3a8:	88 e3       	ldi	r24, 0x38	; 56
			//White Light
			PORTA = 0x38;
 3aa:	82 b9       	out	0x02, r24	; 2
 3ac:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 3ae:	83 7e       	andi	r24, 0xE3	; 227
 3b0:	8b b9       	out	0x0b, r24	; 11
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <randTarget+0x74>
 3b4:	88 e0       	ldi	r24, 0x08	; 8
		}
		else{
			//Green Light
			PORTA = 0x08;
 3b6:	82 b9       	out	0x02, r24	; 2
 3b8:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 3ba:	83 7e       	andi	r24, 0xE3	; 227
 3bc:	8b b9       	out	0x0b, r24	; 11
 3be:	82 e0       	ldi	r24, 0x02	; 2
		}		
		currTarget = 0x02;
 3c0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3c4:	0c c0       	rjmp	.+24     	; 0x3de <randTarget+0x94>
 3c6:	23 2b       	or	r18, r19
	}
	else{
		if(ammoBack == 0){
 3c8:	29 f4       	brne	.+10     	; 0x3d4 <randTarget+0x8a>
 3ca:	8b b1       	in	r24, 0x0b	; 11
			//White Light
			PORTD = PORTD | 0x01C;
 3cc:	8c 61       	ori	r24, 0x1C	; 28
 3ce:	8b b9       	out	0x0b, r24	; 11
 3d0:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <randTarget+0x8e>
 3d4:	5a 9a       	sbi	0x0b, 2	; 11
		}
		else{
			//Green Light
			PORTD = PORTD | 0x04;
 3d6:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 3d8:	84 e0       	ldi	r24, 0x04	; 4
		}
		currTarget = 0x04;
 3da:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3de:	df 91       	pop	r29
	}
	return;
}
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <GameOver>:
 3e4:	cf 93       	push	r28
		break;
	}
	return commState;
}

void GameOver(){
 3e6:	df 93       	push	r29
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	c0 54       	subi	r28, 0x40	; 64
 3ee:	d1 09       	sbc	r29, r1
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
	char gameOverString[64];
	sendToGun(0x02);
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	93 d0       	rcall	.+294    	; 0x524 <sendToGun>
	sprintf(gameOverString,"Game Over,      Final Score: %d",score);
 3fe:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x1>
 402:	8f 93       	push	r24
 404:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 408:	8f 93       	push	r24
 40a:	82 e1       	ldi	r24, 0x12	; 18
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	9f 93       	push	r25
 410:	8f 93       	push	r24
 412:	8e 01       	movw	r16, r28
 414:	0f 5f       	subi	r16, 0xFF	; 255
 416:	1f 4f       	sbci	r17, 0xFF	; 255
 418:	1f 93       	push	r17
 41a:	0f 93       	push	r16
 41c:	ba d2       	rcall	.+1396   	; 0x992 <sprintf>
	LCD_DisplayString(1, gameOverString);
 41e:	b8 01       	movw	r22, r16
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	91 de       	rcall	.-734    	; 0x146 <LCD_DisplayString>
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	ff cf       	rjmp	.-2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>

00000432 <commTranslate>:
volatile unsigned char pins = 0;
unsigned int bullets = 6;
//====END OF GLOBALS=====
void commTranslate(unsigned char data){
	//LCD_DisplayString(1,data);
	if(data == 0xFF){
 432:	8f 3f       	cpi	r24, 0xFF	; 255
 434:	09 f4       	brne	.+2      	; 0x438 <commTranslate+0x6>
		GameOver();
 436:	d6 df       	rcall	.-84     	; 0x3e4 <GameOver>
	}
	else{
		bullets = data;
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bullets+0x1>
 43e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bullets>
 442:	08 95       	ret

00000444 <targetSelectSM>:
	}
	return timerState;
}

enum targetSelectStates {targetSelectSM_init, targetSelectSM_targetSelect, targetSelectSM_hitWait};
int targetSelectSM(int targetSelectState){
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	ec 01       	movw	r28, r24
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 44a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 44e:	88 23       	and	r24, r24
 450:	1c f4       	brge	.+6      	; 0x458 <targetSelectSM+0x14>
		payload = USART_Receive(0);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	53 df       	rcall	.-346    	; 0x2fc <USART_Receive>
		commTranslate(payload);
 456:	ed df       	rcall	.-38     	; 0x432 <commTranslate>
 458:	c1 30       	cpi	r28, 0x01	; 1
	}
	switch(targetSelectState){
 45a:	d1 05       	cpc	r29, r1
 45c:	61 f0       	breq	.+24     	; 0x476 <targetSelectSM+0x32>
 45e:	c2 30       	cpi	r28, 0x02	; 2
 460:	d1 05       	cpc	r29, r1
 462:	69 f0       	breq	.+26     	; 0x47e <targetSelectSM+0x3a>
 464:	20 97       	sbiw	r28, 0x00	; 0
 466:	e1 f4       	brne	.+56     	; 0x4a0 <targetSelectSM+0x5c>
 468:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <score+0x1>
		case targetSelectSM_init:
		score = 0;
 46c:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <score>
 470:	c1 e0       	ldi	r28, 0x01	; 1
		targetSelectState = targetSelectSM_targetSelect;
 472:	d0 e0       	ldi	r29, 0x00	; 0
		break;
 474:	15 c0       	rjmp	.+42     	; 0x4a0 <targetSelectSM+0x5c>

		case targetSelectSM_targetSelect:
		randTarget();
 476:	69 df       	rcall	.-302    	; 0x34a <randTarget>
 478:	c2 e0       	ldi	r28, 0x02	; 2
		targetSelectState = targetSelectSM_hitWait;
 47a:	d0 e0       	ldi	r29, 0x00	; 0
 47c:	11 c0       	rjmp	.+34     	; 0x4a0 <targetSelectSM+0x5c>
		break;
 47e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <wait>

		case targetSelectSM_hitWait:
		++wait;
 482:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <wait+0x1>
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <wait+0x1>
 48c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <wait>
 490:	0a 97       	sbiw	r24, 0x0a	; 10
		if(wait == 10){ //2 Seconds is over, time to switch targets
 492:	31 f4       	brne	.+12     	; 0x4a0 <targetSelectSM+0x5c>
 494:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <wait+0x1>
			wait = 0;
 498:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <wait>
 49c:	c1 e0       	ldi	r28, 0x01	; 1
			targetSelectState = targetSelectSM_targetSelect;
 49e:	d0 e0       	ldi	r29, 0x00	; 0
 4a0:	ce 01       	movw	r24, r28
			targetSelectState = targetSelectSM_hitWait;
		}
		break;
	}
	return targetSelectState;
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <LCDDisplaySM>:
 4a8:	1f 93       	push	r17

enum LCDDisplayStates{LCDDisplaySM_update, LCDDisplaySM_GameOver};
int LCDDisplaySM(int LCDDisplayState){
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	ec 01       	movw	r28, r24
 4b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 4b4:	88 23       	and	r24, r24
 4b6:	3c f4       	brge	.+14     	; 0x4c6 <LCDDisplaySM+0x1e>
		payload = USART_Receive(0);
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	20 df       	rcall	.-448    	; 0x2fc <USART_Receive>
 4bc:	18 2f       	mov	r17, r24
		USART_Flush(0);
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	ee de       	rcall	.-548    	; 0x29e <USART_Flush>
		commTranslate(payload);
 4c2:	81 2f       	mov	r24, r17
 4c4:	b6 df       	rcall	.-148    	; 0x432 <commTranslate>
 4c6:	cd 2b       	or	r28, r29
	}
	switch(LCDDisplayState){
 4c8:	39 f5       	brne	.+78     	; 0x518 <LCDDisplaySM+0x70>
 4ca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bullets+0x1>
		case LCDDisplaySM_update:
		sprintf(combineString,"Time: %02d        Score: %d Ammo:%d ",timeLeft,score,bullets);
 4ce:	8f 93       	push	r24
 4d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bullets>
 4d4:	8f 93       	push	r24
 4d6:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x1>
 4da:	8f 93       	push	r24
 4dc:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 4e0:	8f 93       	push	r24
 4e2:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <timeLeft+0x1>
 4e6:	8f 93       	push	r24
 4e8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timeLeft>
 4ec:	8f 93       	push	r24
 4ee:	82 e3       	ldi	r24, 0x32	; 50
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	9f 93       	push	r25
 4f4:	8f 93       	push	r24
 4f6:	89 e9       	ldi	r24, 0x99	; 153
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	9f 93       	push	r25
 4fc:	8f 93       	push	r24
 4fe:	49 d2       	rcall	.+1170   	; 0x992 <sprintf>
 500:	69 e9       	ldi	r22, 0x99	; 153
		DisplayString(1,combineString);
 502:	71 e0       	ldi	r23, 0x01	; 1
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0c df       	rcall	.-488    	; 0x320 <DisplayString>
 508:	8d b7       	in	r24, 0x3d	; 61
 50a:	9e b7       	in	r25, 0x3e	; 62
		LCDDisplayState = LCDDisplaySM_update;
		
		break;
 50c:	0a 96       	adiw	r24, 0x0a	; 10
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	9e bf       	out	0x3e, r25	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	8d bf       	out	0x3d, r24	; 61
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0

		default:
		LCDDisplayState = LCDDisplaySM_update;
	}
	return LCDDisplayState;
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	08 95       	ret

00000524 <sendToGun>:
 524:	cf 93       	push	r28
 526:	df 93       	push	r29

void sendToGun(unsigned char sendValue){
 528:	c8 2f       	mov	r28, r24
 52a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
unsigned char payload = 0x00;
if(USART_HasReceived(0)){ //Message Received
 52e:	88 23       	and	r24, r24
 530:	3c f4       	brge	.+14     	; 0x540 <sendToGun+0x1c>
	payload = USART_Receive(0);
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	e3 de       	rcall	.-570    	; 0x2fc <USART_Receive>
 536:	d8 2f       	mov	r29, r24
	USART_Flush(0);
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	b1 de       	rcall	.-670    	; 0x29e <USART_Flush>
	commTranslate(payload);
 53c:	8d 2f       	mov	r24, r29
 53e:	79 df       	rcall	.-270    	; 0x432 <commTranslate>
 540:	e0 ec       	ldi	r30, 0xC0	; 192
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	85 ff       	sbrs	r24, 5
}
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
 548:	fd cf       	rjmp	.-6      	; 0x544 <sendToGun+0x20>
	USART_Send(sendValue,0);
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	8c 2f       	mov	r24, r28
 54e:	c4 de       	rcall	.-632    	; 0x2d8 <USART_Send>
 550:	df 91       	pop	r29
}
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <hitCheck>:
 556:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <currTarget>
}
void hitCheck(unsigned char pins){
	//Used by PCINT Interrupt to check whether correct target was hit, compare Target to IR receiver
	//Returns true if correct target was hit
	//TODO: Fix if statement if not correct
	if(pins == currTarget){
 55a:	98 13       	cpse	r25, r24
 55c:	39 c0       	rjmp	.+114    	; 0x5d0 <hitCheck+0x7a>
		if(ammoBack == 0){
 55e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <ammoBack>
 562:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <ammoBack+0x1>
 566:	89 2b       	or	r24, r25
 568:	b1 f4       	brne	.+44     	; 0x596 <hitCheck+0x40>
			if((bullets + 3) > 6){
 56a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bullets>
 56e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <bullets+0x1>
 572:	03 96       	adiw	r24, 0x03	; 3
 574:	87 30       	cpi	r24, 0x07	; 7
 576:	91 05       	cpc	r25, r1
 578:	38 f0       	brcs	.+14     	; 0x588 <hitCheck+0x32>
				bullets = 6;
 57a:	86 e0       	ldi	r24, 0x06	; 6
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bullets+0x1>
 582:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bullets>
 586:	04 c0       	rjmp	.+8      	; 0x590 <hitCheck+0x3a>
			}
			else{
				bullets = bullets + 3;
 588:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bullets+0x1>
 58c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bullets>
			}
			sendToGun(0x01);
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	c7 df       	rcall	.-114    	; 0x524 <sendToGun>
		}
		if(pinUp == 1){
 596:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <pinUp>
 59a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <pinUp+0x1>
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	91 05       	cpc	r25, r1
 5a2:	29 f4       	brne	.+10     	; 0x5ae <hitCheck+0x58>
			pinUp = 0;
 5a4:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <pinUp+0x1>
 5a8:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <pinUp>
 5ac:	08 95       	ret
		}
		else if(pinUp == 0){
 5ae:	89 2b       	or	r24, r25
 5b0:	79 f4       	brne	.+30     	; 0x5d0 <hitCheck+0x7a>
			pinUp = 1;
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <pinUp+0x1>
 5ba:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <pinUp>
			score++;
 5be:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 5c2:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <score+0x1>
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <score+0x1>
 5cc:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <score>
 5d0:	08 95       	ret

000005d2 <__vector_5>:
	}
	else{
		return;
	}
}
ISR(PCINT1_vect){
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	0b b6       	in	r0, 0x3b	; 59
 5de:	0f 92       	push	r0
 5e0:	2f 93       	push	r18
 5e2:	3f 93       	push	r19
 5e4:	4f 93       	push	r20
 5e6:	5f 93       	push	r21
 5e8:	6f 93       	push	r22
 5ea:	7f 93       	push	r23
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
 5f0:	af 93       	push	r26
 5f2:	bf 93       	push	r27
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31
	pins = (PINB & 0x07);
 5f8:	83 b1       	in	r24, 0x03	; 3
 5fa:	87 70       	andi	r24, 0x07	; 7
 5fc:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <pins>
	hitCheck(pins);
 600:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <pins>
 604:	a8 df       	rcall	.-176    	; 0x556 <hitCheck>
}
 606:	ff 91       	pop	r31
 608:	ef 91       	pop	r30
 60a:	bf 91       	pop	r27
 60c:	af 91       	pop	r26
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	7f 91       	pop	r23
 614:	6f 91       	pop	r22
 616:	5f 91       	pop	r21
 618:	4f 91       	pop	r20
 61a:	3f 91       	pop	r19
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0b be       	out	0x3b, r0	; 59
 622:	0f 90       	pop	r0
 624:	0f be       	out	0x3f, r0	; 63
 626:	0f 90       	pop	r0
 628:	1f 90       	pop	r1
 62a:	18 95       	reti

0000062c <commStateSM>:
		currTarget = 0x04;
	}
	return;
}
enum commStates{commStateSM_init, commStateSM_loop};
int commStateSM(int commState){
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	ec 01       	movw	r28, r24
	unsigned char payload = 0x00;
	switch(commState){
 634:	00 97       	sbiw	r24, 0x00	; 0
 636:	19 f0       	breq	.+6      	; 0x63e <commStateSM+0x12>
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	21 f0       	breq	.+8      	; 0x644 <commStateSM+0x18>
 63c:	0e c0       	rjmp	.+28     	; 0x65a <commStateSM+0x2e>
		case commStateSM_init:
		commState = commStateSM_loop;
 63e:	c1 e0       	ldi	r28, 0x01	; 1
 640:	d0 e0       	ldi	r29, 0x00	; 0
 642:	0b c0       	rjmp	.+22     	; 0x65a <commStateSM+0x2e>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 644:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		break;
		
		case commStateSM_loop:
		if(USART_HasReceived(0)){ //Message Received
 648:	88 23       	and	r24, r24
 64a:	3c f4       	brge	.+14     	; 0x65a <commStateSM+0x2e>
			payload = USART_Receive(0);
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	56 de       	rcall	.-852    	; 0x2fc <USART_Receive>
 650:	18 2f       	mov	r17, r24
			USART_Flush(0);
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	24 de       	rcall	.-952    	; 0x29e <USART_Flush>
			commTranslate(payload);
 656:	81 2f       	mov	r24, r17
 658:	ec de       	rcall	.-552    	; 0x432 <commTranslate>
 65a:	ce 01       	movw	r24, r28
		}
		commState = commStateSM_loop;
		break;
	}
	return commState;
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	08 95       	ret

00000664 <timerSM>:
 664:	1f 93       	push	r17
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
enum timerStates{timerSM_init, timerSM_Countdown, timerSM_GameOver};
int timerSM(int timerState){
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	ec 01       	movw	r28, r24
 66c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 670:	88 23       	and	r24, r24
 672:	3c f4       	brge	.+14     	; 0x682 <timerSM+0x1e>
		payload = USART_Receive(0);
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	42 de       	rcall	.-892    	; 0x2fc <USART_Receive>
 678:	18 2f       	mov	r17, r24
		USART_Flush(0);
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	10 de       	rcall	.-992    	; 0x29e <USART_Flush>
		commTranslate(payload);
 67e:	81 2f       	mov	r24, r17
 680:	d8 de       	rcall	.-592    	; 0x432 <commTranslate>
 682:	c1 30       	cpi	r28, 0x01	; 1
		
	}
	switch(timerState){
 684:	d1 05       	cpc	r29, r1
 686:	71 f0       	breq	.+28     	; 0x6a4 <timerSM+0x40>
 688:	c2 30       	cpi	r28, 0x02	; 2
 68a:	d1 05       	cpc	r29, r1
 68c:	c1 f0       	breq	.+48     	; 0x6be <timerSM+0x5a>
 68e:	20 97       	sbiw	r28, 0x00	; 0
 690:	c1 f4       	brne	.+48     	; 0x6c2 <timerSM+0x5e>
 692:	8c e3       	ldi	r24, 0x3C	; 60
		case timerSM_init:
		timeLeft = 60;
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timeLeft+0x1>
 69a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timeLeft>
 69e:	c1 e0       	ldi	r28, 0x01	; 1
		timerState = timerSM_Countdown;
 6a0:	d0 e0       	ldi	r29, 0x00	; 0
 6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <timerSM+0x5e>
		break;
 6a4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timeLeft>

		case timerSM_Countdown:
		if(timeLeft > 0){
 6a8:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <timeLeft+0x1>
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	31 f0       	breq	.+12     	; 0x6bc <timerSM+0x58>
 6b0:	01 97       	sbiw	r24, 0x01	; 1
			timeLeft = timeLeft - 1;
 6b2:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timeLeft+0x1>
 6b6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timeLeft>
 6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <timerSM+0x5e>
			timerState = timerSM_Countdown;
		}
		else{
			timerState = timerSM_GameOver;
			GameOver();
 6bc:	93 de       	rcall	.-730    	; 0x3e4 <GameOver>
 6be:	c0 e0       	ldi	r28, 0x00	; 0
		}
		break;

		case timerSM_GameOver:
		timerState = timerSM_init;
 6c0:	d0 e0       	ldi	r29, 0x00	; 0
 6c2:	ce 01       	movw	r24, r28
		break;
	}
	return timerState;
}
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	1f 91       	pop	r17
 6ca:	08 95       	ret

000006cc <main>:
 6cc:	cf 93       	push	r28
	while(1);
}


int main(void)
{
 6ce:	df 93       	push	r29
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	28 97       	sbiw	r28, 0x08	; 8
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	f8 94       	cli
 6da:	de bf       	out	0x3e, r29	; 62
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	cd bf       	out	0x3d, r28	; 61

	(PCMSK1) |= (1<< PCINT8);
 6e0:	ec e6       	ldi	r30, 0x6C	; 108
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	81 60       	ori	r24, 0x01	; 1
 6e8:	80 83       	st	Z, r24
	(PCMSK1) |= (1<< PCINT9);
 6ea:	80 81       	ld	r24, Z
 6ec:	82 60       	ori	r24, 0x02	; 2
 6ee:	80 83       	st	Z, r24
	(PCMSK1) |= (1<< PCINT10);
 6f0:	80 81       	ld	r24, Z
 6f2:	84 60       	ori	r24, 0x04	; 4
 6f4:	80 83       	st	Z, r24
	(PCICR) |= (1<< PCIE1);
 6f6:	e8 e6       	ldi	r30, 0x68	; 104
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	80 81       	ld	r24, Z
 6fc:	82 60       	ori	r24, 0x02	; 2
 6fe:	80 83       	st	Z, r24
	sei();
 700:	78 94       	sei
	DDRD = 0xFF; PORTD = 0x00;
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	8a b9       	out	0x0a, r24	; 10
 706:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0XFF; PORTC = 0x00;
 708:	87 b9       	out	0x07, r24	; 7
 70a:	18 b8       	out	0x08, r1	; 8
	DDRB = 0x00; PORTB = 0xFF;
 70c:	14 b8       	out	0x04, r1	; 4
 70e:	85 b9       	out	0x05, r24	; 5
	DDRA = 0xFF; PORTA = 0x00;
 710:	81 b9       	out	0x01, r24	; 1
 712:	12 b8       	out	0x02, r1	; 2
	LCD_init();
 714:	00 dd       	rcall	.-1536   	; 0x116 <LCD_init>
	initUSART(0);
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	a0 dd       	rcall	.-1216   	; 0x25a <initUSART>
	USART_Flush(0);
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	c0 dd       	rcall	.-1152   	; 0x29e <USART_Flush>
 71e:	88 e0       	ldi	r24, 0x08	; 8
	static task task1;
	static task task2;
	static task task3;
	static task task4;

	task *tasks[] = {&task1,&task2,&task3,&task4};
 720:	ea e0       	ldi	r30, 0x0A	; 10
 722:	f1 e0       	ldi	r31, 0x01	; 1
 724:	de 01       	movw	r26, r28
 726:	11 96       	adiw	r26, 0x01	; 1
 728:	01 90       	ld	r0, Z+
 72a:	0d 92       	st	X+, r0
 72c:	8a 95       	dec	r24
 72e:	e1 f7       	brne	.-8      	; 0x728 <main+0x5c>
 730:	e9 e7       	ldi	r30, 0x79	; 121
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	task1.state = timerSM_init;
 732:	f1 e0       	ldi	r31, 0x01	; 1
 734:	10 82       	st	Z, r1
 736:	88 ee       	ldi	r24, 0xE8	; 232
	task1.period = 1000;
 738:	93 e0       	ldi	r25, 0x03	; 3
 73a:	a0 e0       	ldi	r26, 0x00	; 0
 73c:	b0 e0       	ldi	r27, 0x00	; 0
 73e:	81 83       	std	Z+1, r24	; 0x01
 740:	92 83       	std	Z+2, r25	; 0x02
 742:	a3 83       	std	Z+3, r26	; 0x03
 744:	b4 83       	std	Z+4, r27	; 0x04
 746:	85 83       	std	Z+5, r24	; 0x05
	task1.elapsedTime = task1.period;
 748:	96 83       	std	Z+6, r25	; 0x06
 74a:	a7 83       	std	Z+7, r26	; 0x07
 74c:	b0 87       	std	Z+8, r27	; 0x08
 74e:	82 e3       	ldi	r24, 0x32	; 50
	task1.TickFct = &timerSM;
 750:	93 e0       	ldi	r25, 0x03	; 3
 752:	92 87       	std	Z+10, r25	; 0x0a
 754:	81 87       	std	Z+9, r24	; 0x09
 756:	ee e6       	ldi	r30, 0x6E	; 110

	task2.state = targetSelectSM_init;
 758:	f1 e0       	ldi	r31, 0x01	; 1
 75a:	10 82       	st	Z, r1
 75c:	88 ec       	ldi	r24, 0xC8	; 200
	task2.period = 200;
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	a0 e0       	ldi	r26, 0x00	; 0
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	81 83       	std	Z+1, r24	; 0x01
 766:	92 83       	std	Z+2, r25	; 0x02
 768:	a3 83       	std	Z+3, r26	; 0x03
 76a:	b4 83       	std	Z+4, r27	; 0x04
 76c:	85 83       	std	Z+5, r24	; 0x05
	task2.elapsedTime = task2.period;
 76e:	96 83       	std	Z+6, r25	; 0x06
 770:	a7 83       	std	Z+7, r26	; 0x07
 772:	b0 87       	std	Z+8, r27	; 0x08
 774:	22 e2       	ldi	r18, 0x22	; 34
	task2.TickFct = &targetSelectSM;
 776:	32 e0       	ldi	r19, 0x02	; 2
 778:	32 87       	std	Z+10, r19	; 0x0a
 77a:	21 87       	std	Z+9, r18	; 0x09
 77c:	e3 e6       	ldi	r30, 0x63	; 99

	task3.state = LCDDisplaySM_update;
 77e:	f1 e0       	ldi	r31, 0x01	; 1
 780:	10 82       	st	Z, r1
 782:	81 83       	std	Z+1, r24	; 0x01
	task3.period = 200;
 784:	92 83       	std	Z+2, r25	; 0x02
 786:	a3 83       	std	Z+3, r26	; 0x03
 788:	b4 83       	std	Z+4, r27	; 0x04
 78a:	85 83       	std	Z+5, r24	; 0x05
	task3.elapsedTime = task3.period;
 78c:	96 83       	std	Z+6, r25	; 0x06
 78e:	a7 83       	std	Z+7, r26	; 0x07
 790:	b0 87       	std	Z+8, r27	; 0x08
 792:	84 e5       	ldi	r24, 0x54	; 84
	task3.TickFct = &LCDDisplaySM;
 794:	92 e0       	ldi	r25, 0x02	; 2
 796:	92 87       	std	Z+10, r25	; 0x0a
 798:	81 87       	std	Z+9, r24	; 0x09
 79a:	e8 e5       	ldi	r30, 0x58	; 88

	task4.state = commStateSM_init;
 79c:	f1 e0       	ldi	r31, 0x01	; 1
 79e:	10 82       	st	Z, r1
 7a0:	82 e3       	ldi	r24, 0x32	; 50
	task4.period = 50;
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	a0 e0       	ldi	r26, 0x00	; 0
 7a6:	b0 e0       	ldi	r27, 0x00	; 0
 7a8:	81 83       	std	Z+1, r24	; 0x01
 7aa:	92 83       	std	Z+2, r25	; 0x02
 7ac:	a3 83       	std	Z+3, r26	; 0x03
 7ae:	b4 83       	std	Z+4, r27	; 0x04
 7b0:	85 83       	std	Z+5, r24	; 0x05
	task4.elapsedTime = task4.period;
 7b2:	96 83       	std	Z+6, r25	; 0x06
 7b4:	a7 83       	std	Z+7, r26	; 0x07
 7b6:	b0 87       	std	Z+8, r27	; 0x08
 7b8:	86 e1       	ldi	r24, 0x16	; 22
	task4.TickFct = &commStateSM;
 7ba:	93 e0       	ldi	r25, 0x03	; 3
 7bc:	92 87       	std	Z+10, r25	; 0x0a
 7be:	81 87       	std	Z+9, r24	; 0x09
 7c0:	62 e3       	ldi	r22, 0x32	; 50
	
	TimerSet(50);
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	d7 dc       	rcall	.-1618   	; 0x178 <TimerSet>
	TimerOn();
 7ca:	e7 dc       	rcall	.-1586   	; 0x19a <TimerOn>
 7cc:	83 e0       	ldi	r24, 0x03	; 3
	unsigned int i;
	//====End of Task Scheduler Setup====
	//Send start game signal to gun
	sendToGun(0x03);
 7ce:	aa de       	rcall	.-684    	; 0x524 <sendToGun>
 7d0:	7e 01       	movw	r14, r28
 7d2:	89 e0       	ldi	r24, 0x09	; 9
 7d4:	e8 0e       	add	r14, r24
 7d6:	f1 1c       	adc	r15, r1
 7d8:	de 01       	movw	r26, r28
 7da:	11 96       	adiw	r26, 0x01	; 1
 7dc:	6d 01       	movw	r12, r26
 7de:	f6 01       	movw	r30, r12
 7e0:	01 91       	ld	r16, Z+
			LCD_DisplayString(1,USART_Receive(0));
			USART_Flush(0);
		}
		*/
		for( i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period){
 7e2:	11 91       	ld	r17, Z+
 7e4:	6f 01       	movw	r12, r30
 7e6:	d8 01       	movw	r26, r16
 7e8:	15 96       	adiw	r26, 0x05	; 5
 7ea:	4d 91       	ld	r20, X+
 7ec:	5d 91       	ld	r21, X+
 7ee:	6d 91       	ld	r22, X+
 7f0:	7c 91       	ld	r23, X
 7f2:	18 97       	sbiw	r26, 0x08	; 8
 7f4:	11 96       	adiw	r26, 0x01	; 1
 7f6:	8d 91       	ld	r24, X+
 7f8:	9d 91       	ld	r25, X+
 7fa:	0d 90       	ld	r0, X+
 7fc:	bc 91       	ld	r27, X
 7fe:	a0 2d       	mov	r26, r0
 800:	48 17       	cp	r20, r24
 802:	59 07       	cpc	r21, r25
 804:	6a 07       	cpc	r22, r26
 806:	7b 07       	cpc	r23, r27
 808:	81 f4       	brne	.+32     	; 0x82a <main+0x15e>
 80a:	f8 01       	movw	r30, r16
 80c:	80 81       	ld	r24, Z
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 80e:	01 84       	ldd	r0, Z+9	; 0x09
 810:	f2 85       	ldd	r31, Z+10	; 0x0a
 812:	e0 2d       	mov	r30, r0
 814:	08 2e       	mov	r0, r24
 816:	00 0c       	add	r0, r0
 818:	99 0b       	sbc	r25, r25
 81a:	09 95       	icall
 81c:	d8 01       	movw	r26, r16
 81e:	8c 93       	st	X, r24
 820:	f8 01       	movw	r30, r16
 822:	15 82       	std	Z+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 824:	16 82       	std	Z+6, r1	; 0x06
 826:	17 82       	std	Z+7, r1	; 0x07
 828:	10 86       	std	Z+8, r1	; 0x08
 82a:	f8 01       	movw	r30, r16
 82c:	85 81       	ldd	r24, Z+5	; 0x05
			}
			tasks[i] ->elapsedTime += 50;
 82e:	96 81       	ldd	r25, Z+6	; 0x06
 830:	a7 81       	ldd	r26, Z+7	; 0x07
 832:	b0 85       	ldd	r27, Z+8	; 0x08
 834:	c2 96       	adiw	r24, 0x32	; 50
 836:	a1 1d       	adc	r26, r1
 838:	b1 1d       	adc	r27, r1
 83a:	85 83       	std	Z+5, r24	; 0x05
 83c:	96 83       	std	Z+6, r25	; 0x06
 83e:	a7 83       	std	Z+7, r26	; 0x07
 840:	b0 87       	std	Z+8, r27	; 0x08
 842:	ce 14       	cp	r12, r14
 844:	df 04       	cpc	r13, r15
		while(USART_HasReceived(0)){
			LCD_DisplayString(1,USART_Receive(0));
			USART_Flush(0);
		}
		*/
		for( i = 0; i < numTasks; i++){
 846:	59 f6       	brne	.-106    	; 0x7de <main+0x112>
 848:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <TimerFlag>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i] ->elapsedTime += 50;
		}
		while(!TimerFlag);
 84c:	88 23       	and	r24, r24
 84e:	e1 f3       	breq	.-8      	; 0x848 <main+0x17c>
 850:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <TimerFlag>
		TimerFlag = 0;
 854:	c1 cf       	rjmp	.-126    	; 0x7d8 <main+0x10c>

00000856 <__divmodhi4>:
 856:	97 fb       	bst	r25, 7
    }
 858:	07 2e       	mov	r0, r23
 85a:	16 f4       	brtc	.+4      	; 0x860 <__divmodhi4+0xa>
 85c:	00 94       	com	r0
 85e:	06 d0       	rcall	.+12     	; 0x86c <__divmodhi4_neg1>
 860:	77 fd       	sbrc	r23, 7
 862:	08 d0       	rcall	.+16     	; 0x874 <__divmodhi4_neg2>
 864:	2d d0       	rcall	.+90     	; 0x8c0 <__udivmodhi4>
 866:	07 fc       	sbrc	r0, 7
 868:	05 d0       	rcall	.+10     	; 0x874 <__divmodhi4_neg2>
 86a:	3e f4       	brtc	.+14     	; 0x87a <__divmodhi4_exit>

0000086c <__divmodhi4_neg1>:
 86c:	90 95       	com	r25
 86e:	81 95       	neg	r24
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <__divmodhi4_neg2>:
 874:	70 95       	com	r23
 876:	61 95       	neg	r22
 878:	7f 4f       	sbci	r23, 0xFF	; 255

0000087a <__divmodhi4_exit>:
 87a:	08 95       	ret

0000087c <__udivmodsi4>:
 87c:	a1 e2       	ldi	r26, 0x21	; 33
 87e:	1a 2e       	mov	r1, r26
 880:	aa 1b       	sub	r26, r26
 882:	bb 1b       	sub	r27, r27
 884:	fd 01       	movw	r30, r26
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <__udivmodsi4_ep>

00000888 <__udivmodsi4_loop>:
 888:	aa 1f       	adc	r26, r26
 88a:	bb 1f       	adc	r27, r27
 88c:	ee 1f       	adc	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	a2 17       	cp	r26, r18
 892:	b3 07       	cpc	r27, r19
 894:	e4 07       	cpc	r30, r20
 896:	f5 07       	cpc	r31, r21
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__udivmodsi4_ep>
 89a:	a2 1b       	sub	r26, r18
 89c:	b3 0b       	sbc	r27, r19
 89e:	e4 0b       	sbc	r30, r20
 8a0:	f5 0b       	sbc	r31, r21

000008a2 <__udivmodsi4_ep>:
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	1a 94       	dec	r1
 8ac:	69 f7       	brne	.-38     	; 0x888 <__udivmodsi4_loop>
 8ae:	60 95       	com	r22
 8b0:	70 95       	com	r23
 8b2:	80 95       	com	r24
 8b4:	90 95       	com	r25
 8b6:	9b 01       	movw	r18, r22
 8b8:	ac 01       	movw	r20, r24
 8ba:	bd 01       	movw	r22, r26
 8bc:	cf 01       	movw	r24, r30
 8be:	08 95       	ret

000008c0 <__udivmodhi4>:
 8c0:	aa 1b       	sub	r26, r26
 8c2:	bb 1b       	sub	r27, r27
 8c4:	51 e1       	ldi	r21, 0x11	; 17
 8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <__udivmodhi4_ep>

000008c8 <__udivmodhi4_loop>:
 8c8:	aa 1f       	adc	r26, r26
 8ca:	bb 1f       	adc	r27, r27
 8cc:	a6 17       	cp	r26, r22
 8ce:	b7 07       	cpc	r27, r23
 8d0:	10 f0       	brcs	.+4      	; 0x8d6 <__udivmodhi4_ep>
 8d2:	a6 1b       	sub	r26, r22
 8d4:	b7 0b       	sbc	r27, r23

000008d6 <__udivmodhi4_ep>:
 8d6:	88 1f       	adc	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	5a 95       	dec	r21
 8dc:	a9 f7       	brne	.-22     	; 0x8c8 <__udivmodhi4_loop>
 8de:	80 95       	com	r24
 8e0:	90 95       	com	r25
 8e2:	bc 01       	movw	r22, r24
 8e4:	cd 01       	movw	r24, r26
 8e6:	08 95       	ret

000008e8 <do_rand>:
 8e8:	8f 92       	push	r8
 8ea:	9f 92       	push	r9
 8ec:	af 92       	push	r10
 8ee:	bf 92       	push	r11
 8f0:	cf 92       	push	r12
 8f2:	df 92       	push	r13
 8f4:	ef 92       	push	r14
 8f6:	ff 92       	push	r15
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
 8fc:	ec 01       	movw	r28, r24
 8fe:	68 81       	ld	r22, Y
 900:	79 81       	ldd	r23, Y+1	; 0x01
 902:	8a 81       	ldd	r24, Y+2	; 0x02
 904:	9b 81       	ldd	r25, Y+3	; 0x03
 906:	61 15       	cp	r22, r1
 908:	71 05       	cpc	r23, r1
 90a:	81 05       	cpc	r24, r1
 90c:	91 05       	cpc	r25, r1
 90e:	21 f4       	brne	.+8      	; 0x918 <do_rand+0x30>
 910:	64 e2       	ldi	r22, 0x24	; 36
 912:	79 ed       	ldi	r23, 0xD9	; 217
 914:	8b e5       	ldi	r24, 0x5B	; 91
 916:	97 e0       	ldi	r25, 0x07	; 7
 918:	2d e1       	ldi	r18, 0x1D	; 29
 91a:	33 ef       	ldi	r19, 0xF3	; 243
 91c:	41 e0       	ldi	r20, 0x01	; 1
 91e:	50 e0       	ldi	r21, 0x00	; 0
 920:	13 d3       	rcall	.+1574   	; 0xf48 <__divmodsi4>
 922:	49 01       	movw	r8, r18
 924:	5a 01       	movw	r10, r20
 926:	9b 01       	movw	r18, r22
 928:	ac 01       	movw	r20, r24
 92a:	a7 ea       	ldi	r26, 0xA7	; 167
 92c:	b1 e4       	ldi	r27, 0x41	; 65
 92e:	28 d3       	rcall	.+1616   	; 0xf80 <__muluhisi3>
 930:	6b 01       	movw	r12, r22
 932:	7c 01       	movw	r14, r24
 934:	ac ee       	ldi	r26, 0xEC	; 236
 936:	b4 ef       	ldi	r27, 0xF4	; 244
 938:	a5 01       	movw	r20, r10
 93a:	94 01       	movw	r18, r8
 93c:	2d d3       	rcall	.+1626   	; 0xf98 <__mulohisi3>
 93e:	dc 01       	movw	r26, r24
 940:	cb 01       	movw	r24, r22
 942:	8c 0d       	add	r24, r12
 944:	9d 1d       	adc	r25, r13
 946:	ae 1d       	adc	r26, r14
 948:	bf 1d       	adc	r27, r15
 94a:	b7 ff       	sbrs	r27, 7
 94c:	03 c0       	rjmp	.+6      	; 0x954 <do_rand+0x6c>
 94e:	01 97       	sbiw	r24, 0x01	; 1
 950:	a1 09       	sbc	r26, r1
 952:	b0 48       	sbci	r27, 0x80	; 128
 954:	88 83       	st	Y, r24
 956:	99 83       	std	Y+1, r25	; 0x01
 958:	aa 83       	std	Y+2, r26	; 0x02
 95a:	bb 83       	std	Y+3, r27	; 0x03
 95c:	9f 77       	andi	r25, 0x7F	; 127
 95e:	df 91       	pop	r29
 960:	cf 91       	pop	r28
 962:	ff 90       	pop	r15
 964:	ef 90       	pop	r14
 966:	df 90       	pop	r13
 968:	cf 90       	pop	r12
 96a:	bf 90       	pop	r11
 96c:	af 90       	pop	r10
 96e:	9f 90       	pop	r9
 970:	8f 90       	pop	r8
 972:	08 95       	ret

00000974 <rand_r>:
 974:	b9 cf       	rjmp	.-142    	; 0x8e8 <do_rand>

00000976 <rand>:
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	91 e0       	ldi	r25, 0x01	; 1
 97a:	b6 cf       	rjmp	.-148    	; 0x8e8 <do_rand>

0000097c <srand>:
 97c:	a0 e0       	ldi	r26, 0x00	; 0
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 984:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 988:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 98c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 990:	08 95       	ret

00000992 <sprintf>:
 992:	0f 93       	push	r16
 994:	1f 93       	push	r17
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
 99e:	2e 97       	sbiw	r28, 0x0e	; 14
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	f8 94       	cli
 9a4:	de bf       	out	0x3e, r29	; 62
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	cd bf       	out	0x3d, r28	; 61
 9aa:	0d 89       	ldd	r16, Y+21	; 0x15
 9ac:	1e 89       	ldd	r17, Y+22	; 0x16
 9ae:	86 e0       	ldi	r24, 0x06	; 6
 9b0:	8c 83       	std	Y+4, r24	; 0x04
 9b2:	1a 83       	std	Y+2, r17	; 0x02
 9b4:	09 83       	std	Y+1, r16	; 0x01
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
 9b8:	9f e7       	ldi	r25, 0x7F	; 127
 9ba:	9e 83       	std	Y+6, r25	; 0x06
 9bc:	8d 83       	std	Y+5, r24	; 0x05
 9be:	ae 01       	movw	r20, r28
 9c0:	47 5e       	subi	r20, 0xE7	; 231
 9c2:	5f 4f       	sbci	r21, 0xFF	; 255
 9c4:	6f 89       	ldd	r22, Y+23	; 0x17
 9c6:	78 8d       	ldd	r23, Y+24	; 0x18
 9c8:	ce 01       	movw	r24, r28
 9ca:	01 96       	adiw	r24, 0x01	; 1
 9cc:	10 d0       	rcall	.+32     	; 0x9ee <vfprintf>
 9ce:	ef 81       	ldd	r30, Y+7	; 0x07
 9d0:	f8 85       	ldd	r31, Y+8	; 0x08
 9d2:	e0 0f       	add	r30, r16
 9d4:	f1 1f       	adc	r31, r17
 9d6:	10 82       	st	Z, r1
 9d8:	2e 96       	adiw	r28, 0x0e	; 14
 9da:	0f b6       	in	r0, 0x3f	; 63
 9dc:	f8 94       	cli
 9de:	de bf       	out	0x3e, r29	; 62
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	cd bf       	out	0x3d, r28	; 61
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	1f 91       	pop	r17
 9ea:	0f 91       	pop	r16
 9ec:	08 95       	ret

000009ee <vfprintf>:
 9ee:	2f 92       	push	r2
 9f0:	3f 92       	push	r3
 9f2:	4f 92       	push	r4
 9f4:	5f 92       	push	r5
 9f6:	6f 92       	push	r6
 9f8:	7f 92       	push	r7
 9fa:	8f 92       	push	r8
 9fc:	9f 92       	push	r9
 9fe:	af 92       	push	r10
 a00:	bf 92       	push	r11
 a02:	cf 92       	push	r12
 a04:	df 92       	push	r13
 a06:	ef 92       	push	r14
 a08:	ff 92       	push	r15
 a0a:	0f 93       	push	r16
 a0c:	1f 93       	push	r17
 a0e:	cf 93       	push	r28
 a10:	df 93       	push	r29
 a12:	cd b7       	in	r28, 0x3d	; 61
 a14:	de b7       	in	r29, 0x3e	; 62
 a16:	2b 97       	sbiw	r28, 0x0b	; 11
 a18:	0f b6       	in	r0, 0x3f	; 63
 a1a:	f8 94       	cli
 a1c:	de bf       	out	0x3e, r29	; 62
 a1e:	0f be       	out	0x3f, r0	; 63
 a20:	cd bf       	out	0x3d, r28	; 61
 a22:	6c 01       	movw	r12, r24
 a24:	7b 01       	movw	r14, r22
 a26:	8a 01       	movw	r16, r20
 a28:	fc 01       	movw	r30, r24
 a2a:	17 82       	std	Z+7, r1	; 0x07
 a2c:	16 82       	std	Z+6, r1	; 0x06
 a2e:	83 81       	ldd	r24, Z+3	; 0x03
 a30:	81 ff       	sbrs	r24, 1
 a32:	bf c1       	rjmp	.+894    	; 0xdb2 <vfprintf+0x3c4>
 a34:	ce 01       	movw	r24, r28
 a36:	01 96       	adiw	r24, 0x01	; 1
 a38:	3c 01       	movw	r6, r24
 a3a:	f6 01       	movw	r30, r12
 a3c:	93 81       	ldd	r25, Z+3	; 0x03
 a3e:	f7 01       	movw	r30, r14
 a40:	93 fd       	sbrc	r25, 3
 a42:	85 91       	lpm	r24, Z+
 a44:	93 ff       	sbrs	r25, 3
 a46:	81 91       	ld	r24, Z+
 a48:	7f 01       	movw	r14, r30
 a4a:	88 23       	and	r24, r24
 a4c:	09 f4       	brne	.+2      	; 0xa50 <vfprintf+0x62>
 a4e:	ad c1       	rjmp	.+858    	; 0xdaa <vfprintf+0x3bc>
 a50:	85 32       	cpi	r24, 0x25	; 37
 a52:	39 f4       	brne	.+14     	; 0xa62 <vfprintf+0x74>
 a54:	93 fd       	sbrc	r25, 3
 a56:	85 91       	lpm	r24, Z+
 a58:	93 ff       	sbrs	r25, 3
 a5a:	81 91       	ld	r24, Z+
 a5c:	7f 01       	movw	r14, r30
 a5e:	85 32       	cpi	r24, 0x25	; 37
 a60:	21 f4       	brne	.+8      	; 0xa6a <vfprintf+0x7c>
 a62:	b6 01       	movw	r22, r12
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	d6 d1       	rcall	.+940    	; 0xe14 <fputc>
 a68:	e8 cf       	rjmp	.-48     	; 0xa3a <vfprintf+0x4c>
 a6a:	91 2c       	mov	r9, r1
 a6c:	21 2c       	mov	r2, r1
 a6e:	31 2c       	mov	r3, r1
 a70:	ff e1       	ldi	r31, 0x1F	; 31
 a72:	f3 15       	cp	r31, r3
 a74:	d8 f0       	brcs	.+54     	; 0xaac <vfprintf+0xbe>
 a76:	8b 32       	cpi	r24, 0x2B	; 43
 a78:	79 f0       	breq	.+30     	; 0xa98 <vfprintf+0xaa>
 a7a:	38 f4       	brcc	.+14     	; 0xa8a <vfprintf+0x9c>
 a7c:	80 32       	cpi	r24, 0x20	; 32
 a7e:	79 f0       	breq	.+30     	; 0xa9e <vfprintf+0xb0>
 a80:	83 32       	cpi	r24, 0x23	; 35
 a82:	a1 f4       	brne	.+40     	; 0xaac <vfprintf+0xbe>
 a84:	23 2d       	mov	r18, r3
 a86:	20 61       	ori	r18, 0x10	; 16
 a88:	1d c0       	rjmp	.+58     	; 0xac4 <vfprintf+0xd6>
 a8a:	8d 32       	cpi	r24, 0x2D	; 45
 a8c:	61 f0       	breq	.+24     	; 0xaa6 <vfprintf+0xb8>
 a8e:	80 33       	cpi	r24, 0x30	; 48
 a90:	69 f4       	brne	.+26     	; 0xaac <vfprintf+0xbe>
 a92:	23 2d       	mov	r18, r3
 a94:	21 60       	ori	r18, 0x01	; 1
 a96:	16 c0       	rjmp	.+44     	; 0xac4 <vfprintf+0xd6>
 a98:	83 2d       	mov	r24, r3
 a9a:	82 60       	ori	r24, 0x02	; 2
 a9c:	38 2e       	mov	r3, r24
 a9e:	e3 2d       	mov	r30, r3
 aa0:	e4 60       	ori	r30, 0x04	; 4
 aa2:	3e 2e       	mov	r3, r30
 aa4:	2a c0       	rjmp	.+84     	; 0xafa <vfprintf+0x10c>
 aa6:	f3 2d       	mov	r31, r3
 aa8:	f8 60       	ori	r31, 0x08	; 8
 aaa:	1d c0       	rjmp	.+58     	; 0xae6 <vfprintf+0xf8>
 aac:	37 fc       	sbrc	r3, 7
 aae:	2d c0       	rjmp	.+90     	; 0xb0a <vfprintf+0x11c>
 ab0:	20 ed       	ldi	r18, 0xD0	; 208
 ab2:	28 0f       	add	r18, r24
 ab4:	2a 30       	cpi	r18, 0x0A	; 10
 ab6:	40 f0       	brcs	.+16     	; 0xac8 <vfprintf+0xda>
 ab8:	8e 32       	cpi	r24, 0x2E	; 46
 aba:	b9 f4       	brne	.+46     	; 0xaea <vfprintf+0xfc>
 abc:	36 fc       	sbrc	r3, 6
 abe:	75 c1       	rjmp	.+746    	; 0xdaa <vfprintf+0x3bc>
 ac0:	23 2d       	mov	r18, r3
 ac2:	20 64       	ori	r18, 0x40	; 64
 ac4:	32 2e       	mov	r3, r18
 ac6:	19 c0       	rjmp	.+50     	; 0xafa <vfprintf+0x10c>
 ac8:	36 fe       	sbrs	r3, 6
 aca:	06 c0       	rjmp	.+12     	; 0xad8 <vfprintf+0xea>
 acc:	8a e0       	ldi	r24, 0x0A	; 10
 ace:	98 9e       	mul	r9, r24
 ad0:	20 0d       	add	r18, r0
 ad2:	11 24       	eor	r1, r1
 ad4:	92 2e       	mov	r9, r18
 ad6:	11 c0       	rjmp	.+34     	; 0xafa <vfprintf+0x10c>
 ad8:	ea e0       	ldi	r30, 0x0A	; 10
 ada:	2e 9e       	mul	r2, r30
 adc:	20 0d       	add	r18, r0
 ade:	11 24       	eor	r1, r1
 ae0:	22 2e       	mov	r2, r18
 ae2:	f3 2d       	mov	r31, r3
 ae4:	f0 62       	ori	r31, 0x20	; 32
 ae6:	3f 2e       	mov	r3, r31
 ae8:	08 c0       	rjmp	.+16     	; 0xafa <vfprintf+0x10c>
 aea:	8c 36       	cpi	r24, 0x6C	; 108
 aec:	21 f4       	brne	.+8      	; 0xaf6 <vfprintf+0x108>
 aee:	83 2d       	mov	r24, r3
 af0:	80 68       	ori	r24, 0x80	; 128
 af2:	38 2e       	mov	r3, r24
 af4:	02 c0       	rjmp	.+4      	; 0xafa <vfprintf+0x10c>
 af6:	88 36       	cpi	r24, 0x68	; 104
 af8:	41 f4       	brne	.+16     	; 0xb0a <vfprintf+0x11c>
 afa:	f7 01       	movw	r30, r14
 afc:	93 fd       	sbrc	r25, 3
 afe:	85 91       	lpm	r24, Z+
 b00:	93 ff       	sbrs	r25, 3
 b02:	81 91       	ld	r24, Z+
 b04:	7f 01       	movw	r14, r30
 b06:	81 11       	cpse	r24, r1
 b08:	b3 cf       	rjmp	.-154    	; 0xa70 <vfprintf+0x82>
 b0a:	98 2f       	mov	r25, r24
 b0c:	9f 7d       	andi	r25, 0xDF	; 223
 b0e:	95 54       	subi	r25, 0x45	; 69
 b10:	93 30       	cpi	r25, 0x03	; 3
 b12:	28 f4       	brcc	.+10     	; 0xb1e <vfprintf+0x130>
 b14:	0c 5f       	subi	r16, 0xFC	; 252
 b16:	1f 4f       	sbci	r17, 0xFF	; 255
 b18:	9f e3       	ldi	r25, 0x3F	; 63
 b1a:	99 83       	std	Y+1, r25	; 0x01
 b1c:	0d c0       	rjmp	.+26     	; 0xb38 <vfprintf+0x14a>
 b1e:	83 36       	cpi	r24, 0x63	; 99
 b20:	31 f0       	breq	.+12     	; 0xb2e <vfprintf+0x140>
 b22:	83 37       	cpi	r24, 0x73	; 115
 b24:	71 f0       	breq	.+28     	; 0xb42 <vfprintf+0x154>
 b26:	83 35       	cpi	r24, 0x53	; 83
 b28:	09 f0       	breq	.+2      	; 0xb2c <vfprintf+0x13e>
 b2a:	55 c0       	rjmp	.+170    	; 0xbd6 <vfprintf+0x1e8>
 b2c:	20 c0       	rjmp	.+64     	; 0xb6e <vfprintf+0x180>
 b2e:	f8 01       	movw	r30, r16
 b30:	80 81       	ld	r24, Z
 b32:	89 83       	std	Y+1, r24	; 0x01
 b34:	0e 5f       	subi	r16, 0xFE	; 254
 b36:	1f 4f       	sbci	r17, 0xFF	; 255
 b38:	88 24       	eor	r8, r8
 b3a:	83 94       	inc	r8
 b3c:	91 2c       	mov	r9, r1
 b3e:	53 01       	movw	r10, r6
 b40:	12 c0       	rjmp	.+36     	; 0xb66 <vfprintf+0x178>
 b42:	28 01       	movw	r4, r16
 b44:	f2 e0       	ldi	r31, 0x02	; 2
 b46:	4f 0e       	add	r4, r31
 b48:	51 1c       	adc	r5, r1
 b4a:	f8 01       	movw	r30, r16
 b4c:	a0 80       	ld	r10, Z
 b4e:	b1 80       	ldd	r11, Z+1	; 0x01
 b50:	36 fe       	sbrs	r3, 6
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <vfprintf+0x16c>
 b54:	69 2d       	mov	r22, r9
 b56:	70 e0       	ldi	r23, 0x00	; 0
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <vfprintf+0x170>
 b5a:	6f ef       	ldi	r22, 0xFF	; 255
 b5c:	7f ef       	ldi	r23, 0xFF	; 255
 b5e:	c5 01       	movw	r24, r10
 b60:	4e d1       	rcall	.+668    	; 0xdfe <strnlen>
 b62:	4c 01       	movw	r8, r24
 b64:	82 01       	movw	r16, r4
 b66:	f3 2d       	mov	r31, r3
 b68:	ff 77       	andi	r31, 0x7F	; 127
 b6a:	3f 2e       	mov	r3, r31
 b6c:	15 c0       	rjmp	.+42     	; 0xb98 <vfprintf+0x1aa>
 b6e:	28 01       	movw	r4, r16
 b70:	22 e0       	ldi	r18, 0x02	; 2
 b72:	42 0e       	add	r4, r18
 b74:	51 1c       	adc	r5, r1
 b76:	f8 01       	movw	r30, r16
 b78:	a0 80       	ld	r10, Z
 b7a:	b1 80       	ldd	r11, Z+1	; 0x01
 b7c:	36 fe       	sbrs	r3, 6
 b7e:	03 c0       	rjmp	.+6      	; 0xb86 <vfprintf+0x198>
 b80:	69 2d       	mov	r22, r9
 b82:	70 e0       	ldi	r23, 0x00	; 0
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <vfprintf+0x19c>
 b86:	6f ef       	ldi	r22, 0xFF	; 255
 b88:	7f ef       	ldi	r23, 0xFF	; 255
 b8a:	c5 01       	movw	r24, r10
 b8c:	2d d1       	rcall	.+602    	; 0xde8 <strnlen_P>
 b8e:	4c 01       	movw	r8, r24
 b90:	f3 2d       	mov	r31, r3
 b92:	f0 68       	ori	r31, 0x80	; 128
 b94:	3f 2e       	mov	r3, r31
 b96:	82 01       	movw	r16, r4
 b98:	33 fc       	sbrc	r3, 3
 b9a:	19 c0       	rjmp	.+50     	; 0xbce <vfprintf+0x1e0>
 b9c:	82 2d       	mov	r24, r2
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	88 16       	cp	r8, r24
 ba2:	99 06       	cpc	r9, r25
 ba4:	a0 f4       	brcc	.+40     	; 0xbce <vfprintf+0x1e0>
 ba6:	b6 01       	movw	r22, r12
 ba8:	80 e2       	ldi	r24, 0x20	; 32
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	33 d1       	rcall	.+614    	; 0xe14 <fputc>
 bae:	2a 94       	dec	r2
 bb0:	f5 cf       	rjmp	.-22     	; 0xb9c <vfprintf+0x1ae>
 bb2:	f5 01       	movw	r30, r10
 bb4:	37 fc       	sbrc	r3, 7
 bb6:	85 91       	lpm	r24, Z+
 bb8:	37 fe       	sbrs	r3, 7
 bba:	81 91       	ld	r24, Z+
 bbc:	5f 01       	movw	r10, r30
 bbe:	b6 01       	movw	r22, r12
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	28 d1       	rcall	.+592    	; 0xe14 <fputc>
 bc4:	21 10       	cpse	r2, r1
 bc6:	2a 94       	dec	r2
 bc8:	21 e0       	ldi	r18, 0x01	; 1
 bca:	82 1a       	sub	r8, r18
 bcc:	91 08       	sbc	r9, r1
 bce:	81 14       	cp	r8, r1
 bd0:	91 04       	cpc	r9, r1
 bd2:	79 f7       	brne	.-34     	; 0xbb2 <vfprintf+0x1c4>
 bd4:	e1 c0       	rjmp	.+450    	; 0xd98 <vfprintf+0x3aa>
 bd6:	84 36       	cpi	r24, 0x64	; 100
 bd8:	11 f0       	breq	.+4      	; 0xbde <vfprintf+0x1f0>
 bda:	89 36       	cpi	r24, 0x69	; 105
 bdc:	39 f5       	brne	.+78     	; 0xc2c <vfprintf+0x23e>
 bde:	f8 01       	movw	r30, r16
 be0:	37 fe       	sbrs	r3, 7
 be2:	07 c0       	rjmp	.+14     	; 0xbf2 <vfprintf+0x204>
 be4:	60 81       	ld	r22, Z
 be6:	71 81       	ldd	r23, Z+1	; 0x01
 be8:	82 81       	ldd	r24, Z+2	; 0x02
 bea:	93 81       	ldd	r25, Z+3	; 0x03
 bec:	0c 5f       	subi	r16, 0xFC	; 252
 bee:	1f 4f       	sbci	r17, 0xFF	; 255
 bf0:	08 c0       	rjmp	.+16     	; 0xc02 <vfprintf+0x214>
 bf2:	60 81       	ld	r22, Z
 bf4:	71 81       	ldd	r23, Z+1	; 0x01
 bf6:	07 2e       	mov	r0, r23
 bf8:	00 0c       	add	r0, r0
 bfa:	88 0b       	sbc	r24, r24
 bfc:	99 0b       	sbc	r25, r25
 bfe:	0e 5f       	subi	r16, 0xFE	; 254
 c00:	1f 4f       	sbci	r17, 0xFF	; 255
 c02:	f3 2d       	mov	r31, r3
 c04:	ff 76       	andi	r31, 0x6F	; 111
 c06:	3f 2e       	mov	r3, r31
 c08:	97 ff       	sbrs	r25, 7
 c0a:	09 c0       	rjmp	.+18     	; 0xc1e <vfprintf+0x230>
 c0c:	90 95       	com	r25
 c0e:	80 95       	com	r24
 c10:	70 95       	com	r23
 c12:	61 95       	neg	r22
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	f0 68       	ori	r31, 0x80	; 128
 c1c:	3f 2e       	mov	r3, r31
 c1e:	2a e0       	ldi	r18, 0x0A	; 10
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	a3 01       	movw	r20, r6
 c24:	33 d1       	rcall	.+614    	; 0xe8c <__ultoa_invert>
 c26:	88 2e       	mov	r8, r24
 c28:	86 18       	sub	r8, r6
 c2a:	44 c0       	rjmp	.+136    	; 0xcb4 <vfprintf+0x2c6>
 c2c:	85 37       	cpi	r24, 0x75	; 117
 c2e:	31 f4       	brne	.+12     	; 0xc3c <vfprintf+0x24e>
 c30:	23 2d       	mov	r18, r3
 c32:	2f 7e       	andi	r18, 0xEF	; 239
 c34:	b2 2e       	mov	r11, r18
 c36:	2a e0       	ldi	r18, 0x0A	; 10
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	25 c0       	rjmp	.+74     	; 0xc86 <vfprintf+0x298>
 c3c:	93 2d       	mov	r25, r3
 c3e:	99 7f       	andi	r25, 0xF9	; 249
 c40:	b9 2e       	mov	r11, r25
 c42:	8f 36       	cpi	r24, 0x6F	; 111
 c44:	c1 f0       	breq	.+48     	; 0xc76 <vfprintf+0x288>
 c46:	18 f4       	brcc	.+6      	; 0xc4e <vfprintf+0x260>
 c48:	88 35       	cpi	r24, 0x58	; 88
 c4a:	79 f0       	breq	.+30     	; 0xc6a <vfprintf+0x27c>
 c4c:	ae c0       	rjmp	.+348    	; 0xdaa <vfprintf+0x3bc>
 c4e:	80 37       	cpi	r24, 0x70	; 112
 c50:	19 f0       	breq	.+6      	; 0xc58 <vfprintf+0x26a>
 c52:	88 37       	cpi	r24, 0x78	; 120
 c54:	21 f0       	breq	.+8      	; 0xc5e <vfprintf+0x270>
 c56:	a9 c0       	rjmp	.+338    	; 0xdaa <vfprintf+0x3bc>
 c58:	e9 2f       	mov	r30, r25
 c5a:	e0 61       	ori	r30, 0x10	; 16
 c5c:	be 2e       	mov	r11, r30
 c5e:	b4 fe       	sbrs	r11, 4
 c60:	0d c0       	rjmp	.+26     	; 0xc7c <vfprintf+0x28e>
 c62:	fb 2d       	mov	r31, r11
 c64:	f4 60       	ori	r31, 0x04	; 4
 c66:	bf 2e       	mov	r11, r31
 c68:	09 c0       	rjmp	.+18     	; 0xc7c <vfprintf+0x28e>
 c6a:	34 fe       	sbrs	r3, 4
 c6c:	0a c0       	rjmp	.+20     	; 0xc82 <vfprintf+0x294>
 c6e:	29 2f       	mov	r18, r25
 c70:	26 60       	ori	r18, 0x06	; 6
 c72:	b2 2e       	mov	r11, r18
 c74:	06 c0       	rjmp	.+12     	; 0xc82 <vfprintf+0x294>
 c76:	28 e0       	ldi	r18, 0x08	; 8
 c78:	30 e0       	ldi	r19, 0x00	; 0
 c7a:	05 c0       	rjmp	.+10     	; 0xc86 <vfprintf+0x298>
 c7c:	20 e1       	ldi	r18, 0x10	; 16
 c7e:	30 e0       	ldi	r19, 0x00	; 0
 c80:	02 c0       	rjmp	.+4      	; 0xc86 <vfprintf+0x298>
 c82:	20 e1       	ldi	r18, 0x10	; 16
 c84:	32 e0       	ldi	r19, 0x02	; 2
 c86:	f8 01       	movw	r30, r16
 c88:	b7 fe       	sbrs	r11, 7
 c8a:	07 c0       	rjmp	.+14     	; 0xc9a <vfprintf+0x2ac>
 c8c:	60 81       	ld	r22, Z
 c8e:	71 81       	ldd	r23, Z+1	; 0x01
 c90:	82 81       	ldd	r24, Z+2	; 0x02
 c92:	93 81       	ldd	r25, Z+3	; 0x03
 c94:	0c 5f       	subi	r16, 0xFC	; 252
 c96:	1f 4f       	sbci	r17, 0xFF	; 255
 c98:	06 c0       	rjmp	.+12     	; 0xca6 <vfprintf+0x2b8>
 c9a:	60 81       	ld	r22, Z
 c9c:	71 81       	ldd	r23, Z+1	; 0x01
 c9e:	80 e0       	ldi	r24, 0x00	; 0
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	0e 5f       	subi	r16, 0xFE	; 254
 ca4:	1f 4f       	sbci	r17, 0xFF	; 255
 ca6:	a3 01       	movw	r20, r6
 ca8:	f1 d0       	rcall	.+482    	; 0xe8c <__ultoa_invert>
 caa:	88 2e       	mov	r8, r24
 cac:	86 18       	sub	r8, r6
 cae:	fb 2d       	mov	r31, r11
 cb0:	ff 77       	andi	r31, 0x7F	; 127
 cb2:	3f 2e       	mov	r3, r31
 cb4:	36 fe       	sbrs	r3, 6
 cb6:	0d c0       	rjmp	.+26     	; 0xcd2 <vfprintf+0x2e4>
 cb8:	23 2d       	mov	r18, r3
 cba:	2e 7f       	andi	r18, 0xFE	; 254
 cbc:	a2 2e       	mov	r10, r18
 cbe:	89 14       	cp	r8, r9
 cc0:	58 f4       	brcc	.+22     	; 0xcd8 <vfprintf+0x2ea>
 cc2:	34 fe       	sbrs	r3, 4
 cc4:	0b c0       	rjmp	.+22     	; 0xcdc <vfprintf+0x2ee>
 cc6:	32 fc       	sbrc	r3, 2
 cc8:	09 c0       	rjmp	.+18     	; 0xcdc <vfprintf+0x2ee>
 cca:	83 2d       	mov	r24, r3
 ccc:	8e 7e       	andi	r24, 0xEE	; 238
 cce:	a8 2e       	mov	r10, r24
 cd0:	05 c0       	rjmp	.+10     	; 0xcdc <vfprintf+0x2ee>
 cd2:	b8 2c       	mov	r11, r8
 cd4:	a3 2c       	mov	r10, r3
 cd6:	03 c0       	rjmp	.+6      	; 0xcde <vfprintf+0x2f0>
 cd8:	b8 2c       	mov	r11, r8
 cda:	01 c0       	rjmp	.+2      	; 0xcde <vfprintf+0x2f0>
 cdc:	b9 2c       	mov	r11, r9
 cde:	a4 fe       	sbrs	r10, 4
 ce0:	0f c0       	rjmp	.+30     	; 0xd00 <vfprintf+0x312>
 ce2:	fe 01       	movw	r30, r28
 ce4:	e8 0d       	add	r30, r8
 ce6:	f1 1d       	adc	r31, r1
 ce8:	80 81       	ld	r24, Z
 cea:	80 33       	cpi	r24, 0x30	; 48
 cec:	21 f4       	brne	.+8      	; 0xcf6 <vfprintf+0x308>
 cee:	9a 2d       	mov	r25, r10
 cf0:	99 7e       	andi	r25, 0xE9	; 233
 cf2:	a9 2e       	mov	r10, r25
 cf4:	09 c0       	rjmp	.+18     	; 0xd08 <vfprintf+0x31a>
 cf6:	a2 fe       	sbrs	r10, 2
 cf8:	06 c0       	rjmp	.+12     	; 0xd06 <vfprintf+0x318>
 cfa:	b3 94       	inc	r11
 cfc:	b3 94       	inc	r11
 cfe:	04 c0       	rjmp	.+8      	; 0xd08 <vfprintf+0x31a>
 d00:	8a 2d       	mov	r24, r10
 d02:	86 78       	andi	r24, 0x86	; 134
 d04:	09 f0       	breq	.+2      	; 0xd08 <vfprintf+0x31a>
 d06:	b3 94       	inc	r11
 d08:	a3 fc       	sbrc	r10, 3
 d0a:	10 c0       	rjmp	.+32     	; 0xd2c <vfprintf+0x33e>
 d0c:	a0 fe       	sbrs	r10, 0
 d0e:	06 c0       	rjmp	.+12     	; 0xd1c <vfprintf+0x32e>
 d10:	b2 14       	cp	r11, r2
 d12:	80 f4       	brcc	.+32     	; 0xd34 <vfprintf+0x346>
 d14:	28 0c       	add	r2, r8
 d16:	92 2c       	mov	r9, r2
 d18:	9b 18       	sub	r9, r11
 d1a:	0d c0       	rjmp	.+26     	; 0xd36 <vfprintf+0x348>
 d1c:	b2 14       	cp	r11, r2
 d1e:	58 f4       	brcc	.+22     	; 0xd36 <vfprintf+0x348>
 d20:	b6 01       	movw	r22, r12
 d22:	80 e2       	ldi	r24, 0x20	; 32
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	76 d0       	rcall	.+236    	; 0xe14 <fputc>
 d28:	b3 94       	inc	r11
 d2a:	f8 cf       	rjmp	.-16     	; 0xd1c <vfprintf+0x32e>
 d2c:	b2 14       	cp	r11, r2
 d2e:	18 f4       	brcc	.+6      	; 0xd36 <vfprintf+0x348>
 d30:	2b 18       	sub	r2, r11
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <vfprintf+0x34a>
 d34:	98 2c       	mov	r9, r8
 d36:	21 2c       	mov	r2, r1
 d38:	a4 fe       	sbrs	r10, 4
 d3a:	0f c0       	rjmp	.+30     	; 0xd5a <vfprintf+0x36c>
 d3c:	b6 01       	movw	r22, r12
 d3e:	80 e3       	ldi	r24, 0x30	; 48
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	68 d0       	rcall	.+208    	; 0xe14 <fputc>
 d44:	a2 fe       	sbrs	r10, 2
 d46:	16 c0       	rjmp	.+44     	; 0xd74 <vfprintf+0x386>
 d48:	a1 fc       	sbrc	r10, 1
 d4a:	03 c0       	rjmp	.+6      	; 0xd52 <vfprintf+0x364>
 d4c:	88 e7       	ldi	r24, 0x78	; 120
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	02 c0       	rjmp	.+4      	; 0xd56 <vfprintf+0x368>
 d52:	88 e5       	ldi	r24, 0x58	; 88
 d54:	90 e0       	ldi	r25, 0x00	; 0
 d56:	b6 01       	movw	r22, r12
 d58:	0c c0       	rjmp	.+24     	; 0xd72 <vfprintf+0x384>
 d5a:	8a 2d       	mov	r24, r10
 d5c:	86 78       	andi	r24, 0x86	; 134
 d5e:	51 f0       	breq	.+20     	; 0xd74 <vfprintf+0x386>
 d60:	a1 fe       	sbrs	r10, 1
 d62:	02 c0       	rjmp	.+4      	; 0xd68 <vfprintf+0x37a>
 d64:	8b e2       	ldi	r24, 0x2B	; 43
 d66:	01 c0       	rjmp	.+2      	; 0xd6a <vfprintf+0x37c>
 d68:	80 e2       	ldi	r24, 0x20	; 32
 d6a:	a7 fc       	sbrc	r10, 7
 d6c:	8d e2       	ldi	r24, 0x2D	; 45
 d6e:	b6 01       	movw	r22, r12
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	50 d0       	rcall	.+160    	; 0xe14 <fputc>
 d74:	89 14       	cp	r8, r9
 d76:	30 f4       	brcc	.+12     	; 0xd84 <vfprintf+0x396>
 d78:	b6 01       	movw	r22, r12
 d7a:	80 e3       	ldi	r24, 0x30	; 48
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	4a d0       	rcall	.+148    	; 0xe14 <fputc>
 d80:	9a 94       	dec	r9
 d82:	f8 cf       	rjmp	.-16     	; 0xd74 <vfprintf+0x386>
 d84:	8a 94       	dec	r8
 d86:	f3 01       	movw	r30, r6
 d88:	e8 0d       	add	r30, r8
 d8a:	f1 1d       	adc	r31, r1
 d8c:	80 81       	ld	r24, Z
 d8e:	b6 01       	movw	r22, r12
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	40 d0       	rcall	.+128    	; 0xe14 <fputc>
 d94:	81 10       	cpse	r8, r1
 d96:	f6 cf       	rjmp	.-20     	; 0xd84 <vfprintf+0x396>
 d98:	22 20       	and	r2, r2
 d9a:	09 f4       	brne	.+2      	; 0xd9e <vfprintf+0x3b0>
 d9c:	4e ce       	rjmp	.-868    	; 0xa3a <vfprintf+0x4c>
 d9e:	b6 01       	movw	r22, r12
 da0:	80 e2       	ldi	r24, 0x20	; 32
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	37 d0       	rcall	.+110    	; 0xe14 <fputc>
 da6:	2a 94       	dec	r2
 da8:	f7 cf       	rjmp	.-18     	; 0xd98 <vfprintf+0x3aa>
 daa:	f6 01       	movw	r30, r12
 dac:	86 81       	ldd	r24, Z+6	; 0x06
 dae:	97 81       	ldd	r25, Z+7	; 0x07
 db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x3c8>
 db2:	8f ef       	ldi	r24, 0xFF	; 255
 db4:	9f ef       	ldi	r25, 0xFF	; 255
 db6:	2b 96       	adiw	r28, 0x0b	; 11
 db8:	0f b6       	in	r0, 0x3f	; 63
 dba:	f8 94       	cli
 dbc:	de bf       	out	0x3e, r29	; 62
 dbe:	0f be       	out	0x3f, r0	; 63
 dc0:	cd bf       	out	0x3d, r28	; 61
 dc2:	df 91       	pop	r29
 dc4:	cf 91       	pop	r28
 dc6:	1f 91       	pop	r17
 dc8:	0f 91       	pop	r16
 dca:	ff 90       	pop	r15
 dcc:	ef 90       	pop	r14
 dce:	df 90       	pop	r13
 dd0:	cf 90       	pop	r12
 dd2:	bf 90       	pop	r11
 dd4:	af 90       	pop	r10
 dd6:	9f 90       	pop	r9
 dd8:	8f 90       	pop	r8
 dda:	7f 90       	pop	r7
 ddc:	6f 90       	pop	r6
 dde:	5f 90       	pop	r5
 de0:	4f 90       	pop	r4
 de2:	3f 90       	pop	r3
 de4:	2f 90       	pop	r2
 de6:	08 95       	ret

00000de8 <strnlen_P>:
 de8:	fc 01       	movw	r30, r24
 dea:	05 90       	lpm	r0, Z+
 dec:	61 50       	subi	r22, 0x01	; 1
 dee:	70 40       	sbci	r23, 0x00	; 0
 df0:	01 10       	cpse	r0, r1
 df2:	d8 f7       	brcc	.-10     	; 0xdea <strnlen_P+0x2>
 df4:	80 95       	com	r24
 df6:	90 95       	com	r25
 df8:	8e 0f       	add	r24, r30
 dfa:	9f 1f       	adc	r25, r31
 dfc:	08 95       	ret

00000dfe <strnlen>:
 dfe:	fc 01       	movw	r30, r24
 e00:	61 50       	subi	r22, 0x01	; 1
 e02:	70 40       	sbci	r23, 0x00	; 0
 e04:	01 90       	ld	r0, Z+
 e06:	01 10       	cpse	r0, r1
 e08:	d8 f7       	brcc	.-10     	; 0xe00 <strnlen+0x2>
 e0a:	80 95       	com	r24
 e0c:	90 95       	com	r25
 e0e:	8e 0f       	add	r24, r30
 e10:	9f 1f       	adc	r25, r31
 e12:	08 95       	ret

00000e14 <fputc>:
 e14:	0f 93       	push	r16
 e16:	1f 93       	push	r17
 e18:	cf 93       	push	r28
 e1a:	df 93       	push	r29
 e1c:	fb 01       	movw	r30, r22
 e1e:	23 81       	ldd	r18, Z+3	; 0x03
 e20:	21 fd       	sbrc	r18, 1
 e22:	03 c0       	rjmp	.+6      	; 0xe2a <fputc+0x16>
 e24:	8f ef       	ldi	r24, 0xFF	; 255
 e26:	9f ef       	ldi	r25, 0xFF	; 255
 e28:	2c c0       	rjmp	.+88     	; 0xe82 <fputc+0x6e>
 e2a:	22 ff       	sbrs	r18, 2
 e2c:	16 c0       	rjmp	.+44     	; 0xe5a <fputc+0x46>
 e2e:	46 81       	ldd	r20, Z+6	; 0x06
 e30:	57 81       	ldd	r21, Z+7	; 0x07
 e32:	24 81       	ldd	r18, Z+4	; 0x04
 e34:	35 81       	ldd	r19, Z+5	; 0x05
 e36:	42 17       	cp	r20, r18
 e38:	53 07       	cpc	r21, r19
 e3a:	44 f4       	brge	.+16     	; 0xe4c <fputc+0x38>
 e3c:	a0 81       	ld	r26, Z
 e3e:	b1 81       	ldd	r27, Z+1	; 0x01
 e40:	9d 01       	movw	r18, r26
 e42:	2f 5f       	subi	r18, 0xFF	; 255
 e44:	3f 4f       	sbci	r19, 0xFF	; 255
 e46:	31 83       	std	Z+1, r19	; 0x01
 e48:	20 83       	st	Z, r18
 e4a:	8c 93       	st	X, r24
 e4c:	26 81       	ldd	r18, Z+6	; 0x06
 e4e:	37 81       	ldd	r19, Z+7	; 0x07
 e50:	2f 5f       	subi	r18, 0xFF	; 255
 e52:	3f 4f       	sbci	r19, 0xFF	; 255
 e54:	37 83       	std	Z+7, r19	; 0x07
 e56:	26 83       	std	Z+6, r18	; 0x06
 e58:	14 c0       	rjmp	.+40     	; 0xe82 <fputc+0x6e>
 e5a:	8b 01       	movw	r16, r22
 e5c:	ec 01       	movw	r28, r24
 e5e:	fb 01       	movw	r30, r22
 e60:	00 84       	ldd	r0, Z+8	; 0x08
 e62:	f1 85       	ldd	r31, Z+9	; 0x09
 e64:	e0 2d       	mov	r30, r0
 e66:	09 95       	icall
 e68:	89 2b       	or	r24, r25
 e6a:	e1 f6       	brne	.-72     	; 0xe24 <fputc+0x10>
 e6c:	d8 01       	movw	r26, r16
 e6e:	16 96       	adiw	r26, 0x06	; 6
 e70:	8d 91       	ld	r24, X+
 e72:	9c 91       	ld	r25, X
 e74:	17 97       	sbiw	r26, 0x07	; 7
 e76:	01 96       	adiw	r24, 0x01	; 1
 e78:	17 96       	adiw	r26, 0x07	; 7
 e7a:	9c 93       	st	X, r25
 e7c:	8e 93       	st	-X, r24
 e7e:	16 97       	sbiw	r26, 0x06	; 6
 e80:	ce 01       	movw	r24, r28
 e82:	df 91       	pop	r29
 e84:	cf 91       	pop	r28
 e86:	1f 91       	pop	r17
 e88:	0f 91       	pop	r16
 e8a:	08 95       	ret

00000e8c <__ultoa_invert>:
 e8c:	fa 01       	movw	r30, r20
 e8e:	aa 27       	eor	r26, r26
 e90:	28 30       	cpi	r18, 0x08	; 8
 e92:	51 f1       	breq	.+84     	; 0xee8 <__ultoa_invert+0x5c>
 e94:	20 31       	cpi	r18, 0x10	; 16
 e96:	81 f1       	breq	.+96     	; 0xef8 <__ultoa_invert+0x6c>
 e98:	e8 94       	clt
 e9a:	6f 93       	push	r22
 e9c:	6e 7f       	andi	r22, 0xFE	; 254
 e9e:	6e 5f       	subi	r22, 0xFE	; 254
 ea0:	7f 4f       	sbci	r23, 0xFF	; 255
 ea2:	8f 4f       	sbci	r24, 0xFF	; 255
 ea4:	9f 4f       	sbci	r25, 0xFF	; 255
 ea6:	af 4f       	sbci	r26, 0xFF	; 255
 ea8:	b1 e0       	ldi	r27, 0x01	; 1
 eaa:	3e d0       	rcall	.+124    	; 0xf28 <__ultoa_invert+0x9c>
 eac:	b4 e0       	ldi	r27, 0x04	; 4
 eae:	3c d0       	rcall	.+120    	; 0xf28 <__ultoa_invert+0x9c>
 eb0:	67 0f       	add	r22, r23
 eb2:	78 1f       	adc	r23, r24
 eb4:	89 1f       	adc	r24, r25
 eb6:	9a 1f       	adc	r25, r26
 eb8:	a1 1d       	adc	r26, r1
 eba:	68 0f       	add	r22, r24
 ebc:	79 1f       	adc	r23, r25
 ebe:	8a 1f       	adc	r24, r26
 ec0:	91 1d       	adc	r25, r1
 ec2:	a1 1d       	adc	r26, r1
 ec4:	6a 0f       	add	r22, r26
 ec6:	71 1d       	adc	r23, r1
 ec8:	81 1d       	adc	r24, r1
 eca:	91 1d       	adc	r25, r1
 ecc:	a1 1d       	adc	r26, r1
 ece:	20 d0       	rcall	.+64     	; 0xf10 <__ultoa_invert+0x84>
 ed0:	09 f4       	brne	.+2      	; 0xed4 <__ultoa_invert+0x48>
 ed2:	68 94       	set
 ed4:	3f 91       	pop	r19
 ed6:	2a e0       	ldi	r18, 0x0A	; 10
 ed8:	26 9f       	mul	r18, r22
 eda:	11 24       	eor	r1, r1
 edc:	30 19       	sub	r19, r0
 ede:	30 5d       	subi	r19, 0xD0	; 208
 ee0:	31 93       	st	Z+, r19
 ee2:	de f6       	brtc	.-74     	; 0xe9a <__ultoa_invert+0xe>
 ee4:	cf 01       	movw	r24, r30
 ee6:	08 95       	ret
 ee8:	46 2f       	mov	r20, r22
 eea:	47 70       	andi	r20, 0x07	; 7
 eec:	40 5d       	subi	r20, 0xD0	; 208
 eee:	41 93       	st	Z+, r20
 ef0:	b3 e0       	ldi	r27, 0x03	; 3
 ef2:	0f d0       	rcall	.+30     	; 0xf12 <__ultoa_invert+0x86>
 ef4:	c9 f7       	brne	.-14     	; 0xee8 <__ultoa_invert+0x5c>
 ef6:	f6 cf       	rjmp	.-20     	; 0xee4 <__ultoa_invert+0x58>
 ef8:	46 2f       	mov	r20, r22
 efa:	4f 70       	andi	r20, 0x0F	; 15
 efc:	40 5d       	subi	r20, 0xD0	; 208
 efe:	4a 33       	cpi	r20, 0x3A	; 58
 f00:	18 f0       	brcs	.+6      	; 0xf08 <__ultoa_invert+0x7c>
 f02:	49 5d       	subi	r20, 0xD9	; 217
 f04:	31 fd       	sbrc	r19, 1
 f06:	40 52       	subi	r20, 0x20	; 32
 f08:	41 93       	st	Z+, r20
 f0a:	02 d0       	rcall	.+4      	; 0xf10 <__ultoa_invert+0x84>
 f0c:	a9 f7       	brne	.-22     	; 0xef8 <__ultoa_invert+0x6c>
 f0e:	ea cf       	rjmp	.-44     	; 0xee4 <__ultoa_invert+0x58>
 f10:	b4 e0       	ldi	r27, 0x04	; 4
 f12:	a6 95       	lsr	r26
 f14:	97 95       	ror	r25
 f16:	87 95       	ror	r24
 f18:	77 95       	ror	r23
 f1a:	67 95       	ror	r22
 f1c:	ba 95       	dec	r27
 f1e:	c9 f7       	brne	.-14     	; 0xf12 <__ultoa_invert+0x86>
 f20:	00 97       	sbiw	r24, 0x00	; 0
 f22:	61 05       	cpc	r22, r1
 f24:	71 05       	cpc	r23, r1
 f26:	08 95       	ret
 f28:	9b 01       	movw	r18, r22
 f2a:	ac 01       	movw	r20, r24
 f2c:	0a 2e       	mov	r0, r26
 f2e:	06 94       	lsr	r0
 f30:	57 95       	ror	r21
 f32:	47 95       	ror	r20
 f34:	37 95       	ror	r19
 f36:	27 95       	ror	r18
 f38:	ba 95       	dec	r27
 f3a:	c9 f7       	brne	.-14     	; 0xf2e <__ultoa_invert+0xa2>
 f3c:	62 0f       	add	r22, r18
 f3e:	73 1f       	adc	r23, r19
 f40:	84 1f       	adc	r24, r20
 f42:	95 1f       	adc	r25, r21
 f44:	a0 1d       	adc	r26, r0
 f46:	08 95       	ret

00000f48 <__divmodsi4>:
 f48:	05 2e       	mov	r0, r21
 f4a:	97 fb       	bst	r25, 7
 f4c:	16 f4       	brtc	.+4      	; 0xf52 <__divmodsi4+0xa>
 f4e:	00 94       	com	r0
 f50:	0f d0       	rcall	.+30     	; 0xf70 <__negsi2>
 f52:	57 fd       	sbrc	r21, 7
 f54:	05 d0       	rcall	.+10     	; 0xf60 <__divmodsi4_neg2>
 f56:	92 dc       	rcall	.-1756   	; 0x87c <__udivmodsi4>
 f58:	07 fc       	sbrc	r0, 7
 f5a:	02 d0       	rcall	.+4      	; 0xf60 <__divmodsi4_neg2>
 f5c:	46 f4       	brtc	.+16     	; 0xf6e <__divmodsi4_exit>
 f5e:	08 c0       	rjmp	.+16     	; 0xf70 <__negsi2>

00000f60 <__divmodsi4_neg2>:
 f60:	50 95       	com	r21
 f62:	40 95       	com	r20
 f64:	30 95       	com	r19
 f66:	21 95       	neg	r18
 f68:	3f 4f       	sbci	r19, 0xFF	; 255
 f6a:	4f 4f       	sbci	r20, 0xFF	; 255
 f6c:	5f 4f       	sbci	r21, 0xFF	; 255

00000f6e <__divmodsi4_exit>:
 f6e:	08 95       	ret

00000f70 <__negsi2>:
 f70:	90 95       	com	r25
 f72:	80 95       	com	r24
 f74:	70 95       	com	r23
 f76:	61 95       	neg	r22
 f78:	7f 4f       	sbci	r23, 0xFF	; 255
 f7a:	8f 4f       	sbci	r24, 0xFF	; 255
 f7c:	9f 4f       	sbci	r25, 0xFF	; 255
 f7e:	08 95       	ret

00000f80 <__muluhisi3>:
 f80:	0f d0       	rcall	.+30     	; 0xfa0 <__umulhisi3>
 f82:	a5 9f       	mul	r26, r21
 f84:	90 0d       	add	r25, r0
 f86:	b4 9f       	mul	r27, r20
 f88:	90 0d       	add	r25, r0
 f8a:	a4 9f       	mul	r26, r20
 f8c:	80 0d       	add	r24, r0
 f8e:	91 1d       	adc	r25, r1
 f90:	11 24       	eor	r1, r1
 f92:	08 95       	ret

00000f94 <__mulshisi3>:
 f94:	b7 ff       	sbrs	r27, 7
 f96:	f4 cf       	rjmp	.-24     	; 0xf80 <__muluhisi3>

00000f98 <__mulohisi3>:
 f98:	f3 df       	rcall	.-26     	; 0xf80 <__muluhisi3>
 f9a:	82 1b       	sub	r24, r18
 f9c:	93 0b       	sbc	r25, r19
 f9e:	08 95       	ret

00000fa0 <__umulhisi3>:
 fa0:	a2 9f       	mul	r26, r18
 fa2:	b0 01       	movw	r22, r0
 fa4:	b3 9f       	mul	r27, r19
 fa6:	c0 01       	movw	r24, r0
 fa8:	a3 9f       	mul	r26, r19
 faa:	70 0d       	add	r23, r0
 fac:	81 1d       	adc	r24, r1
 fae:	11 24       	eor	r1, r1
 fb0:	91 1d       	adc	r25, r1
 fb2:	b2 9f       	mul	r27, r18
 fb4:	70 0d       	add	r23, r0
 fb6:	81 1d       	adc	r24, r1
 fb8:	11 24       	eor	r1, r1
 fba:	91 1d       	adc	r25, r1
 fbc:	08 95       	ret

00000fbe <_exit>:
 fbe:	f8 94       	cli

00000fc0 <__stop_program>:
 fc0:	ff cf       	rjmp	.-2      	; 0xfc0 <__stop_program>
