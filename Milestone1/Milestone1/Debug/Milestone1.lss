
Milestone1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000fbc  00001050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800158  00800158  000010a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014da  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a78  00000000  00000000  00002736  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac7  00000000  00000000  000031ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00003c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e1  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1b  00000000  00000000  000047a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000053bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	db c2       	rjmp	.+1462   	; 0x5cc <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 35       	cpi	r26, 0x58	; 88
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e5       	ldi	r26, 0x58	; 88
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 3a       	cpi	r26, 0xA1	; 161
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	01 d3       	rcall	.+1538   	; 0x6c6 <main>
  c4:	79 c7       	rjmp	.+3826   	; 0xfb8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 17c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 180:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 184:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
 188:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <_avr_timer_cntcurr>
 18c:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <_avr_timer_cntcurr+0x1>
 190:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <_avr_timer_cntcurr+0x2>
 194:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <_avr_timer_cntcurr+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 1be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 1c2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 1c6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 1ca:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 1ce:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 1d2:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 1d6:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_avr_timer_cntcurr>
 1f8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <_avr_timer_cntcurr+0x1>
 1fc:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <_avr_timer_cntcurr+0x2>
 200:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <_avr_timer_cntcurr+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 20e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 212:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 216:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <TimerFlag>
 228:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 22c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 230:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 234:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 238:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 23c:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 240:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 244:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <initUSART>:
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	81 f0       	breq	.+32     	; 0x27e <initUSART+0x24>
 25e:	e1 ec       	ldi	r30, 0xC1	; 193
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 61       	ori	r24, 0x18	; 24
 266:	80 83       	st	Z, r24
 268:	e2 ec       	ldi	r30, 0xC2	; 194
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	80 83       	st	Z, r24
 272:	83 e3       	ldi	r24, 0x33	; 51
 274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 27c:	08 95       	ret
 27e:	e9 ec       	ldi	r30, 0xC9	; 201
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 61       	ori	r24, 0x18	; 24
 286:	80 83       	st	Z, r24
 288:	ea ec       	ldi	r30, 0xCA	; 202
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	80 83       	st	Z, r24
 292:	83 e3       	ldi	r24, 0x33	; 51
 294:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 298:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 29c:	08 95       	ret

0000029e <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	29 f4       	brne	.+10     	; 0x2ac <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2a2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 2a6:	88 23       	and	r24, r24
 2a8:	74 f0       	brlt	.+28     	; 0x2c6 <USART_Flush+0x28>
 2aa:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 2ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2b0:	88 23       	and	r24, r24
 2b2:	8c f4       	brge	.+34     	; 0x2d6 <USART_Flush+0x38>
 2b4:	a6 ec       	ldi	r26, 0xC6	; 198
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	8c 91       	ld	r24, X
 2be:	80 81       	ld	r24, Z
 2c0:	88 23       	and	r24, r24
 2c2:	e4 f3       	brlt	.-8      	; 0x2bc <USART_Flush+0x1e>
 2c4:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2c6:	ae ec       	ldi	r26, 0xCE	; 206
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e8 ec       	ldi	r30, 0xC8	; 200
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	8c 91       	ld	r24, X
 2d0:	80 81       	ld	r24, Z
 2d2:	88 23       	and	r24, r24
 2d4:	e4 f3       	brlt	.-8      	; 0x2ce <USART_Flush+0x30>
 2d6:	08 95       	ret

000002d8 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	41 f0       	breq	.+16     	; 0x2ec <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	90 81       	ld	r25, Z
 2e2:	95 ff       	sbrs	r25, 5
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <USART_Send+0x8>
		UDR0 = sendMe;
 2e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2ea:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 2ec:	e8 ec       	ldi	r30, 0xC8	; 200
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	90 81       	ld	r25, Z
 2f2:	95 ff       	sbrs	r25, 5
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <USART_Send+0x18>
		UDR1 = sendMe;
 2f6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2fa:	08 95       	ret

000002fc <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	41 f0       	breq	.+16     	; 0x310 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 300:	e0 ec       	ldi	r30, 0xC0	; 192
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	88 23       	and	r24, r24
 308:	ec f7       	brge	.-6      	; 0x304 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 30a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 30e:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 310:	e8 ec       	ldi	r30, 0xC8	; 200
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	88 23       	and	r24, r24
 318:	ec f7       	brge	.-6      	; 0x314 <USART_Receive+0x18>
		return UDR1;
 31a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 31e:	08 95       	ret

00000320 <DisplayString>:
	pins = (PINB & 0x07);
	hitCheck(pins);
}


void DisplayString( unsigned char column, const unsigned char* string) {
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
 326:	fb 01       	movw	r30, r22
 328:	90 81       	ld	r25, Z
 32a:	99 23       	and	r25, r25
 32c:	51 f0       	breq	.+20     	; 0x342 <DisplayString+0x22>
 32e:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 330:	11 e0       	ldi	r17, 0x01	; 1
 332:	18 0f       	add	r17, r24
 334:	e8 de       	rcall	.-560    	; 0x106 <LCD_Cursor>
		LCD_WriteData(*string++);
 336:	89 91       	ld	r24, Y+
 338:	fd de       	rcall	.-518    	; 0x134 <LCD_WriteData>


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 33a:	81 2f       	mov	r24, r17
}


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
 33c:	98 81       	ld	r25, Y
 33e:	91 11       	cpse	r25, r1
 340:	f7 cf       	rjmp	.-18     	; 0x330 <DisplayString+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	08 95       	ret

0000034a <randTarget>:
}
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
	USART_Send(sendValue,0);
}

void randTarget(){
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
	//TODO FINISH LED COLORS AND OUTPUT
	randomNumber = rand()%3;
 34e:	10 d3       	rcall	.+1568   	; 0x970 <rand>
 350:	c3 e0       	ldi	r28, 0x03	; 3
 352:	d0 e0       	ldi	r29, 0x00	; 0
 354:	be 01       	movw	r22, r28
 356:	7c d2       	rcall	.+1272   	; 0x850 <__divmodhi4>
 358:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <randomNumber+0x1>
 35c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <randomNumber>
	ammoBack = rand()% 3;
 360:	07 d3       	rcall	.+1550   	; 0x970 <rand>
 362:	be 01       	movw	r22, r28
 364:	75 d2       	rcall	.+1258   	; 0x850 <__divmodhi4>
 366:	28 2f       	mov	r18, r24
 368:	39 2f       	mov	r19, r25
 36a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <ammoBack>
 36e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <ammoBack+0x1>
 372:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <randomNumber>
	if(randomNumber == 0){
 376:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <randomNumber+0x1>
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	89 f4       	brne	.+34     	; 0x3a0 <randTarget+0x56>
 37e:	23 2b       	or	r18, r19
		if(ammoBack == 0){
 380:	31 f4       	brne	.+12     	; 0x38e <randTarget+0x44>
 382:	87 e0       	ldi	r24, 0x07	; 7
			PORTA = 0X07;
 384:	82 b9       	out	0x02, r24	; 2
 386:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 388:	83 7e       	andi	r24, 0xE3	; 227
 38a:	8b b9       	out	0x0b, r24	; 11
 38c:	05 c0       	rjmp	.+10     	; 0x398 <randTarget+0x4e>
 38e:	81 e0       	ldi	r24, 0x01	; 1
		}
		else{
			//Green Light
			PORTA = 0x01;
 390:	82 b9       	out	0x02, r24	; 2
 392:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 394:	83 7e       	andi	r24, 0xE3	; 227
 396:	8b b9       	out	0x0b, r24	; 11
 398:	81 e0       	ldi	r24, 0x01	; 1
		}
		currTarget = 0x01;
 39a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 39e:	1f c0       	rjmp	.+62     	; 0x3de <randTarget+0x94>
 3a0:	01 97       	sbiw	r24, 0x01	; 1
	}
	else if (randomNumber == 1){
 3a2:	89 f4       	brne	.+34     	; 0x3c6 <randTarget+0x7c>
 3a4:	23 2b       	or	r18, r19
		if(ammoBack == 0){
 3a6:	31 f4       	brne	.+12     	; 0x3b4 <randTarget+0x6a>
 3a8:	88 e3       	ldi	r24, 0x38	; 56
			//White Light
			PORTA = 0x38;
 3aa:	82 b9       	out	0x02, r24	; 2
 3ac:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 3ae:	83 7e       	andi	r24, 0xE3	; 227
 3b0:	8b b9       	out	0x0b, r24	; 11
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <randTarget+0x74>
 3b4:	88 e0       	ldi	r24, 0x08	; 8
		}
		else{
			//Green Light
			PORTA = 0x08;
 3b6:	82 b9       	out	0x02, r24	; 2
 3b8:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 3ba:	83 7e       	andi	r24, 0xE3	; 227
 3bc:	8b b9       	out	0x0b, r24	; 11
 3be:	82 e0       	ldi	r24, 0x02	; 2
		}		
		currTarget = 0x02;
 3c0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3c4:	0c c0       	rjmp	.+24     	; 0x3de <randTarget+0x94>
 3c6:	23 2b       	or	r18, r19
	}
	else{
		if(ammoBack == 0){
 3c8:	29 f4       	brne	.+10     	; 0x3d4 <randTarget+0x8a>
 3ca:	8b b1       	in	r24, 0x0b	; 11
			//White Light
			PORTD = PORTD | 0x01C;
 3cc:	8c 61       	ori	r24, 0x1C	; 28
 3ce:	8b b9       	out	0x0b, r24	; 11
 3d0:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <randTarget+0x8e>
 3d4:	5a 9a       	sbi	0x0b, 2	; 11
		}
		else{
			//Green Light
			PORTD = PORTD | 0x04;
 3d6:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 3d8:	84 e0       	ldi	r24, 0x04	; 4
		}
		currTarget = 0x04;
 3da:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3de:	df 91       	pop	r29
	}
	return;
}
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <GameOver>:
 3e4:	cf 93       	push	r28
		break;
	}
	return commState;
}

void GameOver(){
 3e6:	df 93       	push	r29
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	c0 54       	subi	r28, 0x40	; 64
 3ee:	d1 09       	sbc	r29, r1
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
	char gameOverString[64];
	sendToGun(0x02);
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	93 d0       	rcall	.+294    	; 0x524 <sendToGun>
	sprintf(gameOverString,"Game Over,      Final Score: %d",score);
 3fe:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x1>
 402:	8f 93       	push	r24
 404:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 408:	8f 93       	push	r24
 40a:	82 e1       	ldi	r24, 0x12	; 18
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	9f 93       	push	r25
 410:	8f 93       	push	r24
 412:	8e 01       	movw	r16, r28
 414:	0f 5f       	subi	r16, 0xFF	; 255
 416:	1f 4f       	sbci	r17, 0xFF	; 255
 418:	1f 93       	push	r17
 41a:	0f 93       	push	r16
 41c:	b7 d2       	rcall	.+1390   	; 0x98c <sprintf>
	LCD_DisplayString(1, gameOverString);
 41e:	b8 01       	movw	r22, r16
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	91 de       	rcall	.-734    	; 0x146 <LCD_DisplayString>
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	ff cf       	rjmp	.-2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>

00000432 <commTranslate>:
volatile unsigned char pins = 0;
unsigned int bullets = 6;
//====END OF GLOBALS=====
void commTranslate(unsigned char data){
	//LCD_DisplayString(1,data);
	if(data == 0xFF){
 432:	8f 3f       	cpi	r24, 0xFF	; 255
 434:	09 f4       	brne	.+2      	; 0x438 <commTranslate+0x6>
		GameOver();
 436:	d6 df       	rcall	.-84     	; 0x3e4 <GameOver>
	}
	else{
		bullets = data;
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bullets+0x1>
 43e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bullets>
 442:	08 95       	ret

00000444 <targetSelectSM>:
	}
	return timerState;
}

enum targetSelectStates {targetSelectSM_init, targetSelectSM_targetSelect, targetSelectSM_hitWait};
int targetSelectSM(int targetSelectState){
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	ec 01       	movw	r28, r24
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 44a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 44e:	88 23       	and	r24, r24
 450:	1c f4       	brge	.+6      	; 0x458 <targetSelectSM+0x14>
		payload = USART_Receive(0);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	53 df       	rcall	.-346    	; 0x2fc <USART_Receive>
		commTranslate(payload);
 456:	ed df       	rcall	.-38     	; 0x432 <commTranslate>
 458:	c1 30       	cpi	r28, 0x01	; 1
	}
	switch(targetSelectState){
 45a:	d1 05       	cpc	r29, r1
 45c:	61 f0       	breq	.+24     	; 0x476 <targetSelectSM+0x32>
 45e:	c2 30       	cpi	r28, 0x02	; 2
 460:	d1 05       	cpc	r29, r1
 462:	69 f0       	breq	.+26     	; 0x47e <targetSelectSM+0x3a>
 464:	20 97       	sbiw	r28, 0x00	; 0
 466:	e1 f4       	brne	.+56     	; 0x4a0 <targetSelectSM+0x5c>
 468:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <score+0x1>
		case targetSelectSM_init:
		score = 0;
 46c:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <score>
 470:	c1 e0       	ldi	r28, 0x01	; 1
		targetSelectState = targetSelectSM_targetSelect;
 472:	d0 e0       	ldi	r29, 0x00	; 0
		break;
 474:	15 c0       	rjmp	.+42     	; 0x4a0 <targetSelectSM+0x5c>

		case targetSelectSM_targetSelect:
		randTarget();
 476:	69 df       	rcall	.-302    	; 0x34a <randTarget>
 478:	c2 e0       	ldi	r28, 0x02	; 2
		targetSelectState = targetSelectSM_hitWait;
 47a:	d0 e0       	ldi	r29, 0x00	; 0
 47c:	11 c0       	rjmp	.+34     	; 0x4a0 <targetSelectSM+0x5c>
		break;
 47e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <wait>

		case targetSelectSM_hitWait:
		++wait;
 482:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <wait+0x1>
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <wait+0x1>
 48c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <wait>
 490:	0a 97       	sbiw	r24, 0x0a	; 10
		if(wait == 10){ //2 Seconds is over, time to switch targets
 492:	31 f4       	brne	.+12     	; 0x4a0 <targetSelectSM+0x5c>
 494:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <wait+0x1>
			wait = 0;
 498:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <wait>
 49c:	c1 e0       	ldi	r28, 0x01	; 1
			targetSelectState = targetSelectSM_targetSelect;
 49e:	d0 e0       	ldi	r29, 0x00	; 0
 4a0:	ce 01       	movw	r24, r28
			targetSelectState = targetSelectSM_hitWait;
		}
		break;
	}
	return targetSelectState;
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <LCDDisplaySM>:
 4a8:	1f 93       	push	r17

enum LCDDisplayStates{LCDDisplaySM_update, LCDDisplaySM_GameOver};
int LCDDisplaySM(int LCDDisplayState){
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	ec 01       	movw	r28, r24
 4b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 4b4:	88 23       	and	r24, r24
 4b6:	3c f4       	brge	.+14     	; 0x4c6 <LCDDisplaySM+0x1e>
		payload = USART_Receive(0);
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	20 df       	rcall	.-448    	; 0x2fc <USART_Receive>
 4bc:	18 2f       	mov	r17, r24
		USART_Flush(0);
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	ee de       	rcall	.-548    	; 0x29e <USART_Flush>
		commTranslate(payload);
 4c2:	81 2f       	mov	r24, r17
 4c4:	b6 df       	rcall	.-148    	; 0x432 <commTranslate>
 4c6:	cd 2b       	or	r28, r29
	}
	switch(LCDDisplayState){
 4c8:	39 f5       	brne	.+78     	; 0x518 <LCDDisplaySM+0x70>
 4ca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bullets+0x1>
		case LCDDisplaySM_update:
		sprintf(combineString,"Time: %02d        Score: %d Ammo:%d ",timeLeft,score,bullets);
 4ce:	8f 93       	push	r24
 4d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bullets>
 4d4:	8f 93       	push	r24
 4d6:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x1>
 4da:	8f 93       	push	r24
 4dc:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 4e0:	8f 93       	push	r24
 4e2:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <timeLeft+0x1>
 4e6:	8f 93       	push	r24
 4e8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timeLeft>
 4ec:	8f 93       	push	r24
 4ee:	82 e3       	ldi	r24, 0x32	; 50
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	9f 93       	push	r25
 4f4:	8f 93       	push	r24
 4f6:	89 e9       	ldi	r24, 0x99	; 153
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	9f 93       	push	r25
 4fc:	8f 93       	push	r24
 4fe:	46 d2       	rcall	.+1164   	; 0x98c <sprintf>
 500:	69 e9       	ldi	r22, 0x99	; 153
		DisplayString(1,combineString);
 502:	71 e0       	ldi	r23, 0x01	; 1
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0c df       	rcall	.-488    	; 0x320 <DisplayString>
 508:	8d b7       	in	r24, 0x3d	; 61
 50a:	9e b7       	in	r25, 0x3e	; 62
		LCDDisplayState = LCDDisplaySM_update;
		
		break;
 50c:	0a 96       	adiw	r24, 0x0a	; 10
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	9e bf       	out	0x3e, r25	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	8d bf       	out	0x3d, r24	; 61
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0

		default:
		LCDDisplayState = LCDDisplaySM_update;
	}
	return LCDDisplayState;
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	08 95       	ret

00000524 <sendToGun>:
 524:	cf 93       	push	r28
 526:	df 93       	push	r29

void sendToGun(unsigned char sendValue){
 528:	c8 2f       	mov	r28, r24
 52a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
unsigned char payload = 0x00;
if(USART_HasReceived(0)){ //Message Received
 52e:	88 23       	and	r24, r24
 530:	3c f4       	brge	.+14     	; 0x540 <sendToGun+0x1c>
	payload = USART_Receive(0);
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	e3 de       	rcall	.-570    	; 0x2fc <USART_Receive>
 536:	d8 2f       	mov	r29, r24
	USART_Flush(0);
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	b1 de       	rcall	.-670    	; 0x29e <USART_Flush>
	commTranslate(payload);
 53c:	8d 2f       	mov	r24, r29
 53e:	79 df       	rcall	.-270    	; 0x432 <commTranslate>
 540:	e0 ec       	ldi	r30, 0xC0	; 192
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	85 ff       	sbrs	r24, 5
}
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
 548:	fd cf       	rjmp	.-6      	; 0x544 <sendToGun+0x20>
	USART_Send(sendValue,0);
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	8c 2f       	mov	r24, r28
 54e:	c4 de       	rcall	.-632    	; 0x2d8 <USART_Send>
 550:	df 91       	pop	r29
}
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <hitCheck>:
 556:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <pinUp>
}
void hitCheck(unsigned char pins){
	//Used by PCINT Interrupt to check whether correct target was hit, compare Target to IR receiver
	//Returns true if correct target was hit
	//TODO: Fix if statement if not correct
	if(pinUp == 1){
 55a:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <pinUp+0x1>
 55e:	21 30       	cpi	r18, 0x01	; 1
 560:	31 05       	cpc	r19, r1
 562:	29 f4       	brne	.+10     	; 0x56e <hitCheck+0x18>
		pinUp = 0;
 564:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <pinUp+0x1>
 568:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <pinUp>
		return;
 56c:	08 95       	ret
	}
	if(pins == currTarget){
 56e:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <currTarget>
 572:	98 13       	cpse	r25, r24
 574:	2a c0       	rjmp	.+84     	; 0x5ca <hitCheck+0x74>
		if(ammoBack == 0){
 576:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <ammoBack>
 57a:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <ammoBack+0x1>
 57e:	89 2b       	or	r24, r25
 580:	61 f4       	brne	.+24     	; 0x59a <hitCheck+0x44>
			sendToGun(0x01);
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	ce df       	rcall	.-100    	; 0x524 <sendToGun>
			score++;
 588:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 58c:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <score+0x1>
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <score+0x1>
 596:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <score>
		}
		if(pinUp == 0){
 59a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <pinUp>
 59e:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <pinUp+0x1>
 5a2:	89 2b       	or	r24, r25
 5a4:	91 f4       	brne	.+36     	; 0x5ca <hitCheck+0x74>
			currTarget = 0xFF;
 5a6:	8f ef       	ldi	r24, 0xFF	; 255
 5a8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
			pinUp = 1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <pinUp+0x1>
 5b4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <pinUp>
			score++;
 5b8:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 5bc:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <score+0x1>
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <score+0x1>
 5c6:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <score>
 5ca:	08 95       	ret

000005cc <__vector_5>:
	}
	else{
		return;
	}
}
ISR(PCINT1_vect){
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	0b b6       	in	r0, 0x3b	; 59
 5d8:	0f 92       	push	r0
 5da:	2f 93       	push	r18
 5dc:	3f 93       	push	r19
 5de:	4f 93       	push	r20
 5e0:	5f 93       	push	r21
 5e2:	6f 93       	push	r22
 5e4:	7f 93       	push	r23
 5e6:	8f 93       	push	r24
 5e8:	9f 93       	push	r25
 5ea:	af 93       	push	r26
 5ec:	bf 93       	push	r27
 5ee:	ef 93       	push	r30
 5f0:	ff 93       	push	r31
	pins = (PINB & 0x07);
 5f2:	83 b1       	in	r24, 0x03	; 3
 5f4:	87 70       	andi	r24, 0x07	; 7
 5f6:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <pins>
	hitCheck(pins);
 5fa:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <pins>
 5fe:	ab df       	rcall	.-170    	; 0x556 <hitCheck>
}
 600:	ff 91       	pop	r31
 602:	ef 91       	pop	r30
 604:	bf 91       	pop	r27
 606:	af 91       	pop	r26
 608:	9f 91       	pop	r25
 60a:	8f 91       	pop	r24
 60c:	7f 91       	pop	r23
 60e:	6f 91       	pop	r22
 610:	5f 91       	pop	r21
 612:	4f 91       	pop	r20
 614:	3f 91       	pop	r19
 616:	2f 91       	pop	r18
 618:	0f 90       	pop	r0
 61a:	0b be       	out	0x3b, r0	; 59
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <commStateSM>:
		currTarget = 0x04;
	}
	return;
}
enum commStates{commStateSM_init, commStateSM_loop};
int commStateSM(int commState){
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	ec 01       	movw	r28, r24
	unsigned char payload = 0x00;
	switch(commState){
 62e:	00 97       	sbiw	r24, 0x00	; 0
 630:	19 f0       	breq	.+6      	; 0x638 <commStateSM+0x12>
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	21 f0       	breq	.+8      	; 0x63e <commStateSM+0x18>
 636:	0e c0       	rjmp	.+28     	; 0x654 <commStateSM+0x2e>
		case commStateSM_init:
		commState = commStateSM_loop;
 638:	c1 e0       	ldi	r28, 0x01	; 1
 63a:	d0 e0       	ldi	r29, 0x00	; 0
 63c:	0b c0       	rjmp	.+22     	; 0x654 <commStateSM+0x2e>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 63e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		break;
		
		case commStateSM_loop:
		if(USART_HasReceived(0)){ //Message Received
 642:	88 23       	and	r24, r24
 644:	3c f4       	brge	.+14     	; 0x654 <commStateSM+0x2e>
			payload = USART_Receive(0);
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	59 de       	rcall	.-846    	; 0x2fc <USART_Receive>
 64a:	18 2f       	mov	r17, r24
			USART_Flush(0);
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	27 de       	rcall	.-946    	; 0x29e <USART_Flush>
			commTranslate(payload);
 650:	81 2f       	mov	r24, r17
 652:	ef de       	rcall	.-546    	; 0x432 <commTranslate>
 654:	ce 01       	movw	r24, r28
		}
		commState = commStateSM_loop;
		break;
	}
	return commState;
}
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	08 95       	ret

0000065e <timerSM>:
 65e:	1f 93       	push	r17
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
enum timerStates{timerSM_init, timerSM_Countdown, timerSM_GameOver};
int timerSM(int timerState){
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	ec 01       	movw	r28, r24
 666:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 66a:	88 23       	and	r24, r24
 66c:	3c f4       	brge	.+14     	; 0x67c <timerSM+0x1e>
		payload = USART_Receive(0);
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	45 de       	rcall	.-886    	; 0x2fc <USART_Receive>
 672:	18 2f       	mov	r17, r24
		USART_Flush(0);
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	13 de       	rcall	.-986    	; 0x29e <USART_Flush>
		commTranslate(payload);
 678:	81 2f       	mov	r24, r17
 67a:	db de       	rcall	.-586    	; 0x432 <commTranslate>
 67c:	c1 30       	cpi	r28, 0x01	; 1
		
	}
	switch(timerState){
 67e:	d1 05       	cpc	r29, r1
 680:	71 f0       	breq	.+28     	; 0x69e <timerSM+0x40>
 682:	c2 30       	cpi	r28, 0x02	; 2
 684:	d1 05       	cpc	r29, r1
 686:	c1 f0       	breq	.+48     	; 0x6b8 <timerSM+0x5a>
 688:	20 97       	sbiw	r28, 0x00	; 0
 68a:	c1 f4       	brne	.+48     	; 0x6bc <timerSM+0x5e>
 68c:	8c e3       	ldi	r24, 0x3C	; 60
		case timerSM_init:
		timeLeft = 60;
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timeLeft+0x1>
 694:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timeLeft>
 698:	c1 e0       	ldi	r28, 0x01	; 1
		timerState = timerSM_Countdown;
 69a:	d0 e0       	ldi	r29, 0x00	; 0
 69c:	0f c0       	rjmp	.+30     	; 0x6bc <timerSM+0x5e>
		break;
 69e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timeLeft>

		case timerSM_Countdown:
		if(timeLeft > 0){
 6a2:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <timeLeft+0x1>
 6a6:	00 97       	sbiw	r24, 0x00	; 0
 6a8:	31 f0       	breq	.+12     	; 0x6b6 <timerSM+0x58>
 6aa:	01 97       	sbiw	r24, 0x01	; 1
			timeLeft = timeLeft - 1;
 6ac:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timeLeft+0x1>
 6b0:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timeLeft>
 6b4:	03 c0       	rjmp	.+6      	; 0x6bc <timerSM+0x5e>
			timerState = timerSM_Countdown;
		}
		else{
			timerState = timerSM_GameOver;
			GameOver();
 6b6:	96 de       	rcall	.-724    	; 0x3e4 <GameOver>
 6b8:	c0 e0       	ldi	r28, 0x00	; 0
		}
		break;

		case timerSM_GameOver:
		timerState = timerSM_init;
 6ba:	d0 e0       	ldi	r29, 0x00	; 0
 6bc:	ce 01       	movw	r24, r28
		break;
	}
	return timerState;
}
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	08 95       	ret

000006c6 <main>:
 6c6:	cf 93       	push	r28
	while(1);
}


int main(void)
{
 6c8:	df 93       	push	r29
 6ca:	cd b7       	in	r28, 0x3d	; 61
 6cc:	de b7       	in	r29, 0x3e	; 62
 6ce:	28 97       	sbiw	r28, 0x08	; 8
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	f8 94       	cli
 6d4:	de bf       	out	0x3e, r29	; 62
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	cd bf       	out	0x3d, r28	; 61

	(PCMSK1) |= (1<< PCINT8);
 6da:	ec e6       	ldi	r30, 0x6C	; 108
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	81 60       	ori	r24, 0x01	; 1
 6e2:	80 83       	st	Z, r24
	(PCMSK1) |= (1<< PCINT9);
 6e4:	80 81       	ld	r24, Z
 6e6:	82 60       	ori	r24, 0x02	; 2
 6e8:	80 83       	st	Z, r24
	(PCMSK1) |= (1<< PCINT10);
 6ea:	80 81       	ld	r24, Z
 6ec:	84 60       	ori	r24, 0x04	; 4
 6ee:	80 83       	st	Z, r24
	(PCICR) |= (1<< PCIE1);
 6f0:	e8 e6       	ldi	r30, 0x68	; 104
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 81       	ld	r24, Z
 6f6:	82 60       	ori	r24, 0x02	; 2
 6f8:	80 83       	st	Z, r24
	sei();
 6fa:	78 94       	sei
	DDRD = 0xFF; PORTD = 0x00;
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	8a b9       	out	0x0a, r24	; 10
 700:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0XFF; PORTC = 0x00;
 702:	87 b9       	out	0x07, r24	; 7
 704:	18 b8       	out	0x08, r1	; 8
	DDRB = 0x00; PORTB = 0xFF;
 706:	14 b8       	out	0x04, r1	; 4
 708:	85 b9       	out	0x05, r24	; 5
	DDRA = 0xFF; PORTA = 0x00;
 70a:	81 b9       	out	0x01, r24	; 1
 70c:	12 b8       	out	0x02, r1	; 2
	LCD_init();
 70e:	03 dd       	rcall	.-1530   	; 0x116 <LCD_init>
	initUSART(0);
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	a3 dd       	rcall	.-1210   	; 0x25a <initUSART>
	USART_Flush(0);
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	c3 dd       	rcall	.-1146   	; 0x29e <USART_Flush>
 718:	88 e0       	ldi	r24, 0x08	; 8
	static task task1;
	static task task2;
	static task task3;
	static task task4;

	task *tasks[] = {&task1,&task2,&task3,&task4};
 71a:	ea e0       	ldi	r30, 0x0A	; 10
 71c:	f1 e0       	ldi	r31, 0x01	; 1
 71e:	de 01       	movw	r26, r28
 720:	11 96       	adiw	r26, 0x01	; 1
 722:	01 90       	ld	r0, Z+
 724:	0d 92       	st	X+, r0
 726:	8a 95       	dec	r24
 728:	e1 f7       	brne	.-8      	; 0x722 <main+0x5c>
 72a:	e9 e7       	ldi	r30, 0x79	; 121
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	task1.state = timerSM_init;
 72c:	f1 e0       	ldi	r31, 0x01	; 1
 72e:	10 82       	st	Z, r1
 730:	88 ee       	ldi	r24, 0xE8	; 232
	task1.period = 1000;
 732:	93 e0       	ldi	r25, 0x03	; 3
 734:	a0 e0       	ldi	r26, 0x00	; 0
 736:	b0 e0       	ldi	r27, 0x00	; 0
 738:	81 83       	std	Z+1, r24	; 0x01
 73a:	92 83       	std	Z+2, r25	; 0x02
 73c:	a3 83       	std	Z+3, r26	; 0x03
 73e:	b4 83       	std	Z+4, r27	; 0x04
 740:	85 83       	std	Z+5, r24	; 0x05
	task1.elapsedTime = task1.period;
 742:	96 83       	std	Z+6, r25	; 0x06
 744:	a7 83       	std	Z+7, r26	; 0x07
 746:	b0 87       	std	Z+8, r27	; 0x08
 748:	8f e2       	ldi	r24, 0x2F	; 47
	task1.TickFct = &timerSM;
 74a:	93 e0       	ldi	r25, 0x03	; 3
 74c:	92 87       	std	Z+10, r25	; 0x0a
 74e:	81 87       	std	Z+9, r24	; 0x09
 750:	ee e6       	ldi	r30, 0x6E	; 110

	task2.state = targetSelectSM_init;
 752:	f1 e0       	ldi	r31, 0x01	; 1
 754:	10 82       	st	Z, r1
 756:	88 ec       	ldi	r24, 0xC8	; 200
	task2.period = 200;
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	a0 e0       	ldi	r26, 0x00	; 0
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	81 83       	std	Z+1, r24	; 0x01
 760:	92 83       	std	Z+2, r25	; 0x02
 762:	a3 83       	std	Z+3, r26	; 0x03
 764:	b4 83       	std	Z+4, r27	; 0x04
 766:	85 83       	std	Z+5, r24	; 0x05
	task2.elapsedTime = task2.period;
 768:	96 83       	std	Z+6, r25	; 0x06
 76a:	a7 83       	std	Z+7, r26	; 0x07
 76c:	b0 87       	std	Z+8, r27	; 0x08
 76e:	22 e2       	ldi	r18, 0x22	; 34
	task2.TickFct = &targetSelectSM;
 770:	32 e0       	ldi	r19, 0x02	; 2
 772:	32 87       	std	Z+10, r19	; 0x0a
 774:	21 87       	std	Z+9, r18	; 0x09
 776:	e3 e6       	ldi	r30, 0x63	; 99

	task3.state = LCDDisplaySM_update;
 778:	f1 e0       	ldi	r31, 0x01	; 1
 77a:	10 82       	st	Z, r1
 77c:	81 83       	std	Z+1, r24	; 0x01
	task3.period = 200;
 77e:	92 83       	std	Z+2, r25	; 0x02
 780:	a3 83       	std	Z+3, r26	; 0x03
 782:	b4 83       	std	Z+4, r27	; 0x04
 784:	85 83       	std	Z+5, r24	; 0x05
	task3.elapsedTime = task3.period;
 786:	96 83       	std	Z+6, r25	; 0x06
 788:	a7 83       	std	Z+7, r26	; 0x07
 78a:	b0 87       	std	Z+8, r27	; 0x08
 78c:	84 e5       	ldi	r24, 0x54	; 84
	task3.TickFct = &LCDDisplaySM;
 78e:	92 e0       	ldi	r25, 0x02	; 2
 790:	92 87       	std	Z+10, r25	; 0x0a
 792:	81 87       	std	Z+9, r24	; 0x09
 794:	e8 e5       	ldi	r30, 0x58	; 88

	task4.state = commStateSM_init;
 796:	f1 e0       	ldi	r31, 0x01	; 1
 798:	10 82       	st	Z, r1
 79a:	82 e3       	ldi	r24, 0x32	; 50
	task4.period = 50;
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	a0 e0       	ldi	r26, 0x00	; 0
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	81 83       	std	Z+1, r24	; 0x01
 7a4:	92 83       	std	Z+2, r25	; 0x02
 7a6:	a3 83       	std	Z+3, r26	; 0x03
 7a8:	b4 83       	std	Z+4, r27	; 0x04
 7aa:	85 83       	std	Z+5, r24	; 0x05
	task4.elapsedTime = task4.period;
 7ac:	96 83       	std	Z+6, r25	; 0x06
 7ae:	a7 83       	std	Z+7, r26	; 0x07
 7b0:	b0 87       	std	Z+8, r27	; 0x08
 7b2:	83 e1       	ldi	r24, 0x13	; 19
	task4.TickFct = &commStateSM;
 7b4:	93 e0       	ldi	r25, 0x03	; 3
 7b6:	92 87       	std	Z+10, r25	; 0x0a
 7b8:	81 87       	std	Z+9, r24	; 0x09
 7ba:	62 e3       	ldi	r22, 0x32	; 50
	
	TimerSet(50);
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	da dc       	rcall	.-1612   	; 0x178 <TimerSet>
	TimerOn();
 7c4:	ea dc       	rcall	.-1580   	; 0x19a <TimerOn>
 7c6:	83 e0       	ldi	r24, 0x03	; 3
	unsigned int i;
	//====End of Task Scheduler Setup====
	//Send start game signal to gun
	sendToGun(0x03);
 7c8:	ad de       	rcall	.-678    	; 0x524 <sendToGun>
 7ca:	7e 01       	movw	r14, r28
 7cc:	89 e0       	ldi	r24, 0x09	; 9
 7ce:	e8 0e       	add	r14, r24
 7d0:	f1 1c       	adc	r15, r1
 7d2:	de 01       	movw	r26, r28
 7d4:	11 96       	adiw	r26, 0x01	; 1
 7d6:	6d 01       	movw	r12, r26
 7d8:	f6 01       	movw	r30, r12
 7da:	01 91       	ld	r16, Z+
			LCD_DisplayString(1,USART_Receive(0));
			USART_Flush(0);
		}
		*/
		for( i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period){
 7dc:	11 91       	ld	r17, Z+
 7de:	6f 01       	movw	r12, r30
 7e0:	d8 01       	movw	r26, r16
 7e2:	15 96       	adiw	r26, 0x05	; 5
 7e4:	4d 91       	ld	r20, X+
 7e6:	5d 91       	ld	r21, X+
 7e8:	6d 91       	ld	r22, X+
 7ea:	7c 91       	ld	r23, X
 7ec:	18 97       	sbiw	r26, 0x08	; 8
 7ee:	11 96       	adiw	r26, 0x01	; 1
 7f0:	8d 91       	ld	r24, X+
 7f2:	9d 91       	ld	r25, X+
 7f4:	0d 90       	ld	r0, X+
 7f6:	bc 91       	ld	r27, X
 7f8:	a0 2d       	mov	r26, r0
 7fa:	48 17       	cp	r20, r24
 7fc:	59 07       	cpc	r21, r25
 7fe:	6a 07       	cpc	r22, r26
 800:	7b 07       	cpc	r23, r27
 802:	81 f4       	brne	.+32     	; 0x824 <main+0x15e>
 804:	f8 01       	movw	r30, r16
 806:	80 81       	ld	r24, Z
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 808:	01 84       	ldd	r0, Z+9	; 0x09
 80a:	f2 85       	ldd	r31, Z+10	; 0x0a
 80c:	e0 2d       	mov	r30, r0
 80e:	08 2e       	mov	r0, r24
 810:	00 0c       	add	r0, r0
 812:	99 0b       	sbc	r25, r25
 814:	09 95       	icall
 816:	d8 01       	movw	r26, r16
 818:	8c 93       	st	X, r24
 81a:	f8 01       	movw	r30, r16
 81c:	15 82       	std	Z+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 81e:	16 82       	std	Z+6, r1	; 0x06
 820:	17 82       	std	Z+7, r1	; 0x07
 822:	10 86       	std	Z+8, r1	; 0x08
 824:	f8 01       	movw	r30, r16
 826:	85 81       	ldd	r24, Z+5	; 0x05
			}
			tasks[i] ->elapsedTime += 50;
 828:	96 81       	ldd	r25, Z+6	; 0x06
 82a:	a7 81       	ldd	r26, Z+7	; 0x07
 82c:	b0 85       	ldd	r27, Z+8	; 0x08
 82e:	c2 96       	adiw	r24, 0x32	; 50
 830:	a1 1d       	adc	r26, r1
 832:	b1 1d       	adc	r27, r1
 834:	85 83       	std	Z+5, r24	; 0x05
 836:	96 83       	std	Z+6, r25	; 0x06
 838:	a7 83       	std	Z+7, r26	; 0x07
 83a:	b0 87       	std	Z+8, r27	; 0x08
 83c:	ce 14       	cp	r12, r14
 83e:	df 04       	cpc	r13, r15
		while(USART_HasReceived(0)){
			LCD_DisplayString(1,USART_Receive(0));
			USART_Flush(0);
		}
		*/
		for( i = 0; i < numTasks; i++){
 840:	59 f6       	brne	.-106    	; 0x7d8 <main+0x112>
 842:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <TimerFlag>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i] ->elapsedTime += 50;
		}
		while(!TimerFlag);
 846:	88 23       	and	r24, r24
 848:	e1 f3       	breq	.-8      	; 0x842 <main+0x17c>
 84a:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <TimerFlag>
		TimerFlag = 0;
 84e:	c1 cf       	rjmp	.-126    	; 0x7d2 <main+0x10c>

00000850 <__divmodhi4>:
 850:	97 fb       	bst	r25, 7
    }
 852:	07 2e       	mov	r0, r23
 854:	16 f4       	brtc	.+4      	; 0x85a <__divmodhi4+0xa>
 856:	00 94       	com	r0
 858:	06 d0       	rcall	.+12     	; 0x866 <__divmodhi4_neg1>
 85a:	77 fd       	sbrc	r23, 7
 85c:	08 d0       	rcall	.+16     	; 0x86e <__divmodhi4_neg2>
 85e:	2d d0       	rcall	.+90     	; 0x8ba <__udivmodhi4>
 860:	07 fc       	sbrc	r0, 7
 862:	05 d0       	rcall	.+10     	; 0x86e <__divmodhi4_neg2>
 864:	3e f4       	brtc	.+14     	; 0x874 <__divmodhi4_exit>

00000866 <__divmodhi4_neg1>:
 866:	90 95       	com	r25
 868:	81 95       	neg	r24
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	08 95       	ret

0000086e <__divmodhi4_neg2>:
 86e:	70 95       	com	r23
 870:	61 95       	neg	r22
 872:	7f 4f       	sbci	r23, 0xFF	; 255

00000874 <__divmodhi4_exit>:
 874:	08 95       	ret

00000876 <__udivmodsi4>:
 876:	a1 e2       	ldi	r26, 0x21	; 33
 878:	1a 2e       	mov	r1, r26
 87a:	aa 1b       	sub	r26, r26
 87c:	bb 1b       	sub	r27, r27
 87e:	fd 01       	movw	r30, r26
 880:	0d c0       	rjmp	.+26     	; 0x89c <__udivmodsi4_ep>

00000882 <__udivmodsi4_loop>:
 882:	aa 1f       	adc	r26, r26
 884:	bb 1f       	adc	r27, r27
 886:	ee 1f       	adc	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	a2 17       	cp	r26, r18
 88c:	b3 07       	cpc	r27, r19
 88e:	e4 07       	cpc	r30, r20
 890:	f5 07       	cpc	r31, r21
 892:	20 f0       	brcs	.+8      	; 0x89c <__udivmodsi4_ep>
 894:	a2 1b       	sub	r26, r18
 896:	b3 0b       	sbc	r27, r19
 898:	e4 0b       	sbc	r30, r20
 89a:	f5 0b       	sbc	r31, r21

0000089c <__udivmodsi4_ep>:
 89c:	66 1f       	adc	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	88 1f       	adc	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	1a 94       	dec	r1
 8a6:	69 f7       	brne	.-38     	; 0x882 <__udivmodsi4_loop>
 8a8:	60 95       	com	r22
 8aa:	70 95       	com	r23
 8ac:	80 95       	com	r24
 8ae:	90 95       	com	r25
 8b0:	9b 01       	movw	r18, r22
 8b2:	ac 01       	movw	r20, r24
 8b4:	bd 01       	movw	r22, r26
 8b6:	cf 01       	movw	r24, r30
 8b8:	08 95       	ret

000008ba <__udivmodhi4>:
 8ba:	aa 1b       	sub	r26, r26
 8bc:	bb 1b       	sub	r27, r27
 8be:	51 e1       	ldi	r21, 0x11	; 17
 8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <__udivmodhi4_ep>

000008c2 <__udivmodhi4_loop>:
 8c2:	aa 1f       	adc	r26, r26
 8c4:	bb 1f       	adc	r27, r27
 8c6:	a6 17       	cp	r26, r22
 8c8:	b7 07       	cpc	r27, r23
 8ca:	10 f0       	brcs	.+4      	; 0x8d0 <__udivmodhi4_ep>
 8cc:	a6 1b       	sub	r26, r22
 8ce:	b7 0b       	sbc	r27, r23

000008d0 <__udivmodhi4_ep>:
 8d0:	88 1f       	adc	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	5a 95       	dec	r21
 8d6:	a9 f7       	brne	.-22     	; 0x8c2 <__udivmodhi4_loop>
 8d8:	80 95       	com	r24
 8da:	90 95       	com	r25
 8dc:	bc 01       	movw	r22, r24
 8de:	cd 01       	movw	r24, r26
 8e0:	08 95       	ret

000008e2 <do_rand>:
 8e2:	8f 92       	push	r8
 8e4:	9f 92       	push	r9
 8e6:	af 92       	push	r10
 8e8:	bf 92       	push	r11
 8ea:	cf 92       	push	r12
 8ec:	df 92       	push	r13
 8ee:	ef 92       	push	r14
 8f0:	ff 92       	push	r15
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	ec 01       	movw	r28, r24
 8f8:	68 81       	ld	r22, Y
 8fa:	79 81       	ldd	r23, Y+1	; 0x01
 8fc:	8a 81       	ldd	r24, Y+2	; 0x02
 8fe:	9b 81       	ldd	r25, Y+3	; 0x03
 900:	61 15       	cp	r22, r1
 902:	71 05       	cpc	r23, r1
 904:	81 05       	cpc	r24, r1
 906:	91 05       	cpc	r25, r1
 908:	21 f4       	brne	.+8      	; 0x912 <do_rand+0x30>
 90a:	64 e2       	ldi	r22, 0x24	; 36
 90c:	79 ed       	ldi	r23, 0xD9	; 217
 90e:	8b e5       	ldi	r24, 0x5B	; 91
 910:	97 e0       	ldi	r25, 0x07	; 7
 912:	2d e1       	ldi	r18, 0x1D	; 29
 914:	33 ef       	ldi	r19, 0xF3	; 243
 916:	41 e0       	ldi	r20, 0x01	; 1
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	13 d3       	rcall	.+1574   	; 0xf42 <__divmodsi4>
 91c:	49 01       	movw	r8, r18
 91e:	5a 01       	movw	r10, r20
 920:	9b 01       	movw	r18, r22
 922:	ac 01       	movw	r20, r24
 924:	a7 ea       	ldi	r26, 0xA7	; 167
 926:	b1 e4       	ldi	r27, 0x41	; 65
 928:	28 d3       	rcall	.+1616   	; 0xf7a <__muluhisi3>
 92a:	6b 01       	movw	r12, r22
 92c:	7c 01       	movw	r14, r24
 92e:	ac ee       	ldi	r26, 0xEC	; 236
 930:	b4 ef       	ldi	r27, 0xF4	; 244
 932:	a5 01       	movw	r20, r10
 934:	94 01       	movw	r18, r8
 936:	2d d3       	rcall	.+1626   	; 0xf92 <__mulohisi3>
 938:	dc 01       	movw	r26, r24
 93a:	cb 01       	movw	r24, r22
 93c:	8c 0d       	add	r24, r12
 93e:	9d 1d       	adc	r25, r13
 940:	ae 1d       	adc	r26, r14
 942:	bf 1d       	adc	r27, r15
 944:	b7 ff       	sbrs	r27, 7
 946:	03 c0       	rjmp	.+6      	; 0x94e <do_rand+0x6c>
 948:	01 97       	sbiw	r24, 0x01	; 1
 94a:	a1 09       	sbc	r26, r1
 94c:	b0 48       	sbci	r27, 0x80	; 128
 94e:	88 83       	st	Y, r24
 950:	99 83       	std	Y+1, r25	; 0x01
 952:	aa 83       	std	Y+2, r26	; 0x02
 954:	bb 83       	std	Y+3, r27	; 0x03
 956:	9f 77       	andi	r25, 0x7F	; 127
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	ff 90       	pop	r15
 95e:	ef 90       	pop	r14
 960:	df 90       	pop	r13
 962:	cf 90       	pop	r12
 964:	bf 90       	pop	r11
 966:	af 90       	pop	r10
 968:	9f 90       	pop	r9
 96a:	8f 90       	pop	r8
 96c:	08 95       	ret

0000096e <rand_r>:
 96e:	b9 cf       	rjmp	.-142    	; 0x8e2 <do_rand>

00000970 <rand>:
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	91 e0       	ldi	r25, 0x01	; 1
 974:	b6 cf       	rjmp	.-148    	; 0x8e2 <do_rand>

00000976 <srand>:
 976:	a0 e0       	ldi	r26, 0x00	; 0
 978:	b0 e0       	ldi	r27, 0x00	; 0
 97a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 97e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 982:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 986:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 98a:	08 95       	ret

0000098c <sprintf>:
 98c:	0f 93       	push	r16
 98e:	1f 93       	push	r17
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
 994:	cd b7       	in	r28, 0x3d	; 61
 996:	de b7       	in	r29, 0x3e	; 62
 998:	2e 97       	sbiw	r28, 0x0e	; 14
 99a:	0f b6       	in	r0, 0x3f	; 63
 99c:	f8 94       	cli
 99e:	de bf       	out	0x3e, r29	; 62
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	cd bf       	out	0x3d, r28	; 61
 9a4:	0d 89       	ldd	r16, Y+21	; 0x15
 9a6:	1e 89       	ldd	r17, Y+22	; 0x16
 9a8:	86 e0       	ldi	r24, 0x06	; 6
 9aa:	8c 83       	std	Y+4, r24	; 0x04
 9ac:	1a 83       	std	Y+2, r17	; 0x02
 9ae:	09 83       	std	Y+1, r16	; 0x01
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	9f e7       	ldi	r25, 0x7F	; 127
 9b4:	9e 83       	std	Y+6, r25	; 0x06
 9b6:	8d 83       	std	Y+5, r24	; 0x05
 9b8:	ae 01       	movw	r20, r28
 9ba:	47 5e       	subi	r20, 0xE7	; 231
 9bc:	5f 4f       	sbci	r21, 0xFF	; 255
 9be:	6f 89       	ldd	r22, Y+23	; 0x17
 9c0:	78 8d       	ldd	r23, Y+24	; 0x18
 9c2:	ce 01       	movw	r24, r28
 9c4:	01 96       	adiw	r24, 0x01	; 1
 9c6:	10 d0       	rcall	.+32     	; 0x9e8 <vfprintf>
 9c8:	ef 81       	ldd	r30, Y+7	; 0x07
 9ca:	f8 85       	ldd	r31, Y+8	; 0x08
 9cc:	e0 0f       	add	r30, r16
 9ce:	f1 1f       	adc	r31, r17
 9d0:	10 82       	st	Z, r1
 9d2:	2e 96       	adiw	r28, 0x0e	; 14
 9d4:	0f b6       	in	r0, 0x3f	; 63
 9d6:	f8 94       	cli
 9d8:	de bf       	out	0x3e, r29	; 62
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	cd bf       	out	0x3d, r28	; 61
 9de:	df 91       	pop	r29
 9e0:	cf 91       	pop	r28
 9e2:	1f 91       	pop	r17
 9e4:	0f 91       	pop	r16
 9e6:	08 95       	ret

000009e8 <vfprintf>:
 9e8:	2f 92       	push	r2
 9ea:	3f 92       	push	r3
 9ec:	4f 92       	push	r4
 9ee:	5f 92       	push	r5
 9f0:	6f 92       	push	r6
 9f2:	7f 92       	push	r7
 9f4:	8f 92       	push	r8
 9f6:	9f 92       	push	r9
 9f8:	af 92       	push	r10
 9fa:	bf 92       	push	r11
 9fc:	cf 92       	push	r12
 9fe:	df 92       	push	r13
 a00:	ef 92       	push	r14
 a02:	ff 92       	push	r15
 a04:	0f 93       	push	r16
 a06:	1f 93       	push	r17
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	cd b7       	in	r28, 0x3d	; 61
 a0e:	de b7       	in	r29, 0x3e	; 62
 a10:	2b 97       	sbiw	r28, 0x0b	; 11
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	f8 94       	cli
 a16:	de bf       	out	0x3e, r29	; 62
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	cd bf       	out	0x3d, r28	; 61
 a1c:	6c 01       	movw	r12, r24
 a1e:	7b 01       	movw	r14, r22
 a20:	8a 01       	movw	r16, r20
 a22:	fc 01       	movw	r30, r24
 a24:	17 82       	std	Z+7, r1	; 0x07
 a26:	16 82       	std	Z+6, r1	; 0x06
 a28:	83 81       	ldd	r24, Z+3	; 0x03
 a2a:	81 ff       	sbrs	r24, 1
 a2c:	bf c1       	rjmp	.+894    	; 0xdac <vfprintf+0x3c4>
 a2e:	ce 01       	movw	r24, r28
 a30:	01 96       	adiw	r24, 0x01	; 1
 a32:	3c 01       	movw	r6, r24
 a34:	f6 01       	movw	r30, r12
 a36:	93 81       	ldd	r25, Z+3	; 0x03
 a38:	f7 01       	movw	r30, r14
 a3a:	93 fd       	sbrc	r25, 3
 a3c:	85 91       	lpm	r24, Z+
 a3e:	93 ff       	sbrs	r25, 3
 a40:	81 91       	ld	r24, Z+
 a42:	7f 01       	movw	r14, r30
 a44:	88 23       	and	r24, r24
 a46:	09 f4       	brne	.+2      	; 0xa4a <vfprintf+0x62>
 a48:	ad c1       	rjmp	.+858    	; 0xda4 <vfprintf+0x3bc>
 a4a:	85 32       	cpi	r24, 0x25	; 37
 a4c:	39 f4       	brne	.+14     	; 0xa5c <vfprintf+0x74>
 a4e:	93 fd       	sbrc	r25, 3
 a50:	85 91       	lpm	r24, Z+
 a52:	93 ff       	sbrs	r25, 3
 a54:	81 91       	ld	r24, Z+
 a56:	7f 01       	movw	r14, r30
 a58:	85 32       	cpi	r24, 0x25	; 37
 a5a:	21 f4       	brne	.+8      	; 0xa64 <vfprintf+0x7c>
 a5c:	b6 01       	movw	r22, r12
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	d6 d1       	rcall	.+940    	; 0xe0e <fputc>
 a62:	e8 cf       	rjmp	.-48     	; 0xa34 <vfprintf+0x4c>
 a64:	91 2c       	mov	r9, r1
 a66:	21 2c       	mov	r2, r1
 a68:	31 2c       	mov	r3, r1
 a6a:	ff e1       	ldi	r31, 0x1F	; 31
 a6c:	f3 15       	cp	r31, r3
 a6e:	d8 f0       	brcs	.+54     	; 0xaa6 <vfprintf+0xbe>
 a70:	8b 32       	cpi	r24, 0x2B	; 43
 a72:	79 f0       	breq	.+30     	; 0xa92 <vfprintf+0xaa>
 a74:	38 f4       	brcc	.+14     	; 0xa84 <vfprintf+0x9c>
 a76:	80 32       	cpi	r24, 0x20	; 32
 a78:	79 f0       	breq	.+30     	; 0xa98 <vfprintf+0xb0>
 a7a:	83 32       	cpi	r24, 0x23	; 35
 a7c:	a1 f4       	brne	.+40     	; 0xaa6 <vfprintf+0xbe>
 a7e:	23 2d       	mov	r18, r3
 a80:	20 61       	ori	r18, 0x10	; 16
 a82:	1d c0       	rjmp	.+58     	; 0xabe <vfprintf+0xd6>
 a84:	8d 32       	cpi	r24, 0x2D	; 45
 a86:	61 f0       	breq	.+24     	; 0xaa0 <vfprintf+0xb8>
 a88:	80 33       	cpi	r24, 0x30	; 48
 a8a:	69 f4       	brne	.+26     	; 0xaa6 <vfprintf+0xbe>
 a8c:	23 2d       	mov	r18, r3
 a8e:	21 60       	ori	r18, 0x01	; 1
 a90:	16 c0       	rjmp	.+44     	; 0xabe <vfprintf+0xd6>
 a92:	83 2d       	mov	r24, r3
 a94:	82 60       	ori	r24, 0x02	; 2
 a96:	38 2e       	mov	r3, r24
 a98:	e3 2d       	mov	r30, r3
 a9a:	e4 60       	ori	r30, 0x04	; 4
 a9c:	3e 2e       	mov	r3, r30
 a9e:	2a c0       	rjmp	.+84     	; 0xaf4 <vfprintf+0x10c>
 aa0:	f3 2d       	mov	r31, r3
 aa2:	f8 60       	ori	r31, 0x08	; 8
 aa4:	1d c0       	rjmp	.+58     	; 0xae0 <vfprintf+0xf8>
 aa6:	37 fc       	sbrc	r3, 7
 aa8:	2d c0       	rjmp	.+90     	; 0xb04 <vfprintf+0x11c>
 aaa:	20 ed       	ldi	r18, 0xD0	; 208
 aac:	28 0f       	add	r18, r24
 aae:	2a 30       	cpi	r18, 0x0A	; 10
 ab0:	40 f0       	brcs	.+16     	; 0xac2 <vfprintf+0xda>
 ab2:	8e 32       	cpi	r24, 0x2E	; 46
 ab4:	b9 f4       	brne	.+46     	; 0xae4 <vfprintf+0xfc>
 ab6:	36 fc       	sbrc	r3, 6
 ab8:	75 c1       	rjmp	.+746    	; 0xda4 <vfprintf+0x3bc>
 aba:	23 2d       	mov	r18, r3
 abc:	20 64       	ori	r18, 0x40	; 64
 abe:	32 2e       	mov	r3, r18
 ac0:	19 c0       	rjmp	.+50     	; 0xaf4 <vfprintf+0x10c>
 ac2:	36 fe       	sbrs	r3, 6
 ac4:	06 c0       	rjmp	.+12     	; 0xad2 <vfprintf+0xea>
 ac6:	8a e0       	ldi	r24, 0x0A	; 10
 ac8:	98 9e       	mul	r9, r24
 aca:	20 0d       	add	r18, r0
 acc:	11 24       	eor	r1, r1
 ace:	92 2e       	mov	r9, r18
 ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <vfprintf+0x10c>
 ad2:	ea e0       	ldi	r30, 0x0A	; 10
 ad4:	2e 9e       	mul	r2, r30
 ad6:	20 0d       	add	r18, r0
 ad8:	11 24       	eor	r1, r1
 ada:	22 2e       	mov	r2, r18
 adc:	f3 2d       	mov	r31, r3
 ade:	f0 62       	ori	r31, 0x20	; 32
 ae0:	3f 2e       	mov	r3, r31
 ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <vfprintf+0x10c>
 ae4:	8c 36       	cpi	r24, 0x6C	; 108
 ae6:	21 f4       	brne	.+8      	; 0xaf0 <vfprintf+0x108>
 ae8:	83 2d       	mov	r24, r3
 aea:	80 68       	ori	r24, 0x80	; 128
 aec:	38 2e       	mov	r3, r24
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <vfprintf+0x10c>
 af0:	88 36       	cpi	r24, 0x68	; 104
 af2:	41 f4       	brne	.+16     	; 0xb04 <vfprintf+0x11c>
 af4:	f7 01       	movw	r30, r14
 af6:	93 fd       	sbrc	r25, 3
 af8:	85 91       	lpm	r24, Z+
 afa:	93 ff       	sbrs	r25, 3
 afc:	81 91       	ld	r24, Z+
 afe:	7f 01       	movw	r14, r30
 b00:	81 11       	cpse	r24, r1
 b02:	b3 cf       	rjmp	.-154    	; 0xa6a <vfprintf+0x82>
 b04:	98 2f       	mov	r25, r24
 b06:	9f 7d       	andi	r25, 0xDF	; 223
 b08:	95 54       	subi	r25, 0x45	; 69
 b0a:	93 30       	cpi	r25, 0x03	; 3
 b0c:	28 f4       	brcc	.+10     	; 0xb18 <vfprintf+0x130>
 b0e:	0c 5f       	subi	r16, 0xFC	; 252
 b10:	1f 4f       	sbci	r17, 0xFF	; 255
 b12:	9f e3       	ldi	r25, 0x3F	; 63
 b14:	99 83       	std	Y+1, r25	; 0x01
 b16:	0d c0       	rjmp	.+26     	; 0xb32 <vfprintf+0x14a>
 b18:	83 36       	cpi	r24, 0x63	; 99
 b1a:	31 f0       	breq	.+12     	; 0xb28 <vfprintf+0x140>
 b1c:	83 37       	cpi	r24, 0x73	; 115
 b1e:	71 f0       	breq	.+28     	; 0xb3c <vfprintf+0x154>
 b20:	83 35       	cpi	r24, 0x53	; 83
 b22:	09 f0       	breq	.+2      	; 0xb26 <vfprintf+0x13e>
 b24:	55 c0       	rjmp	.+170    	; 0xbd0 <vfprintf+0x1e8>
 b26:	20 c0       	rjmp	.+64     	; 0xb68 <vfprintf+0x180>
 b28:	f8 01       	movw	r30, r16
 b2a:	80 81       	ld	r24, Z
 b2c:	89 83       	std	Y+1, r24	; 0x01
 b2e:	0e 5f       	subi	r16, 0xFE	; 254
 b30:	1f 4f       	sbci	r17, 0xFF	; 255
 b32:	88 24       	eor	r8, r8
 b34:	83 94       	inc	r8
 b36:	91 2c       	mov	r9, r1
 b38:	53 01       	movw	r10, r6
 b3a:	12 c0       	rjmp	.+36     	; 0xb60 <vfprintf+0x178>
 b3c:	28 01       	movw	r4, r16
 b3e:	f2 e0       	ldi	r31, 0x02	; 2
 b40:	4f 0e       	add	r4, r31
 b42:	51 1c       	adc	r5, r1
 b44:	f8 01       	movw	r30, r16
 b46:	a0 80       	ld	r10, Z
 b48:	b1 80       	ldd	r11, Z+1	; 0x01
 b4a:	36 fe       	sbrs	r3, 6
 b4c:	03 c0       	rjmp	.+6      	; 0xb54 <vfprintf+0x16c>
 b4e:	69 2d       	mov	r22, r9
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0x170>
 b54:	6f ef       	ldi	r22, 0xFF	; 255
 b56:	7f ef       	ldi	r23, 0xFF	; 255
 b58:	c5 01       	movw	r24, r10
 b5a:	4e d1       	rcall	.+668    	; 0xdf8 <strnlen>
 b5c:	4c 01       	movw	r8, r24
 b5e:	82 01       	movw	r16, r4
 b60:	f3 2d       	mov	r31, r3
 b62:	ff 77       	andi	r31, 0x7F	; 127
 b64:	3f 2e       	mov	r3, r31
 b66:	15 c0       	rjmp	.+42     	; 0xb92 <vfprintf+0x1aa>
 b68:	28 01       	movw	r4, r16
 b6a:	22 e0       	ldi	r18, 0x02	; 2
 b6c:	42 0e       	add	r4, r18
 b6e:	51 1c       	adc	r5, r1
 b70:	f8 01       	movw	r30, r16
 b72:	a0 80       	ld	r10, Z
 b74:	b1 80       	ldd	r11, Z+1	; 0x01
 b76:	36 fe       	sbrs	r3, 6
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x198>
 b7a:	69 2d       	mov	r22, r9
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x19c>
 b80:	6f ef       	ldi	r22, 0xFF	; 255
 b82:	7f ef       	ldi	r23, 0xFF	; 255
 b84:	c5 01       	movw	r24, r10
 b86:	2d d1       	rcall	.+602    	; 0xde2 <strnlen_P>
 b88:	4c 01       	movw	r8, r24
 b8a:	f3 2d       	mov	r31, r3
 b8c:	f0 68       	ori	r31, 0x80	; 128
 b8e:	3f 2e       	mov	r3, r31
 b90:	82 01       	movw	r16, r4
 b92:	33 fc       	sbrc	r3, 3
 b94:	19 c0       	rjmp	.+50     	; 0xbc8 <vfprintf+0x1e0>
 b96:	82 2d       	mov	r24, r2
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	88 16       	cp	r8, r24
 b9c:	99 06       	cpc	r9, r25
 b9e:	a0 f4       	brcc	.+40     	; 0xbc8 <vfprintf+0x1e0>
 ba0:	b6 01       	movw	r22, r12
 ba2:	80 e2       	ldi	r24, 0x20	; 32
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	33 d1       	rcall	.+614    	; 0xe0e <fputc>
 ba8:	2a 94       	dec	r2
 baa:	f5 cf       	rjmp	.-22     	; 0xb96 <vfprintf+0x1ae>
 bac:	f5 01       	movw	r30, r10
 bae:	37 fc       	sbrc	r3, 7
 bb0:	85 91       	lpm	r24, Z+
 bb2:	37 fe       	sbrs	r3, 7
 bb4:	81 91       	ld	r24, Z+
 bb6:	5f 01       	movw	r10, r30
 bb8:	b6 01       	movw	r22, r12
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	28 d1       	rcall	.+592    	; 0xe0e <fputc>
 bbe:	21 10       	cpse	r2, r1
 bc0:	2a 94       	dec	r2
 bc2:	21 e0       	ldi	r18, 0x01	; 1
 bc4:	82 1a       	sub	r8, r18
 bc6:	91 08       	sbc	r9, r1
 bc8:	81 14       	cp	r8, r1
 bca:	91 04       	cpc	r9, r1
 bcc:	79 f7       	brne	.-34     	; 0xbac <vfprintf+0x1c4>
 bce:	e1 c0       	rjmp	.+450    	; 0xd92 <vfprintf+0x3aa>
 bd0:	84 36       	cpi	r24, 0x64	; 100
 bd2:	11 f0       	breq	.+4      	; 0xbd8 <vfprintf+0x1f0>
 bd4:	89 36       	cpi	r24, 0x69	; 105
 bd6:	39 f5       	brne	.+78     	; 0xc26 <vfprintf+0x23e>
 bd8:	f8 01       	movw	r30, r16
 bda:	37 fe       	sbrs	r3, 7
 bdc:	07 c0       	rjmp	.+14     	; 0xbec <vfprintf+0x204>
 bde:	60 81       	ld	r22, Z
 be0:	71 81       	ldd	r23, Z+1	; 0x01
 be2:	82 81       	ldd	r24, Z+2	; 0x02
 be4:	93 81       	ldd	r25, Z+3	; 0x03
 be6:	0c 5f       	subi	r16, 0xFC	; 252
 be8:	1f 4f       	sbci	r17, 0xFF	; 255
 bea:	08 c0       	rjmp	.+16     	; 0xbfc <vfprintf+0x214>
 bec:	60 81       	ld	r22, Z
 bee:	71 81       	ldd	r23, Z+1	; 0x01
 bf0:	07 2e       	mov	r0, r23
 bf2:	00 0c       	add	r0, r0
 bf4:	88 0b       	sbc	r24, r24
 bf6:	99 0b       	sbc	r25, r25
 bf8:	0e 5f       	subi	r16, 0xFE	; 254
 bfa:	1f 4f       	sbci	r17, 0xFF	; 255
 bfc:	f3 2d       	mov	r31, r3
 bfe:	ff 76       	andi	r31, 0x6F	; 111
 c00:	3f 2e       	mov	r3, r31
 c02:	97 ff       	sbrs	r25, 7
 c04:	09 c0       	rjmp	.+18     	; 0xc18 <vfprintf+0x230>
 c06:	90 95       	com	r25
 c08:	80 95       	com	r24
 c0a:	70 95       	com	r23
 c0c:	61 95       	neg	r22
 c0e:	7f 4f       	sbci	r23, 0xFF	; 255
 c10:	8f 4f       	sbci	r24, 0xFF	; 255
 c12:	9f 4f       	sbci	r25, 0xFF	; 255
 c14:	f0 68       	ori	r31, 0x80	; 128
 c16:	3f 2e       	mov	r3, r31
 c18:	2a e0       	ldi	r18, 0x0A	; 10
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	a3 01       	movw	r20, r6
 c1e:	33 d1       	rcall	.+614    	; 0xe86 <__ultoa_invert>
 c20:	88 2e       	mov	r8, r24
 c22:	86 18       	sub	r8, r6
 c24:	44 c0       	rjmp	.+136    	; 0xcae <vfprintf+0x2c6>
 c26:	85 37       	cpi	r24, 0x75	; 117
 c28:	31 f4       	brne	.+12     	; 0xc36 <vfprintf+0x24e>
 c2a:	23 2d       	mov	r18, r3
 c2c:	2f 7e       	andi	r18, 0xEF	; 239
 c2e:	b2 2e       	mov	r11, r18
 c30:	2a e0       	ldi	r18, 0x0A	; 10
 c32:	30 e0       	ldi	r19, 0x00	; 0
 c34:	25 c0       	rjmp	.+74     	; 0xc80 <vfprintf+0x298>
 c36:	93 2d       	mov	r25, r3
 c38:	99 7f       	andi	r25, 0xF9	; 249
 c3a:	b9 2e       	mov	r11, r25
 c3c:	8f 36       	cpi	r24, 0x6F	; 111
 c3e:	c1 f0       	breq	.+48     	; 0xc70 <vfprintf+0x288>
 c40:	18 f4       	brcc	.+6      	; 0xc48 <vfprintf+0x260>
 c42:	88 35       	cpi	r24, 0x58	; 88
 c44:	79 f0       	breq	.+30     	; 0xc64 <vfprintf+0x27c>
 c46:	ae c0       	rjmp	.+348    	; 0xda4 <vfprintf+0x3bc>
 c48:	80 37       	cpi	r24, 0x70	; 112
 c4a:	19 f0       	breq	.+6      	; 0xc52 <vfprintf+0x26a>
 c4c:	88 37       	cpi	r24, 0x78	; 120
 c4e:	21 f0       	breq	.+8      	; 0xc58 <vfprintf+0x270>
 c50:	a9 c0       	rjmp	.+338    	; 0xda4 <vfprintf+0x3bc>
 c52:	e9 2f       	mov	r30, r25
 c54:	e0 61       	ori	r30, 0x10	; 16
 c56:	be 2e       	mov	r11, r30
 c58:	b4 fe       	sbrs	r11, 4
 c5a:	0d c0       	rjmp	.+26     	; 0xc76 <vfprintf+0x28e>
 c5c:	fb 2d       	mov	r31, r11
 c5e:	f4 60       	ori	r31, 0x04	; 4
 c60:	bf 2e       	mov	r11, r31
 c62:	09 c0       	rjmp	.+18     	; 0xc76 <vfprintf+0x28e>
 c64:	34 fe       	sbrs	r3, 4
 c66:	0a c0       	rjmp	.+20     	; 0xc7c <vfprintf+0x294>
 c68:	29 2f       	mov	r18, r25
 c6a:	26 60       	ori	r18, 0x06	; 6
 c6c:	b2 2e       	mov	r11, r18
 c6e:	06 c0       	rjmp	.+12     	; 0xc7c <vfprintf+0x294>
 c70:	28 e0       	ldi	r18, 0x08	; 8
 c72:	30 e0       	ldi	r19, 0x00	; 0
 c74:	05 c0       	rjmp	.+10     	; 0xc80 <vfprintf+0x298>
 c76:	20 e1       	ldi	r18, 0x10	; 16
 c78:	30 e0       	ldi	r19, 0x00	; 0
 c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vfprintf+0x298>
 c7c:	20 e1       	ldi	r18, 0x10	; 16
 c7e:	32 e0       	ldi	r19, 0x02	; 2
 c80:	f8 01       	movw	r30, r16
 c82:	b7 fe       	sbrs	r11, 7
 c84:	07 c0       	rjmp	.+14     	; 0xc94 <vfprintf+0x2ac>
 c86:	60 81       	ld	r22, Z
 c88:	71 81       	ldd	r23, Z+1	; 0x01
 c8a:	82 81       	ldd	r24, Z+2	; 0x02
 c8c:	93 81       	ldd	r25, Z+3	; 0x03
 c8e:	0c 5f       	subi	r16, 0xFC	; 252
 c90:	1f 4f       	sbci	r17, 0xFF	; 255
 c92:	06 c0       	rjmp	.+12     	; 0xca0 <vfprintf+0x2b8>
 c94:	60 81       	ld	r22, Z
 c96:	71 81       	ldd	r23, Z+1	; 0x01
 c98:	80 e0       	ldi	r24, 0x00	; 0
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 5f       	subi	r16, 0xFE	; 254
 c9e:	1f 4f       	sbci	r17, 0xFF	; 255
 ca0:	a3 01       	movw	r20, r6
 ca2:	f1 d0       	rcall	.+482    	; 0xe86 <__ultoa_invert>
 ca4:	88 2e       	mov	r8, r24
 ca6:	86 18       	sub	r8, r6
 ca8:	fb 2d       	mov	r31, r11
 caa:	ff 77       	andi	r31, 0x7F	; 127
 cac:	3f 2e       	mov	r3, r31
 cae:	36 fe       	sbrs	r3, 6
 cb0:	0d c0       	rjmp	.+26     	; 0xccc <vfprintf+0x2e4>
 cb2:	23 2d       	mov	r18, r3
 cb4:	2e 7f       	andi	r18, 0xFE	; 254
 cb6:	a2 2e       	mov	r10, r18
 cb8:	89 14       	cp	r8, r9
 cba:	58 f4       	brcc	.+22     	; 0xcd2 <vfprintf+0x2ea>
 cbc:	34 fe       	sbrs	r3, 4
 cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <vfprintf+0x2ee>
 cc0:	32 fc       	sbrc	r3, 2
 cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <vfprintf+0x2ee>
 cc4:	83 2d       	mov	r24, r3
 cc6:	8e 7e       	andi	r24, 0xEE	; 238
 cc8:	a8 2e       	mov	r10, r24
 cca:	05 c0       	rjmp	.+10     	; 0xcd6 <vfprintf+0x2ee>
 ccc:	b8 2c       	mov	r11, r8
 cce:	a3 2c       	mov	r10, r3
 cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <vfprintf+0x2f0>
 cd2:	b8 2c       	mov	r11, r8
 cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <vfprintf+0x2f0>
 cd6:	b9 2c       	mov	r11, r9
 cd8:	a4 fe       	sbrs	r10, 4
 cda:	0f c0       	rjmp	.+30     	; 0xcfa <vfprintf+0x312>
 cdc:	fe 01       	movw	r30, r28
 cde:	e8 0d       	add	r30, r8
 ce0:	f1 1d       	adc	r31, r1
 ce2:	80 81       	ld	r24, Z
 ce4:	80 33       	cpi	r24, 0x30	; 48
 ce6:	21 f4       	brne	.+8      	; 0xcf0 <vfprintf+0x308>
 ce8:	9a 2d       	mov	r25, r10
 cea:	99 7e       	andi	r25, 0xE9	; 233
 cec:	a9 2e       	mov	r10, r25
 cee:	09 c0       	rjmp	.+18     	; 0xd02 <vfprintf+0x31a>
 cf0:	a2 fe       	sbrs	r10, 2
 cf2:	06 c0       	rjmp	.+12     	; 0xd00 <vfprintf+0x318>
 cf4:	b3 94       	inc	r11
 cf6:	b3 94       	inc	r11
 cf8:	04 c0       	rjmp	.+8      	; 0xd02 <vfprintf+0x31a>
 cfa:	8a 2d       	mov	r24, r10
 cfc:	86 78       	andi	r24, 0x86	; 134
 cfe:	09 f0       	breq	.+2      	; 0xd02 <vfprintf+0x31a>
 d00:	b3 94       	inc	r11
 d02:	a3 fc       	sbrc	r10, 3
 d04:	10 c0       	rjmp	.+32     	; 0xd26 <vfprintf+0x33e>
 d06:	a0 fe       	sbrs	r10, 0
 d08:	06 c0       	rjmp	.+12     	; 0xd16 <vfprintf+0x32e>
 d0a:	b2 14       	cp	r11, r2
 d0c:	80 f4       	brcc	.+32     	; 0xd2e <vfprintf+0x346>
 d0e:	28 0c       	add	r2, r8
 d10:	92 2c       	mov	r9, r2
 d12:	9b 18       	sub	r9, r11
 d14:	0d c0       	rjmp	.+26     	; 0xd30 <vfprintf+0x348>
 d16:	b2 14       	cp	r11, r2
 d18:	58 f4       	brcc	.+22     	; 0xd30 <vfprintf+0x348>
 d1a:	b6 01       	movw	r22, r12
 d1c:	80 e2       	ldi	r24, 0x20	; 32
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	76 d0       	rcall	.+236    	; 0xe0e <fputc>
 d22:	b3 94       	inc	r11
 d24:	f8 cf       	rjmp	.-16     	; 0xd16 <vfprintf+0x32e>
 d26:	b2 14       	cp	r11, r2
 d28:	18 f4       	brcc	.+6      	; 0xd30 <vfprintf+0x348>
 d2a:	2b 18       	sub	r2, r11
 d2c:	02 c0       	rjmp	.+4      	; 0xd32 <vfprintf+0x34a>
 d2e:	98 2c       	mov	r9, r8
 d30:	21 2c       	mov	r2, r1
 d32:	a4 fe       	sbrs	r10, 4
 d34:	0f c0       	rjmp	.+30     	; 0xd54 <vfprintf+0x36c>
 d36:	b6 01       	movw	r22, r12
 d38:	80 e3       	ldi	r24, 0x30	; 48
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	68 d0       	rcall	.+208    	; 0xe0e <fputc>
 d3e:	a2 fe       	sbrs	r10, 2
 d40:	16 c0       	rjmp	.+44     	; 0xd6e <vfprintf+0x386>
 d42:	a1 fc       	sbrc	r10, 1
 d44:	03 c0       	rjmp	.+6      	; 0xd4c <vfprintf+0x364>
 d46:	88 e7       	ldi	r24, 0x78	; 120
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	02 c0       	rjmp	.+4      	; 0xd50 <vfprintf+0x368>
 d4c:	88 e5       	ldi	r24, 0x58	; 88
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	b6 01       	movw	r22, r12
 d52:	0c c0       	rjmp	.+24     	; 0xd6c <vfprintf+0x384>
 d54:	8a 2d       	mov	r24, r10
 d56:	86 78       	andi	r24, 0x86	; 134
 d58:	51 f0       	breq	.+20     	; 0xd6e <vfprintf+0x386>
 d5a:	a1 fe       	sbrs	r10, 1
 d5c:	02 c0       	rjmp	.+4      	; 0xd62 <vfprintf+0x37a>
 d5e:	8b e2       	ldi	r24, 0x2B	; 43
 d60:	01 c0       	rjmp	.+2      	; 0xd64 <vfprintf+0x37c>
 d62:	80 e2       	ldi	r24, 0x20	; 32
 d64:	a7 fc       	sbrc	r10, 7
 d66:	8d e2       	ldi	r24, 0x2D	; 45
 d68:	b6 01       	movw	r22, r12
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	50 d0       	rcall	.+160    	; 0xe0e <fputc>
 d6e:	89 14       	cp	r8, r9
 d70:	30 f4       	brcc	.+12     	; 0xd7e <vfprintf+0x396>
 d72:	b6 01       	movw	r22, r12
 d74:	80 e3       	ldi	r24, 0x30	; 48
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	4a d0       	rcall	.+148    	; 0xe0e <fputc>
 d7a:	9a 94       	dec	r9
 d7c:	f8 cf       	rjmp	.-16     	; 0xd6e <vfprintf+0x386>
 d7e:	8a 94       	dec	r8
 d80:	f3 01       	movw	r30, r6
 d82:	e8 0d       	add	r30, r8
 d84:	f1 1d       	adc	r31, r1
 d86:	80 81       	ld	r24, Z
 d88:	b6 01       	movw	r22, r12
 d8a:	90 e0       	ldi	r25, 0x00	; 0
 d8c:	40 d0       	rcall	.+128    	; 0xe0e <fputc>
 d8e:	81 10       	cpse	r8, r1
 d90:	f6 cf       	rjmp	.-20     	; 0xd7e <vfprintf+0x396>
 d92:	22 20       	and	r2, r2
 d94:	09 f4       	brne	.+2      	; 0xd98 <vfprintf+0x3b0>
 d96:	4e ce       	rjmp	.-868    	; 0xa34 <vfprintf+0x4c>
 d98:	b6 01       	movw	r22, r12
 d9a:	80 e2       	ldi	r24, 0x20	; 32
 d9c:	90 e0       	ldi	r25, 0x00	; 0
 d9e:	37 d0       	rcall	.+110    	; 0xe0e <fputc>
 da0:	2a 94       	dec	r2
 da2:	f7 cf       	rjmp	.-18     	; 0xd92 <vfprintf+0x3aa>
 da4:	f6 01       	movw	r30, r12
 da6:	86 81       	ldd	r24, Z+6	; 0x06
 da8:	97 81       	ldd	r25, Z+7	; 0x07
 daa:	02 c0       	rjmp	.+4      	; 0xdb0 <vfprintf+0x3c8>
 dac:	8f ef       	ldi	r24, 0xFF	; 255
 dae:	9f ef       	ldi	r25, 0xFF	; 255
 db0:	2b 96       	adiw	r28, 0x0b	; 11
 db2:	0f b6       	in	r0, 0x3f	; 63
 db4:	f8 94       	cli
 db6:	de bf       	out	0x3e, r29	; 62
 db8:	0f be       	out	0x3f, r0	; 63
 dba:	cd bf       	out	0x3d, r28	; 61
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	1f 91       	pop	r17
 dc2:	0f 91       	pop	r16
 dc4:	ff 90       	pop	r15
 dc6:	ef 90       	pop	r14
 dc8:	df 90       	pop	r13
 dca:	cf 90       	pop	r12
 dcc:	bf 90       	pop	r11
 dce:	af 90       	pop	r10
 dd0:	9f 90       	pop	r9
 dd2:	8f 90       	pop	r8
 dd4:	7f 90       	pop	r7
 dd6:	6f 90       	pop	r6
 dd8:	5f 90       	pop	r5
 dda:	4f 90       	pop	r4
 ddc:	3f 90       	pop	r3
 dde:	2f 90       	pop	r2
 de0:	08 95       	ret

00000de2 <strnlen_P>:
 de2:	fc 01       	movw	r30, r24
 de4:	05 90       	lpm	r0, Z+
 de6:	61 50       	subi	r22, 0x01	; 1
 de8:	70 40       	sbci	r23, 0x00	; 0
 dea:	01 10       	cpse	r0, r1
 dec:	d8 f7       	brcc	.-10     	; 0xde4 <strnlen_P+0x2>
 dee:	80 95       	com	r24
 df0:	90 95       	com	r25
 df2:	8e 0f       	add	r24, r30
 df4:	9f 1f       	adc	r25, r31
 df6:	08 95       	ret

00000df8 <strnlen>:
 df8:	fc 01       	movw	r30, r24
 dfa:	61 50       	subi	r22, 0x01	; 1
 dfc:	70 40       	sbci	r23, 0x00	; 0
 dfe:	01 90       	ld	r0, Z+
 e00:	01 10       	cpse	r0, r1
 e02:	d8 f7       	brcc	.-10     	; 0xdfa <strnlen+0x2>
 e04:	80 95       	com	r24
 e06:	90 95       	com	r25
 e08:	8e 0f       	add	r24, r30
 e0a:	9f 1f       	adc	r25, r31
 e0c:	08 95       	ret

00000e0e <fputc>:
 e0e:	0f 93       	push	r16
 e10:	1f 93       	push	r17
 e12:	cf 93       	push	r28
 e14:	df 93       	push	r29
 e16:	fb 01       	movw	r30, r22
 e18:	23 81       	ldd	r18, Z+3	; 0x03
 e1a:	21 fd       	sbrc	r18, 1
 e1c:	03 c0       	rjmp	.+6      	; 0xe24 <fputc+0x16>
 e1e:	8f ef       	ldi	r24, 0xFF	; 255
 e20:	9f ef       	ldi	r25, 0xFF	; 255
 e22:	2c c0       	rjmp	.+88     	; 0xe7c <fputc+0x6e>
 e24:	22 ff       	sbrs	r18, 2
 e26:	16 c0       	rjmp	.+44     	; 0xe54 <fputc+0x46>
 e28:	46 81       	ldd	r20, Z+6	; 0x06
 e2a:	57 81       	ldd	r21, Z+7	; 0x07
 e2c:	24 81       	ldd	r18, Z+4	; 0x04
 e2e:	35 81       	ldd	r19, Z+5	; 0x05
 e30:	42 17       	cp	r20, r18
 e32:	53 07       	cpc	r21, r19
 e34:	44 f4       	brge	.+16     	; 0xe46 <fputc+0x38>
 e36:	a0 81       	ld	r26, Z
 e38:	b1 81       	ldd	r27, Z+1	; 0x01
 e3a:	9d 01       	movw	r18, r26
 e3c:	2f 5f       	subi	r18, 0xFF	; 255
 e3e:	3f 4f       	sbci	r19, 0xFF	; 255
 e40:	31 83       	std	Z+1, r19	; 0x01
 e42:	20 83       	st	Z, r18
 e44:	8c 93       	st	X, r24
 e46:	26 81       	ldd	r18, Z+6	; 0x06
 e48:	37 81       	ldd	r19, Z+7	; 0x07
 e4a:	2f 5f       	subi	r18, 0xFF	; 255
 e4c:	3f 4f       	sbci	r19, 0xFF	; 255
 e4e:	37 83       	std	Z+7, r19	; 0x07
 e50:	26 83       	std	Z+6, r18	; 0x06
 e52:	14 c0       	rjmp	.+40     	; 0xe7c <fputc+0x6e>
 e54:	8b 01       	movw	r16, r22
 e56:	ec 01       	movw	r28, r24
 e58:	fb 01       	movw	r30, r22
 e5a:	00 84       	ldd	r0, Z+8	; 0x08
 e5c:	f1 85       	ldd	r31, Z+9	; 0x09
 e5e:	e0 2d       	mov	r30, r0
 e60:	09 95       	icall
 e62:	89 2b       	or	r24, r25
 e64:	e1 f6       	brne	.-72     	; 0xe1e <fputc+0x10>
 e66:	d8 01       	movw	r26, r16
 e68:	16 96       	adiw	r26, 0x06	; 6
 e6a:	8d 91       	ld	r24, X+
 e6c:	9c 91       	ld	r25, X
 e6e:	17 97       	sbiw	r26, 0x07	; 7
 e70:	01 96       	adiw	r24, 0x01	; 1
 e72:	17 96       	adiw	r26, 0x07	; 7
 e74:	9c 93       	st	X, r25
 e76:	8e 93       	st	-X, r24
 e78:	16 97       	sbiw	r26, 0x06	; 6
 e7a:	ce 01       	movw	r24, r28
 e7c:	df 91       	pop	r29
 e7e:	cf 91       	pop	r28
 e80:	1f 91       	pop	r17
 e82:	0f 91       	pop	r16
 e84:	08 95       	ret

00000e86 <__ultoa_invert>:
 e86:	fa 01       	movw	r30, r20
 e88:	aa 27       	eor	r26, r26
 e8a:	28 30       	cpi	r18, 0x08	; 8
 e8c:	51 f1       	breq	.+84     	; 0xee2 <__ultoa_invert+0x5c>
 e8e:	20 31       	cpi	r18, 0x10	; 16
 e90:	81 f1       	breq	.+96     	; 0xef2 <__ultoa_invert+0x6c>
 e92:	e8 94       	clt
 e94:	6f 93       	push	r22
 e96:	6e 7f       	andi	r22, 0xFE	; 254
 e98:	6e 5f       	subi	r22, 0xFE	; 254
 e9a:	7f 4f       	sbci	r23, 0xFF	; 255
 e9c:	8f 4f       	sbci	r24, 0xFF	; 255
 e9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ea0:	af 4f       	sbci	r26, 0xFF	; 255
 ea2:	b1 e0       	ldi	r27, 0x01	; 1
 ea4:	3e d0       	rcall	.+124    	; 0xf22 <__ultoa_invert+0x9c>
 ea6:	b4 e0       	ldi	r27, 0x04	; 4
 ea8:	3c d0       	rcall	.+120    	; 0xf22 <__ultoa_invert+0x9c>
 eaa:	67 0f       	add	r22, r23
 eac:	78 1f       	adc	r23, r24
 eae:	89 1f       	adc	r24, r25
 eb0:	9a 1f       	adc	r25, r26
 eb2:	a1 1d       	adc	r26, r1
 eb4:	68 0f       	add	r22, r24
 eb6:	79 1f       	adc	r23, r25
 eb8:	8a 1f       	adc	r24, r26
 eba:	91 1d       	adc	r25, r1
 ebc:	a1 1d       	adc	r26, r1
 ebe:	6a 0f       	add	r22, r26
 ec0:	71 1d       	adc	r23, r1
 ec2:	81 1d       	adc	r24, r1
 ec4:	91 1d       	adc	r25, r1
 ec6:	a1 1d       	adc	r26, r1
 ec8:	20 d0       	rcall	.+64     	; 0xf0a <__ultoa_invert+0x84>
 eca:	09 f4       	brne	.+2      	; 0xece <__ultoa_invert+0x48>
 ecc:	68 94       	set
 ece:	3f 91       	pop	r19
 ed0:	2a e0       	ldi	r18, 0x0A	; 10
 ed2:	26 9f       	mul	r18, r22
 ed4:	11 24       	eor	r1, r1
 ed6:	30 19       	sub	r19, r0
 ed8:	30 5d       	subi	r19, 0xD0	; 208
 eda:	31 93       	st	Z+, r19
 edc:	de f6       	brtc	.-74     	; 0xe94 <__ultoa_invert+0xe>
 ede:	cf 01       	movw	r24, r30
 ee0:	08 95       	ret
 ee2:	46 2f       	mov	r20, r22
 ee4:	47 70       	andi	r20, 0x07	; 7
 ee6:	40 5d       	subi	r20, 0xD0	; 208
 ee8:	41 93       	st	Z+, r20
 eea:	b3 e0       	ldi	r27, 0x03	; 3
 eec:	0f d0       	rcall	.+30     	; 0xf0c <__ultoa_invert+0x86>
 eee:	c9 f7       	brne	.-14     	; 0xee2 <__ultoa_invert+0x5c>
 ef0:	f6 cf       	rjmp	.-20     	; 0xede <__ultoa_invert+0x58>
 ef2:	46 2f       	mov	r20, r22
 ef4:	4f 70       	andi	r20, 0x0F	; 15
 ef6:	40 5d       	subi	r20, 0xD0	; 208
 ef8:	4a 33       	cpi	r20, 0x3A	; 58
 efa:	18 f0       	brcs	.+6      	; 0xf02 <__ultoa_invert+0x7c>
 efc:	49 5d       	subi	r20, 0xD9	; 217
 efe:	31 fd       	sbrc	r19, 1
 f00:	40 52       	subi	r20, 0x20	; 32
 f02:	41 93       	st	Z+, r20
 f04:	02 d0       	rcall	.+4      	; 0xf0a <__ultoa_invert+0x84>
 f06:	a9 f7       	brne	.-22     	; 0xef2 <__ultoa_invert+0x6c>
 f08:	ea cf       	rjmp	.-44     	; 0xede <__ultoa_invert+0x58>
 f0a:	b4 e0       	ldi	r27, 0x04	; 4
 f0c:	a6 95       	lsr	r26
 f0e:	97 95       	ror	r25
 f10:	87 95       	ror	r24
 f12:	77 95       	ror	r23
 f14:	67 95       	ror	r22
 f16:	ba 95       	dec	r27
 f18:	c9 f7       	brne	.-14     	; 0xf0c <__ultoa_invert+0x86>
 f1a:	00 97       	sbiw	r24, 0x00	; 0
 f1c:	61 05       	cpc	r22, r1
 f1e:	71 05       	cpc	r23, r1
 f20:	08 95       	ret
 f22:	9b 01       	movw	r18, r22
 f24:	ac 01       	movw	r20, r24
 f26:	0a 2e       	mov	r0, r26
 f28:	06 94       	lsr	r0
 f2a:	57 95       	ror	r21
 f2c:	47 95       	ror	r20
 f2e:	37 95       	ror	r19
 f30:	27 95       	ror	r18
 f32:	ba 95       	dec	r27
 f34:	c9 f7       	brne	.-14     	; 0xf28 <__ultoa_invert+0xa2>
 f36:	62 0f       	add	r22, r18
 f38:	73 1f       	adc	r23, r19
 f3a:	84 1f       	adc	r24, r20
 f3c:	95 1f       	adc	r25, r21
 f3e:	a0 1d       	adc	r26, r0
 f40:	08 95       	ret

00000f42 <__divmodsi4>:
 f42:	05 2e       	mov	r0, r21
 f44:	97 fb       	bst	r25, 7
 f46:	16 f4       	brtc	.+4      	; 0xf4c <__divmodsi4+0xa>
 f48:	00 94       	com	r0
 f4a:	0f d0       	rcall	.+30     	; 0xf6a <__negsi2>
 f4c:	57 fd       	sbrc	r21, 7
 f4e:	05 d0       	rcall	.+10     	; 0xf5a <__divmodsi4_neg2>
 f50:	92 dc       	rcall	.-1756   	; 0x876 <__udivmodsi4>
 f52:	07 fc       	sbrc	r0, 7
 f54:	02 d0       	rcall	.+4      	; 0xf5a <__divmodsi4_neg2>
 f56:	46 f4       	brtc	.+16     	; 0xf68 <__divmodsi4_exit>
 f58:	08 c0       	rjmp	.+16     	; 0xf6a <__negsi2>

00000f5a <__divmodsi4_neg2>:
 f5a:	50 95       	com	r21
 f5c:	40 95       	com	r20
 f5e:	30 95       	com	r19
 f60:	21 95       	neg	r18
 f62:	3f 4f       	sbci	r19, 0xFF	; 255
 f64:	4f 4f       	sbci	r20, 0xFF	; 255
 f66:	5f 4f       	sbci	r21, 0xFF	; 255

00000f68 <__divmodsi4_exit>:
 f68:	08 95       	ret

00000f6a <__negsi2>:
 f6a:	90 95       	com	r25
 f6c:	80 95       	com	r24
 f6e:	70 95       	com	r23
 f70:	61 95       	neg	r22
 f72:	7f 4f       	sbci	r23, 0xFF	; 255
 f74:	8f 4f       	sbci	r24, 0xFF	; 255
 f76:	9f 4f       	sbci	r25, 0xFF	; 255
 f78:	08 95       	ret

00000f7a <__muluhisi3>:
 f7a:	0f d0       	rcall	.+30     	; 0xf9a <__umulhisi3>
 f7c:	a5 9f       	mul	r26, r21
 f7e:	90 0d       	add	r25, r0
 f80:	b4 9f       	mul	r27, r20
 f82:	90 0d       	add	r25, r0
 f84:	a4 9f       	mul	r26, r20
 f86:	80 0d       	add	r24, r0
 f88:	91 1d       	adc	r25, r1
 f8a:	11 24       	eor	r1, r1
 f8c:	08 95       	ret

00000f8e <__mulshisi3>:
 f8e:	b7 ff       	sbrs	r27, 7
 f90:	f4 cf       	rjmp	.-24     	; 0xf7a <__muluhisi3>

00000f92 <__mulohisi3>:
 f92:	f3 df       	rcall	.-26     	; 0xf7a <__muluhisi3>
 f94:	82 1b       	sub	r24, r18
 f96:	93 0b       	sbc	r25, r19
 f98:	08 95       	ret

00000f9a <__umulhisi3>:
 f9a:	a2 9f       	mul	r26, r18
 f9c:	b0 01       	movw	r22, r0
 f9e:	b3 9f       	mul	r27, r19
 fa0:	c0 01       	movw	r24, r0
 fa2:	a3 9f       	mul	r26, r19
 fa4:	70 0d       	add	r23, r0
 fa6:	81 1d       	adc	r24, r1
 fa8:	11 24       	eor	r1, r1
 faa:	91 1d       	adc	r25, r1
 fac:	b2 9f       	mul	r27, r18
 fae:	70 0d       	add	r23, r0
 fb0:	81 1d       	adc	r24, r1
 fb2:	11 24       	eor	r1, r1
 fb4:	91 1d       	adc	r25, r1
 fb6:	08 95       	ret

00000fb8 <_exit>:
 fb8:	f8 94       	cli

00000fba <__stop_program>:
 fba:	ff cf       	rjmp	.-2      	; 0xfba <__stop_program>
