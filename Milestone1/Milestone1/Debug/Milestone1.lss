
Milestone1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000dd0  00000e64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  0080014a  0080014a  00000eae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122f  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2a  00000000  00000000  00002283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091f  00000000  00000000  00002cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000035cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076f  00000000  00000000  000038a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099b  00000000  00000000  00004017  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000049b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	b4 c1       	rjmp	.+872    	; 0x37e <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 34       	cpi	r26, 0x4A	; 74
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e4       	ldi	r26, 0x4A	; 74
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 38       	cpi	r26, 0x87	; 135
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2a d2       	rcall	.+1108   	; 0x518 <main>
  c4:	83 c6       	rjmp	.+3334   	; 0xdcc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 17c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 180:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 184:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
 188:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <_avr_timer_cntcurr>
 18c:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <_avr_timer_cntcurr+0x1>
 190:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <_avr_timer_cntcurr+0x2>
 194:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <_avr_timer_cntcurr+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 1be:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 1c2:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 1c6:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 1ca:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <_avr_timer_cntcurr>
 1ce:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <_avr_timer_cntcurr+0x1>
 1d2:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <_avr_timer_cntcurr+0x2>
 1d6:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <_avr_timer_cntcurr+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <_avr_timer_cntcurr>
 1f8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <_avr_timer_cntcurr+0x1>
 1fc:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <_avr_timer_cntcurr+0x2>
 200:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <_avr_timer_cntcurr+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <_avr_timer_cntcurr>
 20e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <_avr_timer_cntcurr+0x1>
 212:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <_avr_timer_cntcurr+0x2>
 216:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <_avr_timer_cntcurr+0x3>
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <TimerFlag>
 228:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 22c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 230:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 234:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 238:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <_avr_timer_cntcurr>
 23c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <_avr_timer_cntcurr+0x1>
 240:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <_avr_timer_cntcurr+0x2>
 244:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <_avr_timer_cntcurr+0x3>
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <initUSART>:
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	81 f0       	breq	.+32     	; 0x27e <initUSART+0x24>
 25e:	e1 ec       	ldi	r30, 0xC1	; 193
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 61       	ori	r24, 0x18	; 24
 266:	80 83       	st	Z, r24
 268:	e2 ec       	ldi	r30, 0xC2	; 194
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	80 83       	st	Z, r24
 272:	8c e0       	ldi	r24, 0x0C	; 12
 274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 27c:	08 95       	ret
 27e:	e9 ec       	ldi	r30, 0xC9	; 201
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 61       	ori	r24, 0x18	; 24
 286:	80 83       	st	Z, r24
 288:	ea ec       	ldi	r30, 0xCA	; 202
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	80 83       	st	Z, r24
 292:	8c e0       	ldi	r24, 0x0C	; 12
 294:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 298:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 29c:	08 95       	ret

0000029e <USART_Send>:
 29e:	61 30       	cpi	r22, 0x01	; 1
 2a0:	41 f0       	breq	.+16     	; 0x2b2 <USART_Send+0x14>
 2a2:	e0 ec       	ldi	r30, 0xC0	; 192
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	90 81       	ld	r25, Z
 2a8:	95 ff       	sbrs	r25, 5
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <USART_Send+0x8>
 2ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2b0:	08 95       	ret
 2b2:	e8 ec       	ldi	r30, 0xC8	; 200
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	90 81       	ld	r25, Z
 2b8:	95 ff       	sbrs	r25, 5
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <USART_Send+0x18>
 2bc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2c0:	08 95       	ret

000002c2 <DisplayString>:
	pins = (PINB & 0x03);
	hitCheck(pins);
}


void DisplayString( unsigned char column, const unsigned char* string) {
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
 2c8:	fb 01       	movw	r30, r22
 2ca:	90 81       	ld	r25, Z
 2cc:	99 23       	and	r25, r25
 2ce:	51 f0       	breq	.+20     	; 0x2e4 <DisplayString+0x22>
 2d0:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 2d2:	11 e0       	ldi	r17, 0x01	; 1
 2d4:	18 0f       	add	r17, r24
 2d6:	17 df       	rcall	.-466    	; 0x106 <LCD_Cursor>
		LCD_WriteData(*string++);
 2d8:	89 91       	ld	r24, Y+
 2da:	2c df       	rcall	.-424    	; 0x134 <LCD_WriteData>


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 2dc:	81 2f       	mov	r24, r17
}


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
 2de:	98 81       	ld	r25, Y
 2e0:	91 11       	cpse	r25, r1
 2e2:	f7 cf       	rjmp	.-18     	; 0x2d2 <DisplayString+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	08 95       	ret

000002ec <LCDDisplaySM>:
	return targetSelectState;
}

enum LCDDisplayStates{LCDDisplaySM_update, LCDDisplaySM_GameOver};
int LCDDisplaySM(int LCDDisplayState){
	switch(LCDDisplayState){
 2ec:	89 2b       	or	r24, r25
 2ee:	09 f5       	brne	.+66     	; 0x332 <LCDDisplaySM+0x46>
		case LCDDisplaySM_update:
		sprintf(combineString,"Time: %02d        Score: %d",timeLeft,score);
 2f0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <score+0x1>
 2f4:	8f 93       	push	r24
 2f6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <score>
 2fa:	8f 93       	push	r24
 2fc:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <timeLeft+0x1>
 300:	8f 93       	push	r24
 302:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <timeLeft>
 306:	8f 93       	push	r24
 308:	8e e0       	ldi	r24, 0x0E	; 14
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	9f 93       	push	r25
 30e:	8f 93       	push	r24
 310:	8f e7       	ldi	r24, 0x7F	; 127
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	9f 93       	push	r25
 316:	8f 93       	push	r24
 318:	43 d2       	rcall	.+1158   	; 0x7a0 <sprintf>
		DisplayString(1,combineString);
 31a:	6f e7       	ldi	r22, 0x7F	; 127
 31c:	71 e0       	ldi	r23, 0x01	; 1
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	d0 df       	rcall	.-96     	; 0x2c2 <DisplayString>
		LCDDisplayState = LCDDisplaySM_update;

		break;
 322:	8d b7       	in	r24, 0x3d	; 61
 324:	9e b7       	in	r25, 0x3e	; 62
 326:	08 96       	adiw	r24, 0x08	; 8
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	9e bf       	out	0x3e, r25	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	8d bf       	out	0x3d, r24	; 61

		default:
		LCDDisplayState = LCDDisplaySM_update;
	}
	return LCDDisplayState;
}
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	08 95       	ret

00000338 <sendToGun>:
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 338:	e0 ec       	ldi	r30, 0xC0	; 192
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	90 81       	ld	r25, Z

void sendToGun(unsigned char sendValue){
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
 33e:	95 ff       	sbrs	r25, 5
 340:	fd cf       	rjmp	.-6      	; 0x33c <sendToGun+0x4>
	USART_Send(sendValue,0);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	ac cf       	rjmp	.-168    	; 0x29e <USART_Send>
 346:	08 95       	ret

00000348 <hitCheck>:

void hitCheck(unsigned char pins){
	//Used by PCINT Interrupt to check whether correct target was hit, compare Target to IR receiver
	//Returns true if correct target was hit
	//TODO: Fix if statement if not correct
	if(pins == currTarget){
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <currTarget>
 34e:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <currTarget+0x1>
 352:	82 17       	cp	r24, r18
 354:	93 07       	cpc	r25, r19
 356:	91 f4       	brne	.+36     	; 0x37c <hitCheck+0x34>
		if(ammoBack == 0){
 358:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ammoBack>
 35c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ammoBack+0x1>
 360:	89 2b       	or	r24, r25
 362:	19 f4       	brne	.+6      	; 0x36a <hitCheck+0x22>
			sendToGun(0x01);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	e7 df       	rcall	.-50     	; 0x338 <sendToGun>
		}
		score++;
 36a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <score>
 36e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <score+0x1>
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <score+0x1>
 378:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <score>
 37c:	08 95       	ret

0000037e <__vector_5>:
	}
	else{
		return;
	}
}
ISR(PCINT1_vect){
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	0b b6       	in	r0, 0x3b	; 59
 38a:	0f 92       	push	r0
 38c:	2f 93       	push	r18
 38e:	3f 93       	push	r19
 390:	4f 93       	push	r20
 392:	5f 93       	push	r21
 394:	6f 93       	push	r22
 396:	7f 93       	push	r23
 398:	8f 93       	push	r24
 39a:	9f 93       	push	r25
 39c:	af 93       	push	r26
 39e:	bf 93       	push	r27
 3a0:	ef 93       	push	r30
 3a2:	ff 93       	push	r31
	pins = (PINB & 0x03);
 3a4:	83 b1       	in	r24, 0x03	; 3
 3a6:	83 70       	andi	r24, 0x03	; 3
 3a8:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <pins>
	hitCheck(pins);
 3ac:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <pins>
 3b0:	cb df       	rcall	.-106    	; 0x348 <hitCheck>
}
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0b be       	out	0x3b, r0	; 59
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <randTarget>:
void sendToGun(unsigned char sendValue){
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
	USART_Send(sendValue,0);
}

void randTarget(){
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
	randomNumber = rand()%3;
 3dc:	d3 d1       	rcall	.+934    	; 0x784 <rand>
 3de:	c3 e0       	ldi	r28, 0x03	; 3
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
 3e2:	be 01       	movw	r22, r28
 3e4:	3f d1       	rcall	.+638    	; 0x664 <__divmodhi4>
 3e6:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <randomNumber+0x1>
 3ea:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <randomNumber>
	ammoBack = rand()% 3;
 3ee:	ca d1       	rcall	.+916    	; 0x784 <rand>
 3f0:	be 01       	movw	r22, r28
 3f2:	38 d1       	rcall	.+624    	; 0x664 <__divmodhi4>
 3f4:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <ammoBack+0x1>
 3f8:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <ammoBack>
 3fc:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <randomNumber>
	if(randomNumber == 0){
 400:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <randomNumber+0x1>
 404:	00 97       	sbiw	r24, 0x00	; 0
 406:	29 f4       	brne	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 408:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <currTarget+0x1>
			//White Light
		}
		else{
			//Green Light
		}
		currTarget = 0;
 40c:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <currTarget>
 410:	0f c0       	rjmp	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 412:	01 97       	sbiw	r24, 0x01	; 1
	}
	else if (randomNumber == 1){
 414:	39 f4       	brne	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 416:	81 e0       	ldi	r24, 0x01	; 1
			//White Light
		}
		else{
			//Green Light
		}		
		currTarget = 1;
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <currTarget+0x1>
 41e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <currTarget>
 422:	06 c0       	rjmp	.+12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 424:	82 e0       	ldi	r24, 0x02	; 2
			//White Light
		}
		else{
			//Green Light
		}
		currTarget = 2;
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <currTarget+0x1>
 42c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <currTarget>
 430:	df 91       	pop	r29
	}
	return;
}
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <targetSelectSM>:
 436:	81 30       	cpi	r24, 0x01	; 1
	return timerState;
}

enum targetSelectStates {targetSelectSM_init, targetSelectSM_targetSelect, targetSelectSM_hitWait};
int targetSelectSM(int targetSelectState){
	switch(targetSelectState){
 438:	91 05       	cpc	r25, r1
 43a:	61 f0       	breq	.+24     	; 0x454 <targetSelectSM+0x1e>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	91 05       	cpc	r25, r1
 440:	69 f0       	breq	.+26     	; 0x45c <targetSelectSM+0x26>
 442:	00 97       	sbiw	r24, 0x00	; 0
 444:	f1 f4       	brne	.+60     	; 0x482 <targetSelectSM+0x4c>
		case targetSelectSM_init:
		score = 0;
 446:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <score+0x1>
 44a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <score>
		targetSelectState = targetSelectSM_targetSelect;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
		break;
 452:	08 95       	ret

		case targetSelectSM_targetSelect:
		randTarget();
 454:	c1 df       	rcall	.-126    	; 0x3d8 <randTarget>
		targetSelectState = targetSelectSM_hitWait;
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	90 e0       	ldi	r25, 0x00	; 0
		break;
 45a:	08 95       	ret

		case targetSelectSM_hitWait:
		++wait;
 45c:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <wait>
 460:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <wait+0x1>
 464:	2f 5f       	subi	r18, 0xFF	; 255
 466:	3f 4f       	sbci	r19, 0xFF	; 255
 468:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <wait+0x1>
 46c:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <wait>
		if(wait == 10){ //2 Seconds is over, time to switch targets
 470:	2a 30       	cpi	r18, 0x0A	; 10
 472:	31 05       	cpc	r19, r1
 474:	31 f4       	brne	.+12     	; 0x482 <targetSelectSM+0x4c>
			wait = 0;
 476:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <wait+0x1>
 47a:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <wait>
			targetSelectState = targetSelectSM_targetSelect;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
			targetSelectState = targetSelectSM_hitWait;
		}
		break;
	}
	return targetSelectState;
}
 482:	08 95       	ret

00000484 <GameOver>:
		}
		currTarget = 2;
	}
	return;
}
void GameOver(){
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	c0 54       	subi	r28, 0x40	; 64
 48e:	d1 09       	sbc	r29, r1
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
	char gameOverString[64];
	sendToGun(0x02);
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	4d df       	rcall	.-358    	; 0x338 <sendToGun>
	sprintf(gameOverString,"Game Over,      Final Score: %d",score);
 49e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <score+0x1>
 4a2:	8f 93       	push	r24
 4a4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <score>
 4a8:	8f 93       	push	r24
 4aa:	8a e2       	ldi	r24, 0x2A	; 42
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	9f 93       	push	r25
 4b0:	8f 93       	push	r24
 4b2:	8e 01       	movw	r16, r28
 4b4:	0f 5f       	subi	r16, 0xFF	; 255
 4b6:	1f 4f       	sbci	r17, 0xFF	; 255
 4b8:	1f 93       	push	r17
 4ba:	0f 93       	push	r16
 4bc:	71 d1       	rcall	.+738    	; 0x7a0 <sprintf>
	LCD_DisplayString(1, gameOverString);
 4be:	b8 01       	movw	r22, r16
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	41 de       	rcall	.-894    	; 0x146 <LCD_DisplayString>
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <GameOver+0x4c>

000004d2 <timerSM>:
		LCD_WriteData(*string++);
	}
}
enum timerStates{timerSM_init, timerSM_Countdown, timerSM_GameOver};
int timerSM(int timerState){
	switch(timerState){
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	91 05       	cpc	r25, r1
 4d6:	71 f0       	breq	.+28     	; 0x4f4 <timerSM+0x22>
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	91 05       	cpc	r25, r1
 4dc:	d1 f0       	breq	.+52     	; 0x512 <timerSM+0x40>
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	d1 f4       	brne	.+52     	; 0x516 <timerSM+0x44>
		case timerSM_init:
		timeLeft = 60;
 4e2:	8c e3       	ldi	r24, 0x3C	; 60
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <timeLeft+0x1>
 4ea:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <timeLeft>
		timerState = timerSM_Countdown;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
		break;
 4f2:	08 95       	ret

		case timerSM_Countdown:
		if(timeLeft > 0){
 4f4:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <timeLeft>
 4f8:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <timeLeft+0x1>
 4fc:	21 15       	cp	r18, r1
 4fe:	31 05       	cpc	r19, r1
 500:	39 f0       	breq	.+14     	; 0x510 <timerSM+0x3e>
			timeLeft = timeLeft - 1;
 502:	21 50       	subi	r18, 0x01	; 1
 504:	31 09       	sbc	r19, r1
 506:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <timeLeft+0x1>
 50a:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <timeLeft>
 50e:	08 95       	ret
			timerState = timerSM_Countdown;
		}
		else{
			timerState = timerSM_GameOver;
			GameOver();
 510:	b9 df       	rcall	.-142    	; 0x484 <GameOver>
		}
		break;

		case timerSM_GameOver:
		timerState = timerSM_init;
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return timerState;
}
 516:	08 95       	ret

00000518 <main>:
	LCD_DisplayString(1, gameOverString);
	while(1);
}

int main(void)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	00 d0       	rcall	.+0      	; 0x51e <main+0x6>
 51e:	00 d0       	rcall	.+0      	; 0x520 <main+0x8>
 520:	00 d0       	rcall	.+0      	; 0x522 <main+0xa>
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62

	(PCMSK1) |= (1<< PCINT8);
 526:	ec e6       	ldi	r30, 0x6C	; 108
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	81 60       	ori	r24, 0x01	; 1
 52e:	80 83       	st	Z, r24
	(PCICR) |= (1<< PCIE1);
 530:	e8 e6       	ldi	r30, 0x68	; 104
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	82 60       	ori	r24, 0x02	; 2
 538:	80 83       	st	Z, r24
	sei();
 53a:	78 94       	sei
	DDRD = 0xFF; PORTD = 0x00;
 53c:	8f ef       	ldi	r24, 0xFF	; 255
 53e:	8a b9       	out	0x0a, r24	; 10
 540:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0XFF; PORTC = 0x00;
 542:	87 b9       	out	0x07, r24	; 7
 544:	18 b8       	out	0x08, r1	; 8
	DDRB = 0x00; PORTB = 0xFF;
 546:	14 b8       	out	0x04, r1	; 4
 548:	85 b9       	out	0x05, r24	; 5
	DDRA = 0xFF; PORTA = 0x00;
 54a:	81 b9       	out	0x01, r24	; 1
 54c:	12 b8       	out	0x02, r1	; 2
	LCD_init();
 54e:	e3 dd       	rcall	.-1082   	; 0x116 <LCD_init>
	initUSART(0);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	83 de       	rcall	.-762    	; 0x25a <initUSART>
	//====Task Scheduler Setup====
	static task task1;
	static task task2;
	static task task3;

	task *tasks[] = {&task1, &task2, &task3};
 554:	86 e0       	ldi	r24, 0x06	; 6
 556:	e8 e0       	ldi	r30, 0x08	; 8
 558:	f1 e0       	ldi	r31, 0x01	; 1
 55a:	de 01       	movw	r26, r28
 55c:	11 96       	adiw	r26, 0x01	; 1
 55e:	01 90       	ld	r0, Z+
 560:	0d 92       	st	X+, r0
 562:	8a 95       	dec	r24
 564:	e1 f7       	brne	.-8      	; 0x55e <main+0x46>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	task1.state = timerSM_init;
 566:	e0 e6       	ldi	r30, 0x60	; 96
 568:	f1 e0       	ldi	r31, 0x01	; 1
 56a:	10 82       	st	Z, r1
	task1.period = 1000;
 56c:	88 ee       	ldi	r24, 0xE8	; 232
 56e:	93 e0       	ldi	r25, 0x03	; 3
 570:	a0 e0       	ldi	r26, 0x00	; 0
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	81 83       	std	Z+1, r24	; 0x01
 576:	92 83       	std	Z+2, r25	; 0x02
 578:	a3 83       	std	Z+3, r26	; 0x03
 57a:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = task1.period;
 57c:	85 83       	std	Z+5, r24	; 0x05
 57e:	96 83       	std	Z+6, r25	; 0x06
 580:	a7 83       	std	Z+7, r26	; 0x07
 582:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &timerSM;
 584:	89 e6       	ldi	r24, 0x69	; 105
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	92 87       	std	Z+10, r25	; 0x0a
 58a:	81 87       	std	Z+9, r24	; 0x09

	task2.state = targetSelectSM_init;
 58c:	e5 e5       	ldi	r30, 0x55	; 85
 58e:	f1 e0       	ldi	r31, 0x01	; 1
 590:	10 82       	st	Z, r1
	task2.period = 200;
 592:	88 ec       	ldi	r24, 0xC8	; 200
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	a0 e0       	ldi	r26, 0x00	; 0
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	81 83       	std	Z+1, r24	; 0x01
 59c:	92 83       	std	Z+2, r25	; 0x02
 59e:	a3 83       	std	Z+3, r26	; 0x03
 5a0:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime = task2.period;
 5a2:	85 83       	std	Z+5, r24	; 0x05
 5a4:	96 83       	std	Z+6, r25	; 0x06
 5a6:	a7 83       	std	Z+7, r26	; 0x07
 5a8:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &targetSelectSM;
 5aa:	2b e1       	ldi	r18, 0x1B	; 27
 5ac:	32 e0       	ldi	r19, 0x02	; 2
 5ae:	32 87       	std	Z+10, r19	; 0x0a
 5b0:	21 87       	std	Z+9, r18	; 0x09

	task3.state = LCDDisplaySM_update;
 5b2:	ea e4       	ldi	r30, 0x4A	; 74
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	10 82       	st	Z, r1
	task3.period = 200;
 5b8:	81 83       	std	Z+1, r24	; 0x01
 5ba:	92 83       	std	Z+2, r25	; 0x02
 5bc:	a3 83       	std	Z+3, r26	; 0x03
 5be:	b4 83       	std	Z+4, r27	; 0x04
	task3.elapsedTime = task3.period;
 5c0:	85 83       	std	Z+5, r24	; 0x05
 5c2:	96 83       	std	Z+6, r25	; 0x06
 5c4:	a7 83       	std	Z+7, r26	; 0x07
 5c6:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &LCDDisplaySM;
 5c8:	86 e7       	ldi	r24, 0x76	; 118
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	92 87       	std	Z+10, r25	; 0x0a
 5ce:	81 87       	std	Z+9, r24	; 0x09

	TimerSet(200);
 5d0:	68 ec       	ldi	r22, 0xC8	; 200
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 5d8:	cf dd       	rcall	.-1122   	; 0x178 <TimerSet>
 5da:	df dd       	rcall	.-1090   	; 0x19a <TimerOn>
 5dc:	7e 01       	movw	r14, r28
 5de:	87 e0       	ldi	r24, 0x07	; 7
 5e0:	e8 0e       	add	r14, r24
 5e2:	f1 1c       	adc	r15, r1
 5e4:	de 01       	movw	r26, r28
 5e6:	11 96       	adiw	r26, 0x01	; 1
 5e8:	6d 01       	movw	r12, r26
	unsigned int i;
	//====End of Task Scheduler Setup====
    while (1)
    {
		for( i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period){
 5ea:	f6 01       	movw	r30, r12
 5ec:	01 91       	ld	r16, Z+
 5ee:	11 91       	ld	r17, Z+
 5f0:	6f 01       	movw	r12, r30
 5f2:	d8 01       	movw	r26, r16
 5f4:	15 96       	adiw	r26, 0x05	; 5
 5f6:	4d 91       	ld	r20, X+
 5f8:	5d 91       	ld	r21, X+
 5fa:	6d 91       	ld	r22, X+
 5fc:	7c 91       	ld	r23, X
 5fe:	18 97       	sbiw	r26, 0x08	; 8
 600:	11 96       	adiw	r26, 0x01	; 1
 602:	8d 91       	ld	r24, X+
 604:	9d 91       	ld	r25, X+
 606:	0d 90       	ld	r0, X+
 608:	bc 91       	ld	r27, X
 60a:	a0 2d       	mov	r26, r0
 60c:	48 17       	cp	r20, r24
 60e:	59 07       	cpc	r21, r25
 610:	6a 07       	cpc	r22, r26
 612:	7b 07       	cpc	r23, r27
 614:	81 f4       	brne	.+32     	; 0x636 <main+0x11e>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 616:	f8 01       	movw	r30, r16
 618:	80 81       	ld	r24, Z
 61a:	01 84       	ldd	r0, Z+9	; 0x09
 61c:	f2 85       	ldd	r31, Z+10	; 0x0a
 61e:	e0 2d       	mov	r30, r0
 620:	08 2e       	mov	r0, r24
 622:	00 0c       	add	r0, r0
 624:	99 0b       	sbc	r25, r25
 626:	09 95       	icall
 628:	d8 01       	movw	r26, r16
 62a:	8c 93       	st	X, r24
				tasks[i]->elapsedTime = 0;
 62c:	f8 01       	movw	r30, r16
 62e:	15 82       	std	Z+5, r1	; 0x05
 630:	16 82       	std	Z+6, r1	; 0x06
 632:	17 82       	std	Z+7, r1	; 0x07
 634:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i] ->elapsedTime += 200;
 636:	f8 01       	movw	r30, r16
 638:	85 81       	ldd	r24, Z+5	; 0x05
 63a:	96 81       	ldd	r25, Z+6	; 0x06
 63c:	a7 81       	ldd	r26, Z+7	; 0x07
 63e:	b0 85       	ldd	r27, Z+8	; 0x08
 640:	88 53       	subi	r24, 0x38	; 56
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	af 4f       	sbci	r26, 0xFF	; 255
 646:	bf 4f       	sbci	r27, 0xFF	; 255
 648:	85 83       	std	Z+5, r24	; 0x05
 64a:	96 83       	std	Z+6, r25	; 0x06
 64c:	a7 83       	std	Z+7, r26	; 0x07
 64e:	b0 87       	std	Z+8, r27	; 0x08
	TimerOn();
	unsigned int i;
	//====End of Task Scheduler Setup====
    while (1)
    {
		for( i = 0; i < numTasks; i++){
 650:	ce 14       	cp	r12, r14
 652:	df 04       	cpc	r13, r15
 654:	51 f6       	brne	.-108    	; 0x5ea <main+0xd2>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i] ->elapsedTime += 200;
		}
		while(!TimerFlag);
 656:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <TimerFlag>
 65a:	88 23       	and	r24, r24
 65c:	e1 f3       	breq	.-8      	; 0x656 <main+0x13e>
		TimerFlag = 0;
 65e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <TimerFlag>
    }
 662:	c0 cf       	rjmp	.-128    	; 0x5e4 <main+0xcc>

00000664 <__divmodhi4>:
 664:	97 fb       	bst	r25, 7
 666:	07 2e       	mov	r0, r23
 668:	16 f4       	brtc	.+4      	; 0x66e <__divmodhi4+0xa>
 66a:	00 94       	com	r0
 66c:	06 d0       	rcall	.+12     	; 0x67a <__divmodhi4_neg1>
 66e:	77 fd       	sbrc	r23, 7
 670:	08 d0       	rcall	.+16     	; 0x682 <__divmodhi4_neg2>
 672:	2d d0       	rcall	.+90     	; 0x6ce <__udivmodhi4>
 674:	07 fc       	sbrc	r0, 7
 676:	05 d0       	rcall	.+10     	; 0x682 <__divmodhi4_neg2>
 678:	3e f4       	brtc	.+14     	; 0x688 <__divmodhi4_exit>

0000067a <__divmodhi4_neg1>:
 67a:	90 95       	com	r25
 67c:	81 95       	neg	r24
 67e:	9f 4f       	sbci	r25, 0xFF	; 255
 680:	08 95       	ret

00000682 <__divmodhi4_neg2>:
 682:	70 95       	com	r23
 684:	61 95       	neg	r22
 686:	7f 4f       	sbci	r23, 0xFF	; 255

00000688 <__divmodhi4_exit>:
 688:	08 95       	ret

0000068a <__udivmodsi4>:
 68a:	a1 e2       	ldi	r26, 0x21	; 33
 68c:	1a 2e       	mov	r1, r26
 68e:	aa 1b       	sub	r26, r26
 690:	bb 1b       	sub	r27, r27
 692:	fd 01       	movw	r30, r26
 694:	0d c0       	rjmp	.+26     	; 0x6b0 <__udivmodsi4_ep>

00000696 <__udivmodsi4_loop>:
 696:	aa 1f       	adc	r26, r26
 698:	bb 1f       	adc	r27, r27
 69a:	ee 1f       	adc	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	a2 17       	cp	r26, r18
 6a0:	b3 07       	cpc	r27, r19
 6a2:	e4 07       	cpc	r30, r20
 6a4:	f5 07       	cpc	r31, r21
 6a6:	20 f0       	brcs	.+8      	; 0x6b0 <__udivmodsi4_ep>
 6a8:	a2 1b       	sub	r26, r18
 6aa:	b3 0b       	sbc	r27, r19
 6ac:	e4 0b       	sbc	r30, r20
 6ae:	f5 0b       	sbc	r31, r21

000006b0 <__udivmodsi4_ep>:
 6b0:	66 1f       	adc	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	88 1f       	adc	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	1a 94       	dec	r1
 6ba:	69 f7       	brne	.-38     	; 0x696 <__udivmodsi4_loop>
 6bc:	60 95       	com	r22
 6be:	70 95       	com	r23
 6c0:	80 95       	com	r24
 6c2:	90 95       	com	r25
 6c4:	9b 01       	movw	r18, r22
 6c6:	ac 01       	movw	r20, r24
 6c8:	bd 01       	movw	r22, r26
 6ca:	cf 01       	movw	r24, r30
 6cc:	08 95       	ret

000006ce <__udivmodhi4>:
 6ce:	aa 1b       	sub	r26, r26
 6d0:	bb 1b       	sub	r27, r27
 6d2:	51 e1       	ldi	r21, 0x11	; 17
 6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <__udivmodhi4_ep>

000006d6 <__udivmodhi4_loop>:
 6d6:	aa 1f       	adc	r26, r26
 6d8:	bb 1f       	adc	r27, r27
 6da:	a6 17       	cp	r26, r22
 6dc:	b7 07       	cpc	r27, r23
 6de:	10 f0       	brcs	.+4      	; 0x6e4 <__udivmodhi4_ep>
 6e0:	a6 1b       	sub	r26, r22
 6e2:	b7 0b       	sbc	r27, r23

000006e4 <__udivmodhi4_ep>:
 6e4:	88 1f       	adc	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	5a 95       	dec	r21
 6ea:	a9 f7       	brne	.-22     	; 0x6d6 <__udivmodhi4_loop>
 6ec:	80 95       	com	r24
 6ee:	90 95       	com	r25
 6f0:	bc 01       	movw	r22, r24
 6f2:	cd 01       	movw	r24, r26
 6f4:	08 95       	ret

000006f6 <do_rand>:
 6f6:	8f 92       	push	r8
 6f8:	9f 92       	push	r9
 6fa:	af 92       	push	r10
 6fc:	bf 92       	push	r11
 6fe:	cf 92       	push	r12
 700:	df 92       	push	r13
 702:	ef 92       	push	r14
 704:	ff 92       	push	r15
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	ec 01       	movw	r28, r24
 70c:	68 81       	ld	r22, Y
 70e:	79 81       	ldd	r23, Y+1	; 0x01
 710:	8a 81       	ldd	r24, Y+2	; 0x02
 712:	9b 81       	ldd	r25, Y+3	; 0x03
 714:	61 15       	cp	r22, r1
 716:	71 05       	cpc	r23, r1
 718:	81 05       	cpc	r24, r1
 71a:	91 05       	cpc	r25, r1
 71c:	21 f4       	brne	.+8      	; 0x726 <do_rand+0x30>
 71e:	64 e2       	ldi	r22, 0x24	; 36
 720:	79 ed       	ldi	r23, 0xD9	; 217
 722:	8b e5       	ldi	r24, 0x5B	; 91
 724:	97 e0       	ldi	r25, 0x07	; 7
 726:	2d e1       	ldi	r18, 0x1D	; 29
 728:	33 ef       	ldi	r19, 0xF3	; 243
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	50 e0       	ldi	r21, 0x00	; 0
 72e:	13 d3       	rcall	.+1574   	; 0xd56 <__divmodsi4>
 730:	49 01       	movw	r8, r18
 732:	5a 01       	movw	r10, r20
 734:	9b 01       	movw	r18, r22
 736:	ac 01       	movw	r20, r24
 738:	a7 ea       	ldi	r26, 0xA7	; 167
 73a:	b1 e4       	ldi	r27, 0x41	; 65
 73c:	28 d3       	rcall	.+1616   	; 0xd8e <__muluhisi3>
 73e:	6b 01       	movw	r12, r22
 740:	7c 01       	movw	r14, r24
 742:	ac ee       	ldi	r26, 0xEC	; 236
 744:	b4 ef       	ldi	r27, 0xF4	; 244
 746:	a5 01       	movw	r20, r10
 748:	94 01       	movw	r18, r8
 74a:	2d d3       	rcall	.+1626   	; 0xda6 <__mulohisi3>
 74c:	dc 01       	movw	r26, r24
 74e:	cb 01       	movw	r24, r22
 750:	8c 0d       	add	r24, r12
 752:	9d 1d       	adc	r25, r13
 754:	ae 1d       	adc	r26, r14
 756:	bf 1d       	adc	r27, r15
 758:	b7 ff       	sbrs	r27, 7
 75a:	03 c0       	rjmp	.+6      	; 0x762 <do_rand+0x6c>
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	a1 09       	sbc	r26, r1
 760:	b0 48       	sbci	r27, 0x80	; 128
 762:	88 83       	st	Y, r24
 764:	99 83       	std	Y+1, r25	; 0x01
 766:	aa 83       	std	Y+2, r26	; 0x02
 768:	bb 83       	std	Y+3, r27	; 0x03
 76a:	9f 77       	andi	r25, 0x7F	; 127
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	ff 90       	pop	r15
 772:	ef 90       	pop	r14
 774:	df 90       	pop	r13
 776:	cf 90       	pop	r12
 778:	bf 90       	pop	r11
 77a:	af 90       	pop	r10
 77c:	9f 90       	pop	r9
 77e:	8f 90       	pop	r8
 780:	08 95       	ret

00000782 <rand_r>:
 782:	b9 cf       	rjmp	.-142    	; 0x6f6 <do_rand>

00000784 <rand>:
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	b6 cf       	rjmp	.-148    	; 0x6f6 <do_rand>

0000078a <srand>:
 78a:	a0 e0       	ldi	r26, 0x00	; 0
 78c:	b0 e0       	ldi	r27, 0x00	; 0
 78e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 792:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 796:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 79a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 79e:	08 95       	ret

000007a0 <sprintf>:
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	cd b7       	in	r28, 0x3d	; 61
 7aa:	de b7       	in	r29, 0x3e	; 62
 7ac:	2e 97       	sbiw	r28, 0x0e	; 14
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	f8 94       	cli
 7b2:	de bf       	out	0x3e, r29	; 62
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	cd bf       	out	0x3d, r28	; 61
 7b8:	0d 89       	ldd	r16, Y+21	; 0x15
 7ba:	1e 89       	ldd	r17, Y+22	; 0x16
 7bc:	86 e0       	ldi	r24, 0x06	; 6
 7be:	8c 83       	std	Y+4, r24	; 0x04
 7c0:	1a 83       	std	Y+2, r17	; 0x02
 7c2:	09 83       	std	Y+1, r16	; 0x01
 7c4:	8f ef       	ldi	r24, 0xFF	; 255
 7c6:	9f e7       	ldi	r25, 0x7F	; 127
 7c8:	9e 83       	std	Y+6, r25	; 0x06
 7ca:	8d 83       	std	Y+5, r24	; 0x05
 7cc:	ae 01       	movw	r20, r28
 7ce:	47 5e       	subi	r20, 0xE7	; 231
 7d0:	5f 4f       	sbci	r21, 0xFF	; 255
 7d2:	6f 89       	ldd	r22, Y+23	; 0x17
 7d4:	78 8d       	ldd	r23, Y+24	; 0x18
 7d6:	ce 01       	movw	r24, r28
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	10 d0       	rcall	.+32     	; 0x7fc <vfprintf>
 7dc:	ef 81       	ldd	r30, Y+7	; 0x07
 7de:	f8 85       	ldd	r31, Y+8	; 0x08
 7e0:	e0 0f       	add	r30, r16
 7e2:	f1 1f       	adc	r31, r17
 7e4:	10 82       	st	Z, r1
 7e6:	2e 96       	adiw	r28, 0x0e	; 14
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	f8 94       	cli
 7ec:	de bf       	out	0x3e, r29	; 62
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	cd bf       	out	0x3d, r28	; 61
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	1f 91       	pop	r17
 7f8:	0f 91       	pop	r16
 7fa:	08 95       	ret

000007fc <vfprintf>:
 7fc:	2f 92       	push	r2
 7fe:	3f 92       	push	r3
 800:	4f 92       	push	r4
 802:	5f 92       	push	r5
 804:	6f 92       	push	r6
 806:	7f 92       	push	r7
 808:	8f 92       	push	r8
 80a:	9f 92       	push	r9
 80c:	af 92       	push	r10
 80e:	bf 92       	push	r11
 810:	cf 92       	push	r12
 812:	df 92       	push	r13
 814:	ef 92       	push	r14
 816:	ff 92       	push	r15
 818:	0f 93       	push	r16
 81a:	1f 93       	push	r17
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	cd b7       	in	r28, 0x3d	; 61
 822:	de b7       	in	r29, 0x3e	; 62
 824:	2b 97       	sbiw	r28, 0x0b	; 11
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	f8 94       	cli
 82a:	de bf       	out	0x3e, r29	; 62
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	cd bf       	out	0x3d, r28	; 61
 830:	6c 01       	movw	r12, r24
 832:	7b 01       	movw	r14, r22
 834:	8a 01       	movw	r16, r20
 836:	fc 01       	movw	r30, r24
 838:	17 82       	std	Z+7, r1	; 0x07
 83a:	16 82       	std	Z+6, r1	; 0x06
 83c:	83 81       	ldd	r24, Z+3	; 0x03
 83e:	81 ff       	sbrs	r24, 1
 840:	bf c1       	rjmp	.+894    	; 0xbc0 <vfprintf+0x3c4>
 842:	ce 01       	movw	r24, r28
 844:	01 96       	adiw	r24, 0x01	; 1
 846:	3c 01       	movw	r6, r24
 848:	f6 01       	movw	r30, r12
 84a:	93 81       	ldd	r25, Z+3	; 0x03
 84c:	f7 01       	movw	r30, r14
 84e:	93 fd       	sbrc	r25, 3
 850:	85 91       	lpm	r24, Z+
 852:	93 ff       	sbrs	r25, 3
 854:	81 91       	ld	r24, Z+
 856:	7f 01       	movw	r14, r30
 858:	88 23       	and	r24, r24
 85a:	09 f4       	brne	.+2      	; 0x85e <vfprintf+0x62>
 85c:	ad c1       	rjmp	.+858    	; 0xbb8 <vfprintf+0x3bc>
 85e:	85 32       	cpi	r24, 0x25	; 37
 860:	39 f4       	brne	.+14     	; 0x870 <vfprintf+0x74>
 862:	93 fd       	sbrc	r25, 3
 864:	85 91       	lpm	r24, Z+
 866:	93 ff       	sbrs	r25, 3
 868:	81 91       	ld	r24, Z+
 86a:	7f 01       	movw	r14, r30
 86c:	85 32       	cpi	r24, 0x25	; 37
 86e:	21 f4       	brne	.+8      	; 0x878 <vfprintf+0x7c>
 870:	b6 01       	movw	r22, r12
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	d6 d1       	rcall	.+940    	; 0xc22 <fputc>
 876:	e8 cf       	rjmp	.-48     	; 0x848 <vfprintf+0x4c>
 878:	91 2c       	mov	r9, r1
 87a:	21 2c       	mov	r2, r1
 87c:	31 2c       	mov	r3, r1
 87e:	ff e1       	ldi	r31, 0x1F	; 31
 880:	f3 15       	cp	r31, r3
 882:	d8 f0       	brcs	.+54     	; 0x8ba <vfprintf+0xbe>
 884:	8b 32       	cpi	r24, 0x2B	; 43
 886:	79 f0       	breq	.+30     	; 0x8a6 <vfprintf+0xaa>
 888:	38 f4       	brcc	.+14     	; 0x898 <vfprintf+0x9c>
 88a:	80 32       	cpi	r24, 0x20	; 32
 88c:	79 f0       	breq	.+30     	; 0x8ac <vfprintf+0xb0>
 88e:	83 32       	cpi	r24, 0x23	; 35
 890:	a1 f4       	brne	.+40     	; 0x8ba <vfprintf+0xbe>
 892:	23 2d       	mov	r18, r3
 894:	20 61       	ori	r18, 0x10	; 16
 896:	1d c0       	rjmp	.+58     	; 0x8d2 <vfprintf+0xd6>
 898:	8d 32       	cpi	r24, 0x2D	; 45
 89a:	61 f0       	breq	.+24     	; 0x8b4 <vfprintf+0xb8>
 89c:	80 33       	cpi	r24, 0x30	; 48
 89e:	69 f4       	brne	.+26     	; 0x8ba <vfprintf+0xbe>
 8a0:	23 2d       	mov	r18, r3
 8a2:	21 60       	ori	r18, 0x01	; 1
 8a4:	16 c0       	rjmp	.+44     	; 0x8d2 <vfprintf+0xd6>
 8a6:	83 2d       	mov	r24, r3
 8a8:	82 60       	ori	r24, 0x02	; 2
 8aa:	38 2e       	mov	r3, r24
 8ac:	e3 2d       	mov	r30, r3
 8ae:	e4 60       	ori	r30, 0x04	; 4
 8b0:	3e 2e       	mov	r3, r30
 8b2:	2a c0       	rjmp	.+84     	; 0x908 <vfprintf+0x10c>
 8b4:	f3 2d       	mov	r31, r3
 8b6:	f8 60       	ori	r31, 0x08	; 8
 8b8:	1d c0       	rjmp	.+58     	; 0x8f4 <vfprintf+0xf8>
 8ba:	37 fc       	sbrc	r3, 7
 8bc:	2d c0       	rjmp	.+90     	; 0x918 <vfprintf+0x11c>
 8be:	20 ed       	ldi	r18, 0xD0	; 208
 8c0:	28 0f       	add	r18, r24
 8c2:	2a 30       	cpi	r18, 0x0A	; 10
 8c4:	40 f0       	brcs	.+16     	; 0x8d6 <vfprintf+0xda>
 8c6:	8e 32       	cpi	r24, 0x2E	; 46
 8c8:	b9 f4       	brne	.+46     	; 0x8f8 <vfprintf+0xfc>
 8ca:	36 fc       	sbrc	r3, 6
 8cc:	75 c1       	rjmp	.+746    	; 0xbb8 <vfprintf+0x3bc>
 8ce:	23 2d       	mov	r18, r3
 8d0:	20 64       	ori	r18, 0x40	; 64
 8d2:	32 2e       	mov	r3, r18
 8d4:	19 c0       	rjmp	.+50     	; 0x908 <vfprintf+0x10c>
 8d6:	36 fe       	sbrs	r3, 6
 8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <vfprintf+0xea>
 8da:	8a e0       	ldi	r24, 0x0A	; 10
 8dc:	98 9e       	mul	r9, r24
 8de:	20 0d       	add	r18, r0
 8e0:	11 24       	eor	r1, r1
 8e2:	92 2e       	mov	r9, r18
 8e4:	11 c0       	rjmp	.+34     	; 0x908 <vfprintf+0x10c>
 8e6:	ea e0       	ldi	r30, 0x0A	; 10
 8e8:	2e 9e       	mul	r2, r30
 8ea:	20 0d       	add	r18, r0
 8ec:	11 24       	eor	r1, r1
 8ee:	22 2e       	mov	r2, r18
 8f0:	f3 2d       	mov	r31, r3
 8f2:	f0 62       	ori	r31, 0x20	; 32
 8f4:	3f 2e       	mov	r3, r31
 8f6:	08 c0       	rjmp	.+16     	; 0x908 <vfprintf+0x10c>
 8f8:	8c 36       	cpi	r24, 0x6C	; 108
 8fa:	21 f4       	brne	.+8      	; 0x904 <vfprintf+0x108>
 8fc:	83 2d       	mov	r24, r3
 8fe:	80 68       	ori	r24, 0x80	; 128
 900:	38 2e       	mov	r3, r24
 902:	02 c0       	rjmp	.+4      	; 0x908 <vfprintf+0x10c>
 904:	88 36       	cpi	r24, 0x68	; 104
 906:	41 f4       	brne	.+16     	; 0x918 <vfprintf+0x11c>
 908:	f7 01       	movw	r30, r14
 90a:	93 fd       	sbrc	r25, 3
 90c:	85 91       	lpm	r24, Z+
 90e:	93 ff       	sbrs	r25, 3
 910:	81 91       	ld	r24, Z+
 912:	7f 01       	movw	r14, r30
 914:	81 11       	cpse	r24, r1
 916:	b3 cf       	rjmp	.-154    	; 0x87e <vfprintf+0x82>
 918:	98 2f       	mov	r25, r24
 91a:	9f 7d       	andi	r25, 0xDF	; 223
 91c:	95 54       	subi	r25, 0x45	; 69
 91e:	93 30       	cpi	r25, 0x03	; 3
 920:	28 f4       	brcc	.+10     	; 0x92c <vfprintf+0x130>
 922:	0c 5f       	subi	r16, 0xFC	; 252
 924:	1f 4f       	sbci	r17, 0xFF	; 255
 926:	9f e3       	ldi	r25, 0x3F	; 63
 928:	99 83       	std	Y+1, r25	; 0x01
 92a:	0d c0       	rjmp	.+26     	; 0x946 <vfprintf+0x14a>
 92c:	83 36       	cpi	r24, 0x63	; 99
 92e:	31 f0       	breq	.+12     	; 0x93c <vfprintf+0x140>
 930:	83 37       	cpi	r24, 0x73	; 115
 932:	71 f0       	breq	.+28     	; 0x950 <vfprintf+0x154>
 934:	83 35       	cpi	r24, 0x53	; 83
 936:	09 f0       	breq	.+2      	; 0x93a <vfprintf+0x13e>
 938:	55 c0       	rjmp	.+170    	; 0x9e4 <vfprintf+0x1e8>
 93a:	20 c0       	rjmp	.+64     	; 0x97c <vfprintf+0x180>
 93c:	f8 01       	movw	r30, r16
 93e:	80 81       	ld	r24, Z
 940:	89 83       	std	Y+1, r24	; 0x01
 942:	0e 5f       	subi	r16, 0xFE	; 254
 944:	1f 4f       	sbci	r17, 0xFF	; 255
 946:	88 24       	eor	r8, r8
 948:	83 94       	inc	r8
 94a:	91 2c       	mov	r9, r1
 94c:	53 01       	movw	r10, r6
 94e:	12 c0       	rjmp	.+36     	; 0x974 <vfprintf+0x178>
 950:	28 01       	movw	r4, r16
 952:	f2 e0       	ldi	r31, 0x02	; 2
 954:	4f 0e       	add	r4, r31
 956:	51 1c       	adc	r5, r1
 958:	f8 01       	movw	r30, r16
 95a:	a0 80       	ld	r10, Z
 95c:	b1 80       	ldd	r11, Z+1	; 0x01
 95e:	36 fe       	sbrs	r3, 6
 960:	03 c0       	rjmp	.+6      	; 0x968 <vfprintf+0x16c>
 962:	69 2d       	mov	r22, r9
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	02 c0       	rjmp	.+4      	; 0x96c <vfprintf+0x170>
 968:	6f ef       	ldi	r22, 0xFF	; 255
 96a:	7f ef       	ldi	r23, 0xFF	; 255
 96c:	c5 01       	movw	r24, r10
 96e:	4e d1       	rcall	.+668    	; 0xc0c <strnlen>
 970:	4c 01       	movw	r8, r24
 972:	82 01       	movw	r16, r4
 974:	f3 2d       	mov	r31, r3
 976:	ff 77       	andi	r31, 0x7F	; 127
 978:	3f 2e       	mov	r3, r31
 97a:	15 c0       	rjmp	.+42     	; 0x9a6 <vfprintf+0x1aa>
 97c:	28 01       	movw	r4, r16
 97e:	22 e0       	ldi	r18, 0x02	; 2
 980:	42 0e       	add	r4, r18
 982:	51 1c       	adc	r5, r1
 984:	f8 01       	movw	r30, r16
 986:	a0 80       	ld	r10, Z
 988:	b1 80       	ldd	r11, Z+1	; 0x01
 98a:	36 fe       	sbrs	r3, 6
 98c:	03 c0       	rjmp	.+6      	; 0x994 <vfprintf+0x198>
 98e:	69 2d       	mov	r22, r9
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	02 c0       	rjmp	.+4      	; 0x998 <vfprintf+0x19c>
 994:	6f ef       	ldi	r22, 0xFF	; 255
 996:	7f ef       	ldi	r23, 0xFF	; 255
 998:	c5 01       	movw	r24, r10
 99a:	2d d1       	rcall	.+602    	; 0xbf6 <strnlen_P>
 99c:	4c 01       	movw	r8, r24
 99e:	f3 2d       	mov	r31, r3
 9a0:	f0 68       	ori	r31, 0x80	; 128
 9a2:	3f 2e       	mov	r3, r31
 9a4:	82 01       	movw	r16, r4
 9a6:	33 fc       	sbrc	r3, 3
 9a8:	19 c0       	rjmp	.+50     	; 0x9dc <vfprintf+0x1e0>
 9aa:	82 2d       	mov	r24, r2
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	88 16       	cp	r8, r24
 9b0:	99 06       	cpc	r9, r25
 9b2:	a0 f4       	brcc	.+40     	; 0x9dc <vfprintf+0x1e0>
 9b4:	b6 01       	movw	r22, r12
 9b6:	80 e2       	ldi	r24, 0x20	; 32
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	33 d1       	rcall	.+614    	; 0xc22 <fputc>
 9bc:	2a 94       	dec	r2
 9be:	f5 cf       	rjmp	.-22     	; 0x9aa <vfprintf+0x1ae>
 9c0:	f5 01       	movw	r30, r10
 9c2:	37 fc       	sbrc	r3, 7
 9c4:	85 91       	lpm	r24, Z+
 9c6:	37 fe       	sbrs	r3, 7
 9c8:	81 91       	ld	r24, Z+
 9ca:	5f 01       	movw	r10, r30
 9cc:	b6 01       	movw	r22, r12
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	28 d1       	rcall	.+592    	; 0xc22 <fputc>
 9d2:	21 10       	cpse	r2, r1
 9d4:	2a 94       	dec	r2
 9d6:	21 e0       	ldi	r18, 0x01	; 1
 9d8:	82 1a       	sub	r8, r18
 9da:	91 08       	sbc	r9, r1
 9dc:	81 14       	cp	r8, r1
 9de:	91 04       	cpc	r9, r1
 9e0:	79 f7       	brne	.-34     	; 0x9c0 <vfprintf+0x1c4>
 9e2:	e1 c0       	rjmp	.+450    	; 0xba6 <vfprintf+0x3aa>
 9e4:	84 36       	cpi	r24, 0x64	; 100
 9e6:	11 f0       	breq	.+4      	; 0x9ec <vfprintf+0x1f0>
 9e8:	89 36       	cpi	r24, 0x69	; 105
 9ea:	39 f5       	brne	.+78     	; 0xa3a <vfprintf+0x23e>
 9ec:	f8 01       	movw	r30, r16
 9ee:	37 fe       	sbrs	r3, 7
 9f0:	07 c0       	rjmp	.+14     	; 0xa00 <vfprintf+0x204>
 9f2:	60 81       	ld	r22, Z
 9f4:	71 81       	ldd	r23, Z+1	; 0x01
 9f6:	82 81       	ldd	r24, Z+2	; 0x02
 9f8:	93 81       	ldd	r25, Z+3	; 0x03
 9fa:	0c 5f       	subi	r16, 0xFC	; 252
 9fc:	1f 4f       	sbci	r17, 0xFF	; 255
 9fe:	08 c0       	rjmp	.+16     	; 0xa10 <vfprintf+0x214>
 a00:	60 81       	ld	r22, Z
 a02:	71 81       	ldd	r23, Z+1	; 0x01
 a04:	07 2e       	mov	r0, r23
 a06:	00 0c       	add	r0, r0
 a08:	88 0b       	sbc	r24, r24
 a0a:	99 0b       	sbc	r25, r25
 a0c:	0e 5f       	subi	r16, 0xFE	; 254
 a0e:	1f 4f       	sbci	r17, 0xFF	; 255
 a10:	f3 2d       	mov	r31, r3
 a12:	ff 76       	andi	r31, 0x6F	; 111
 a14:	3f 2e       	mov	r3, r31
 a16:	97 ff       	sbrs	r25, 7
 a18:	09 c0       	rjmp	.+18     	; 0xa2c <vfprintf+0x230>
 a1a:	90 95       	com	r25
 a1c:	80 95       	com	r24
 a1e:	70 95       	com	r23
 a20:	61 95       	neg	r22
 a22:	7f 4f       	sbci	r23, 0xFF	; 255
 a24:	8f 4f       	sbci	r24, 0xFF	; 255
 a26:	9f 4f       	sbci	r25, 0xFF	; 255
 a28:	f0 68       	ori	r31, 0x80	; 128
 a2a:	3f 2e       	mov	r3, r31
 a2c:	2a e0       	ldi	r18, 0x0A	; 10
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	a3 01       	movw	r20, r6
 a32:	33 d1       	rcall	.+614    	; 0xc9a <__ultoa_invert>
 a34:	88 2e       	mov	r8, r24
 a36:	86 18       	sub	r8, r6
 a38:	44 c0       	rjmp	.+136    	; 0xac2 <vfprintf+0x2c6>
 a3a:	85 37       	cpi	r24, 0x75	; 117
 a3c:	31 f4       	brne	.+12     	; 0xa4a <vfprintf+0x24e>
 a3e:	23 2d       	mov	r18, r3
 a40:	2f 7e       	andi	r18, 0xEF	; 239
 a42:	b2 2e       	mov	r11, r18
 a44:	2a e0       	ldi	r18, 0x0A	; 10
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	25 c0       	rjmp	.+74     	; 0xa94 <vfprintf+0x298>
 a4a:	93 2d       	mov	r25, r3
 a4c:	99 7f       	andi	r25, 0xF9	; 249
 a4e:	b9 2e       	mov	r11, r25
 a50:	8f 36       	cpi	r24, 0x6F	; 111
 a52:	c1 f0       	breq	.+48     	; 0xa84 <vfprintf+0x288>
 a54:	18 f4       	brcc	.+6      	; 0xa5c <vfprintf+0x260>
 a56:	88 35       	cpi	r24, 0x58	; 88
 a58:	79 f0       	breq	.+30     	; 0xa78 <vfprintf+0x27c>
 a5a:	ae c0       	rjmp	.+348    	; 0xbb8 <vfprintf+0x3bc>
 a5c:	80 37       	cpi	r24, 0x70	; 112
 a5e:	19 f0       	breq	.+6      	; 0xa66 <vfprintf+0x26a>
 a60:	88 37       	cpi	r24, 0x78	; 120
 a62:	21 f0       	breq	.+8      	; 0xa6c <vfprintf+0x270>
 a64:	a9 c0       	rjmp	.+338    	; 0xbb8 <vfprintf+0x3bc>
 a66:	e9 2f       	mov	r30, r25
 a68:	e0 61       	ori	r30, 0x10	; 16
 a6a:	be 2e       	mov	r11, r30
 a6c:	b4 fe       	sbrs	r11, 4
 a6e:	0d c0       	rjmp	.+26     	; 0xa8a <vfprintf+0x28e>
 a70:	fb 2d       	mov	r31, r11
 a72:	f4 60       	ori	r31, 0x04	; 4
 a74:	bf 2e       	mov	r11, r31
 a76:	09 c0       	rjmp	.+18     	; 0xa8a <vfprintf+0x28e>
 a78:	34 fe       	sbrs	r3, 4
 a7a:	0a c0       	rjmp	.+20     	; 0xa90 <vfprintf+0x294>
 a7c:	29 2f       	mov	r18, r25
 a7e:	26 60       	ori	r18, 0x06	; 6
 a80:	b2 2e       	mov	r11, r18
 a82:	06 c0       	rjmp	.+12     	; 0xa90 <vfprintf+0x294>
 a84:	28 e0       	ldi	r18, 0x08	; 8
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	05 c0       	rjmp	.+10     	; 0xa94 <vfprintf+0x298>
 a8a:	20 e1       	ldi	r18, 0x10	; 16
 a8c:	30 e0       	ldi	r19, 0x00	; 0
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <vfprintf+0x298>
 a90:	20 e1       	ldi	r18, 0x10	; 16
 a92:	32 e0       	ldi	r19, 0x02	; 2
 a94:	f8 01       	movw	r30, r16
 a96:	b7 fe       	sbrs	r11, 7
 a98:	07 c0       	rjmp	.+14     	; 0xaa8 <vfprintf+0x2ac>
 a9a:	60 81       	ld	r22, Z
 a9c:	71 81       	ldd	r23, Z+1	; 0x01
 a9e:	82 81       	ldd	r24, Z+2	; 0x02
 aa0:	93 81       	ldd	r25, Z+3	; 0x03
 aa2:	0c 5f       	subi	r16, 0xFC	; 252
 aa4:	1f 4f       	sbci	r17, 0xFF	; 255
 aa6:	06 c0       	rjmp	.+12     	; 0xab4 <vfprintf+0x2b8>
 aa8:	60 81       	ld	r22, Z
 aaa:	71 81       	ldd	r23, Z+1	; 0x01
 aac:	80 e0       	ldi	r24, 0x00	; 0
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	0e 5f       	subi	r16, 0xFE	; 254
 ab2:	1f 4f       	sbci	r17, 0xFF	; 255
 ab4:	a3 01       	movw	r20, r6
 ab6:	f1 d0       	rcall	.+482    	; 0xc9a <__ultoa_invert>
 ab8:	88 2e       	mov	r8, r24
 aba:	86 18       	sub	r8, r6
 abc:	fb 2d       	mov	r31, r11
 abe:	ff 77       	andi	r31, 0x7F	; 127
 ac0:	3f 2e       	mov	r3, r31
 ac2:	36 fe       	sbrs	r3, 6
 ac4:	0d c0       	rjmp	.+26     	; 0xae0 <vfprintf+0x2e4>
 ac6:	23 2d       	mov	r18, r3
 ac8:	2e 7f       	andi	r18, 0xFE	; 254
 aca:	a2 2e       	mov	r10, r18
 acc:	89 14       	cp	r8, r9
 ace:	58 f4       	brcc	.+22     	; 0xae6 <vfprintf+0x2ea>
 ad0:	34 fe       	sbrs	r3, 4
 ad2:	0b c0       	rjmp	.+22     	; 0xaea <vfprintf+0x2ee>
 ad4:	32 fc       	sbrc	r3, 2
 ad6:	09 c0       	rjmp	.+18     	; 0xaea <vfprintf+0x2ee>
 ad8:	83 2d       	mov	r24, r3
 ada:	8e 7e       	andi	r24, 0xEE	; 238
 adc:	a8 2e       	mov	r10, r24
 ade:	05 c0       	rjmp	.+10     	; 0xaea <vfprintf+0x2ee>
 ae0:	b8 2c       	mov	r11, r8
 ae2:	a3 2c       	mov	r10, r3
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <vfprintf+0x2f0>
 ae6:	b8 2c       	mov	r11, r8
 ae8:	01 c0       	rjmp	.+2      	; 0xaec <vfprintf+0x2f0>
 aea:	b9 2c       	mov	r11, r9
 aec:	a4 fe       	sbrs	r10, 4
 aee:	0f c0       	rjmp	.+30     	; 0xb0e <vfprintf+0x312>
 af0:	fe 01       	movw	r30, r28
 af2:	e8 0d       	add	r30, r8
 af4:	f1 1d       	adc	r31, r1
 af6:	80 81       	ld	r24, Z
 af8:	80 33       	cpi	r24, 0x30	; 48
 afa:	21 f4       	brne	.+8      	; 0xb04 <vfprintf+0x308>
 afc:	9a 2d       	mov	r25, r10
 afe:	99 7e       	andi	r25, 0xE9	; 233
 b00:	a9 2e       	mov	r10, r25
 b02:	09 c0       	rjmp	.+18     	; 0xb16 <vfprintf+0x31a>
 b04:	a2 fe       	sbrs	r10, 2
 b06:	06 c0       	rjmp	.+12     	; 0xb14 <vfprintf+0x318>
 b08:	b3 94       	inc	r11
 b0a:	b3 94       	inc	r11
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <vfprintf+0x31a>
 b0e:	8a 2d       	mov	r24, r10
 b10:	86 78       	andi	r24, 0x86	; 134
 b12:	09 f0       	breq	.+2      	; 0xb16 <vfprintf+0x31a>
 b14:	b3 94       	inc	r11
 b16:	a3 fc       	sbrc	r10, 3
 b18:	10 c0       	rjmp	.+32     	; 0xb3a <vfprintf+0x33e>
 b1a:	a0 fe       	sbrs	r10, 0
 b1c:	06 c0       	rjmp	.+12     	; 0xb2a <vfprintf+0x32e>
 b1e:	b2 14       	cp	r11, r2
 b20:	80 f4       	brcc	.+32     	; 0xb42 <vfprintf+0x346>
 b22:	28 0c       	add	r2, r8
 b24:	92 2c       	mov	r9, r2
 b26:	9b 18       	sub	r9, r11
 b28:	0d c0       	rjmp	.+26     	; 0xb44 <vfprintf+0x348>
 b2a:	b2 14       	cp	r11, r2
 b2c:	58 f4       	brcc	.+22     	; 0xb44 <vfprintf+0x348>
 b2e:	b6 01       	movw	r22, r12
 b30:	80 e2       	ldi	r24, 0x20	; 32
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	76 d0       	rcall	.+236    	; 0xc22 <fputc>
 b36:	b3 94       	inc	r11
 b38:	f8 cf       	rjmp	.-16     	; 0xb2a <vfprintf+0x32e>
 b3a:	b2 14       	cp	r11, r2
 b3c:	18 f4       	brcc	.+6      	; 0xb44 <vfprintf+0x348>
 b3e:	2b 18       	sub	r2, r11
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <vfprintf+0x34a>
 b42:	98 2c       	mov	r9, r8
 b44:	21 2c       	mov	r2, r1
 b46:	a4 fe       	sbrs	r10, 4
 b48:	0f c0       	rjmp	.+30     	; 0xb68 <vfprintf+0x36c>
 b4a:	b6 01       	movw	r22, r12
 b4c:	80 e3       	ldi	r24, 0x30	; 48
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	68 d0       	rcall	.+208    	; 0xc22 <fputc>
 b52:	a2 fe       	sbrs	r10, 2
 b54:	16 c0       	rjmp	.+44     	; 0xb82 <vfprintf+0x386>
 b56:	a1 fc       	sbrc	r10, 1
 b58:	03 c0       	rjmp	.+6      	; 0xb60 <vfprintf+0x364>
 b5a:	88 e7       	ldi	r24, 0x78	; 120
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <vfprintf+0x368>
 b60:	88 e5       	ldi	r24, 0x58	; 88
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	b6 01       	movw	r22, r12
 b66:	0c c0       	rjmp	.+24     	; 0xb80 <vfprintf+0x384>
 b68:	8a 2d       	mov	r24, r10
 b6a:	86 78       	andi	r24, 0x86	; 134
 b6c:	51 f0       	breq	.+20     	; 0xb82 <vfprintf+0x386>
 b6e:	a1 fe       	sbrs	r10, 1
 b70:	02 c0       	rjmp	.+4      	; 0xb76 <vfprintf+0x37a>
 b72:	8b e2       	ldi	r24, 0x2B	; 43
 b74:	01 c0       	rjmp	.+2      	; 0xb78 <vfprintf+0x37c>
 b76:	80 e2       	ldi	r24, 0x20	; 32
 b78:	a7 fc       	sbrc	r10, 7
 b7a:	8d e2       	ldi	r24, 0x2D	; 45
 b7c:	b6 01       	movw	r22, r12
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	50 d0       	rcall	.+160    	; 0xc22 <fputc>
 b82:	89 14       	cp	r8, r9
 b84:	30 f4       	brcc	.+12     	; 0xb92 <vfprintf+0x396>
 b86:	b6 01       	movw	r22, r12
 b88:	80 e3       	ldi	r24, 0x30	; 48
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	4a d0       	rcall	.+148    	; 0xc22 <fputc>
 b8e:	9a 94       	dec	r9
 b90:	f8 cf       	rjmp	.-16     	; 0xb82 <vfprintf+0x386>
 b92:	8a 94       	dec	r8
 b94:	f3 01       	movw	r30, r6
 b96:	e8 0d       	add	r30, r8
 b98:	f1 1d       	adc	r31, r1
 b9a:	80 81       	ld	r24, Z
 b9c:	b6 01       	movw	r22, r12
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	40 d0       	rcall	.+128    	; 0xc22 <fputc>
 ba2:	81 10       	cpse	r8, r1
 ba4:	f6 cf       	rjmp	.-20     	; 0xb92 <vfprintf+0x396>
 ba6:	22 20       	and	r2, r2
 ba8:	09 f4       	brne	.+2      	; 0xbac <vfprintf+0x3b0>
 baa:	4e ce       	rjmp	.-868    	; 0x848 <vfprintf+0x4c>
 bac:	b6 01       	movw	r22, r12
 bae:	80 e2       	ldi	r24, 0x20	; 32
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	37 d0       	rcall	.+110    	; 0xc22 <fputc>
 bb4:	2a 94       	dec	r2
 bb6:	f7 cf       	rjmp	.-18     	; 0xba6 <vfprintf+0x3aa>
 bb8:	f6 01       	movw	r30, r12
 bba:	86 81       	ldd	r24, Z+6	; 0x06
 bbc:	97 81       	ldd	r25, Z+7	; 0x07
 bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <vfprintf+0x3c8>
 bc0:	8f ef       	ldi	r24, 0xFF	; 255
 bc2:	9f ef       	ldi	r25, 0xFF	; 255
 bc4:	2b 96       	adiw	r28, 0x0b	; 11
 bc6:	0f b6       	in	r0, 0x3f	; 63
 bc8:	f8 94       	cli
 bca:	de bf       	out	0x3e, r29	; 62
 bcc:	0f be       	out	0x3f, r0	; 63
 bce:	cd bf       	out	0x3d, r28	; 61
 bd0:	df 91       	pop	r29
 bd2:	cf 91       	pop	r28
 bd4:	1f 91       	pop	r17
 bd6:	0f 91       	pop	r16
 bd8:	ff 90       	pop	r15
 bda:	ef 90       	pop	r14
 bdc:	df 90       	pop	r13
 bde:	cf 90       	pop	r12
 be0:	bf 90       	pop	r11
 be2:	af 90       	pop	r10
 be4:	9f 90       	pop	r9
 be6:	8f 90       	pop	r8
 be8:	7f 90       	pop	r7
 bea:	6f 90       	pop	r6
 bec:	5f 90       	pop	r5
 bee:	4f 90       	pop	r4
 bf0:	3f 90       	pop	r3
 bf2:	2f 90       	pop	r2
 bf4:	08 95       	ret

00000bf6 <strnlen_P>:
 bf6:	fc 01       	movw	r30, r24
 bf8:	05 90       	lpm	r0, Z+
 bfa:	61 50       	subi	r22, 0x01	; 1
 bfc:	70 40       	sbci	r23, 0x00	; 0
 bfe:	01 10       	cpse	r0, r1
 c00:	d8 f7       	brcc	.-10     	; 0xbf8 <strnlen_P+0x2>
 c02:	80 95       	com	r24
 c04:	90 95       	com	r25
 c06:	8e 0f       	add	r24, r30
 c08:	9f 1f       	adc	r25, r31
 c0a:	08 95       	ret

00000c0c <strnlen>:
 c0c:	fc 01       	movw	r30, r24
 c0e:	61 50       	subi	r22, 0x01	; 1
 c10:	70 40       	sbci	r23, 0x00	; 0
 c12:	01 90       	ld	r0, Z+
 c14:	01 10       	cpse	r0, r1
 c16:	d8 f7       	brcc	.-10     	; 0xc0e <strnlen+0x2>
 c18:	80 95       	com	r24
 c1a:	90 95       	com	r25
 c1c:	8e 0f       	add	r24, r30
 c1e:	9f 1f       	adc	r25, r31
 c20:	08 95       	ret

00000c22 <fputc>:
 c22:	0f 93       	push	r16
 c24:	1f 93       	push	r17
 c26:	cf 93       	push	r28
 c28:	df 93       	push	r29
 c2a:	fb 01       	movw	r30, r22
 c2c:	23 81       	ldd	r18, Z+3	; 0x03
 c2e:	21 fd       	sbrc	r18, 1
 c30:	03 c0       	rjmp	.+6      	; 0xc38 <fputc+0x16>
 c32:	8f ef       	ldi	r24, 0xFF	; 255
 c34:	9f ef       	ldi	r25, 0xFF	; 255
 c36:	2c c0       	rjmp	.+88     	; 0xc90 <fputc+0x6e>
 c38:	22 ff       	sbrs	r18, 2
 c3a:	16 c0       	rjmp	.+44     	; 0xc68 <fputc+0x46>
 c3c:	46 81       	ldd	r20, Z+6	; 0x06
 c3e:	57 81       	ldd	r21, Z+7	; 0x07
 c40:	24 81       	ldd	r18, Z+4	; 0x04
 c42:	35 81       	ldd	r19, Z+5	; 0x05
 c44:	42 17       	cp	r20, r18
 c46:	53 07       	cpc	r21, r19
 c48:	44 f4       	brge	.+16     	; 0xc5a <fputc+0x38>
 c4a:	a0 81       	ld	r26, Z
 c4c:	b1 81       	ldd	r27, Z+1	; 0x01
 c4e:	9d 01       	movw	r18, r26
 c50:	2f 5f       	subi	r18, 0xFF	; 255
 c52:	3f 4f       	sbci	r19, 0xFF	; 255
 c54:	31 83       	std	Z+1, r19	; 0x01
 c56:	20 83       	st	Z, r18
 c58:	8c 93       	st	X, r24
 c5a:	26 81       	ldd	r18, Z+6	; 0x06
 c5c:	37 81       	ldd	r19, Z+7	; 0x07
 c5e:	2f 5f       	subi	r18, 0xFF	; 255
 c60:	3f 4f       	sbci	r19, 0xFF	; 255
 c62:	37 83       	std	Z+7, r19	; 0x07
 c64:	26 83       	std	Z+6, r18	; 0x06
 c66:	14 c0       	rjmp	.+40     	; 0xc90 <fputc+0x6e>
 c68:	8b 01       	movw	r16, r22
 c6a:	ec 01       	movw	r28, r24
 c6c:	fb 01       	movw	r30, r22
 c6e:	00 84       	ldd	r0, Z+8	; 0x08
 c70:	f1 85       	ldd	r31, Z+9	; 0x09
 c72:	e0 2d       	mov	r30, r0
 c74:	09 95       	icall
 c76:	89 2b       	or	r24, r25
 c78:	e1 f6       	brne	.-72     	; 0xc32 <fputc+0x10>
 c7a:	d8 01       	movw	r26, r16
 c7c:	16 96       	adiw	r26, 0x06	; 6
 c7e:	8d 91       	ld	r24, X+
 c80:	9c 91       	ld	r25, X
 c82:	17 97       	sbiw	r26, 0x07	; 7
 c84:	01 96       	adiw	r24, 0x01	; 1
 c86:	17 96       	adiw	r26, 0x07	; 7
 c88:	9c 93       	st	X, r25
 c8a:	8e 93       	st	-X, r24
 c8c:	16 97       	sbiw	r26, 0x06	; 6
 c8e:	ce 01       	movw	r24, r28
 c90:	df 91       	pop	r29
 c92:	cf 91       	pop	r28
 c94:	1f 91       	pop	r17
 c96:	0f 91       	pop	r16
 c98:	08 95       	ret

00000c9a <__ultoa_invert>:
 c9a:	fa 01       	movw	r30, r20
 c9c:	aa 27       	eor	r26, r26
 c9e:	28 30       	cpi	r18, 0x08	; 8
 ca0:	51 f1       	breq	.+84     	; 0xcf6 <__ultoa_invert+0x5c>
 ca2:	20 31       	cpi	r18, 0x10	; 16
 ca4:	81 f1       	breq	.+96     	; 0xd06 <__ultoa_invert+0x6c>
 ca6:	e8 94       	clt
 ca8:	6f 93       	push	r22
 caa:	6e 7f       	andi	r22, 0xFE	; 254
 cac:	6e 5f       	subi	r22, 0xFE	; 254
 cae:	7f 4f       	sbci	r23, 0xFF	; 255
 cb0:	8f 4f       	sbci	r24, 0xFF	; 255
 cb2:	9f 4f       	sbci	r25, 0xFF	; 255
 cb4:	af 4f       	sbci	r26, 0xFF	; 255
 cb6:	b1 e0       	ldi	r27, 0x01	; 1
 cb8:	3e d0       	rcall	.+124    	; 0xd36 <__ultoa_invert+0x9c>
 cba:	b4 e0       	ldi	r27, 0x04	; 4
 cbc:	3c d0       	rcall	.+120    	; 0xd36 <__ultoa_invert+0x9c>
 cbe:	67 0f       	add	r22, r23
 cc0:	78 1f       	adc	r23, r24
 cc2:	89 1f       	adc	r24, r25
 cc4:	9a 1f       	adc	r25, r26
 cc6:	a1 1d       	adc	r26, r1
 cc8:	68 0f       	add	r22, r24
 cca:	79 1f       	adc	r23, r25
 ccc:	8a 1f       	adc	r24, r26
 cce:	91 1d       	adc	r25, r1
 cd0:	a1 1d       	adc	r26, r1
 cd2:	6a 0f       	add	r22, r26
 cd4:	71 1d       	adc	r23, r1
 cd6:	81 1d       	adc	r24, r1
 cd8:	91 1d       	adc	r25, r1
 cda:	a1 1d       	adc	r26, r1
 cdc:	20 d0       	rcall	.+64     	; 0xd1e <__ultoa_invert+0x84>
 cde:	09 f4       	brne	.+2      	; 0xce2 <__ultoa_invert+0x48>
 ce0:	68 94       	set
 ce2:	3f 91       	pop	r19
 ce4:	2a e0       	ldi	r18, 0x0A	; 10
 ce6:	26 9f       	mul	r18, r22
 ce8:	11 24       	eor	r1, r1
 cea:	30 19       	sub	r19, r0
 cec:	30 5d       	subi	r19, 0xD0	; 208
 cee:	31 93       	st	Z+, r19
 cf0:	de f6       	brtc	.-74     	; 0xca8 <__ultoa_invert+0xe>
 cf2:	cf 01       	movw	r24, r30
 cf4:	08 95       	ret
 cf6:	46 2f       	mov	r20, r22
 cf8:	47 70       	andi	r20, 0x07	; 7
 cfa:	40 5d       	subi	r20, 0xD0	; 208
 cfc:	41 93       	st	Z+, r20
 cfe:	b3 e0       	ldi	r27, 0x03	; 3
 d00:	0f d0       	rcall	.+30     	; 0xd20 <__ultoa_invert+0x86>
 d02:	c9 f7       	brne	.-14     	; 0xcf6 <__ultoa_invert+0x5c>
 d04:	f6 cf       	rjmp	.-20     	; 0xcf2 <__ultoa_invert+0x58>
 d06:	46 2f       	mov	r20, r22
 d08:	4f 70       	andi	r20, 0x0F	; 15
 d0a:	40 5d       	subi	r20, 0xD0	; 208
 d0c:	4a 33       	cpi	r20, 0x3A	; 58
 d0e:	18 f0       	brcs	.+6      	; 0xd16 <__ultoa_invert+0x7c>
 d10:	49 5d       	subi	r20, 0xD9	; 217
 d12:	31 fd       	sbrc	r19, 1
 d14:	40 52       	subi	r20, 0x20	; 32
 d16:	41 93       	st	Z+, r20
 d18:	02 d0       	rcall	.+4      	; 0xd1e <__ultoa_invert+0x84>
 d1a:	a9 f7       	brne	.-22     	; 0xd06 <__ultoa_invert+0x6c>
 d1c:	ea cf       	rjmp	.-44     	; 0xcf2 <__ultoa_invert+0x58>
 d1e:	b4 e0       	ldi	r27, 0x04	; 4
 d20:	a6 95       	lsr	r26
 d22:	97 95       	ror	r25
 d24:	87 95       	ror	r24
 d26:	77 95       	ror	r23
 d28:	67 95       	ror	r22
 d2a:	ba 95       	dec	r27
 d2c:	c9 f7       	brne	.-14     	; 0xd20 <__ultoa_invert+0x86>
 d2e:	00 97       	sbiw	r24, 0x00	; 0
 d30:	61 05       	cpc	r22, r1
 d32:	71 05       	cpc	r23, r1
 d34:	08 95       	ret
 d36:	9b 01       	movw	r18, r22
 d38:	ac 01       	movw	r20, r24
 d3a:	0a 2e       	mov	r0, r26
 d3c:	06 94       	lsr	r0
 d3e:	57 95       	ror	r21
 d40:	47 95       	ror	r20
 d42:	37 95       	ror	r19
 d44:	27 95       	ror	r18
 d46:	ba 95       	dec	r27
 d48:	c9 f7       	brne	.-14     	; 0xd3c <__ultoa_invert+0xa2>
 d4a:	62 0f       	add	r22, r18
 d4c:	73 1f       	adc	r23, r19
 d4e:	84 1f       	adc	r24, r20
 d50:	95 1f       	adc	r25, r21
 d52:	a0 1d       	adc	r26, r0
 d54:	08 95       	ret

00000d56 <__divmodsi4>:
 d56:	05 2e       	mov	r0, r21
 d58:	97 fb       	bst	r25, 7
 d5a:	16 f4       	brtc	.+4      	; 0xd60 <__divmodsi4+0xa>
 d5c:	00 94       	com	r0
 d5e:	0f d0       	rcall	.+30     	; 0xd7e <__negsi2>
 d60:	57 fd       	sbrc	r21, 7
 d62:	05 d0       	rcall	.+10     	; 0xd6e <__divmodsi4_neg2>
 d64:	92 dc       	rcall	.-1756   	; 0x68a <__udivmodsi4>
 d66:	07 fc       	sbrc	r0, 7
 d68:	02 d0       	rcall	.+4      	; 0xd6e <__divmodsi4_neg2>
 d6a:	46 f4       	brtc	.+16     	; 0xd7c <__divmodsi4_exit>
 d6c:	08 c0       	rjmp	.+16     	; 0xd7e <__negsi2>

00000d6e <__divmodsi4_neg2>:
 d6e:	50 95       	com	r21
 d70:	40 95       	com	r20
 d72:	30 95       	com	r19
 d74:	21 95       	neg	r18
 d76:	3f 4f       	sbci	r19, 0xFF	; 255
 d78:	4f 4f       	sbci	r20, 0xFF	; 255
 d7a:	5f 4f       	sbci	r21, 0xFF	; 255

00000d7c <__divmodsi4_exit>:
 d7c:	08 95       	ret

00000d7e <__negsi2>:
 d7e:	90 95       	com	r25
 d80:	80 95       	com	r24
 d82:	70 95       	com	r23
 d84:	61 95       	neg	r22
 d86:	7f 4f       	sbci	r23, 0xFF	; 255
 d88:	8f 4f       	sbci	r24, 0xFF	; 255
 d8a:	9f 4f       	sbci	r25, 0xFF	; 255
 d8c:	08 95       	ret

00000d8e <__muluhisi3>:
 d8e:	0f d0       	rcall	.+30     	; 0xdae <__umulhisi3>
 d90:	a5 9f       	mul	r26, r21
 d92:	90 0d       	add	r25, r0
 d94:	b4 9f       	mul	r27, r20
 d96:	90 0d       	add	r25, r0
 d98:	a4 9f       	mul	r26, r20
 d9a:	80 0d       	add	r24, r0
 d9c:	91 1d       	adc	r25, r1
 d9e:	11 24       	eor	r1, r1
 da0:	08 95       	ret

00000da2 <__mulshisi3>:
 da2:	b7 ff       	sbrs	r27, 7
 da4:	f4 cf       	rjmp	.-24     	; 0xd8e <__muluhisi3>

00000da6 <__mulohisi3>:
 da6:	f3 df       	rcall	.-26     	; 0xd8e <__muluhisi3>
 da8:	82 1b       	sub	r24, r18
 daa:	93 0b       	sbc	r25, r19
 dac:	08 95       	ret

00000dae <__umulhisi3>:
 dae:	a2 9f       	mul	r26, r18
 db0:	b0 01       	movw	r22, r0
 db2:	b3 9f       	mul	r27, r19
 db4:	c0 01       	movw	r24, r0
 db6:	a3 9f       	mul	r26, r19
 db8:	70 0d       	add	r23, r0
 dba:	81 1d       	adc	r24, r1
 dbc:	11 24       	eor	r1, r1
 dbe:	91 1d       	adc	r25, r1
 dc0:	b2 9f       	mul	r27, r18
 dc2:	70 0d       	add	r23, r0
 dc4:	81 1d       	adc	r24, r1
 dc6:	11 24       	eor	r1, r1
 dc8:	91 1d       	adc	r25, r1
 dca:	08 95       	ret

00000dcc <_exit>:
 dcc:	f8 94       	cli

00000dce <__stop_program>:
 dce:	ff cf       	rjmp	.-2      	; 0xdce <__stop_program>
