
Milestone1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000f72  00001006  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800158  00800158  0000105e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000105e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b3  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a87  00000000  00000000  000026c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000acd  00000000  00000000  0000314e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00003c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e1  00000000  00000000  00003f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bea  00000000  00000000  00004735  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000531f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	b9 c2       	rjmp	.+1394   	; 0x588 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 35       	cpi	r26, 0x58	; 88
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e5       	ldi	r26, 0x58	; 88
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 3a       	cpi	r26, 0xA1	; 161
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d3 d2       	rcall	.+1446   	; 0x66a <main>
  c4:	54 c7       	rjmp	.+3752   	; 0xf6e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 17c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 180:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 184:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
 188:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <_avr_timer_cntcurr>
 18c:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <_avr_timer_cntcurr+0x1>
 190:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <_avr_timer_cntcurr+0x2>
 194:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <_avr_timer_cntcurr+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 1be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 1c2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 1c6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 1ca:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 1ce:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 1d2:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 1d6:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_avr_timer_cntcurr>
 1f8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <_avr_timer_cntcurr+0x1>
 1fc:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <_avr_timer_cntcurr+0x2>
 200:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <_avr_timer_cntcurr+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 20e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 212:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 216:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <TimerFlag>
 228:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 22c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 230:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 234:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 238:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 23c:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 240:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 244:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <initUSART>:
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	81 f0       	breq	.+32     	; 0x27e <initUSART+0x24>
 25e:	e1 ec       	ldi	r30, 0xC1	; 193
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 61       	ori	r24, 0x18	; 24
 266:	80 83       	st	Z, r24
 268:	e2 ec       	ldi	r30, 0xC2	; 194
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	80 83       	st	Z, r24
 272:	83 e3       	ldi	r24, 0x33	; 51
 274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 27c:	08 95       	ret
 27e:	e9 ec       	ldi	r30, 0xC9	; 201
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 61       	ori	r24, 0x18	; 24
 286:	80 83       	st	Z, r24
 288:	ea ec       	ldi	r30, 0xCA	; 202
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	80 83       	st	Z, r24
 292:	83 e3       	ldi	r24, 0x33	; 51
 294:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 298:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 29c:	08 95       	ret

0000029e <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 29e:	61 30       	cpi	r22, 0x01	; 1
 2a0:	41 f0       	breq	.+16     	; 0x2b2 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 2a2:	e0 ec       	ldi	r30, 0xC0	; 192
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	90 81       	ld	r25, Z
 2a8:	95 ff       	sbrs	r25, 5
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <USART_Send+0x8>
		UDR0 = sendMe;
 2ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2b0:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 2b2:	e8 ec       	ldi	r30, 0xC8	; 200
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	90 81       	ld	r25, Z
 2b8:	95 ff       	sbrs	r25, 5
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <USART_Send+0x18>
		UDR1 = sendMe;
 2bc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2c0:	08 95       	ret

000002c2 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	41 f0       	breq	.+16     	; 0x2d6 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 2c6:	e0 ec       	ldi	r30, 0xC0	; 192
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	88 23       	and	r24, r24
 2ce:	ec f7       	brge	.-6      	; 0x2ca <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 2d0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d4:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 2d6:	e8 ec       	ldi	r30, 0xC8	; 200
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	88 23       	and	r24, r24
 2de:	ec f7       	brge	.-6      	; 0x2da <USART_Receive+0x18>
		return UDR1;
 2e0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 2e4:	08 95       	ret

000002e6 <DisplayString>:
	pins = (PINB & 0x07);
	hitCheck(pins);
}


void DisplayString( unsigned char column, const unsigned char* string) {
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
 2ec:	fb 01       	movw	r30, r22
 2ee:	90 81       	ld	r25, Z
 2f0:	99 23       	and	r25, r25
 2f2:	51 f0       	breq	.+20     	; 0x308 <DisplayString+0x22>
 2f4:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 2f6:	11 e0       	ldi	r17, 0x01	; 1
 2f8:	18 0f       	add	r17, r24
 2fa:	05 df       	rcall	.-502    	; 0x106 <LCD_Cursor>
		LCD_WriteData(*string++);
 2fc:	89 91       	ld	r24, Y+
 2fe:	1a df       	rcall	.-460    	; 0x134 <LCD_WriteData>


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 300:	81 2f       	mov	r24, r17
}


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
 302:	98 81       	ld	r25, Y
 304:	91 11       	cpse	r25, r1
 306:	f7 cf       	rjmp	.-18     	; 0x2f6 <DisplayString+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <randTarget>:
}
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
	USART_Send(sendValue,0);
}

void randTarget(){
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
	//TODO FINISH LED COLORS AND OUTPUT
	randomNumber = rand()%3;
 314:	08 d3       	rcall	.+1552   	; 0x926 <rand>
 316:	c3 e0       	ldi	r28, 0x03	; 3
 318:	d0 e0       	ldi	r29, 0x00	; 0
 31a:	be 01       	movw	r22, r28
 31c:	74 d2       	rcall	.+1256   	; 0x806 <__divmodhi4>
 31e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <randomNumber+0x1>
 322:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <randomNumber>
	ammoBack = rand()% 3;
 326:	ff d2       	rcall	.+1534   	; 0x926 <rand>
 328:	be 01       	movw	r22, r28
 32a:	6d d2       	rcall	.+1242   	; 0x806 <__divmodhi4>
 32c:	28 2f       	mov	r18, r24
 32e:	39 2f       	mov	r19, r25
 330:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <ammoBack>
 334:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <ammoBack+0x1>
 338:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <randomNumber>
	if(randomNumber == 0){
 33c:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <randomNumber+0x1>
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	89 f4       	brne	.+34     	; 0x366 <randTarget+0x56>
 344:	23 2b       	or	r18, r19
		if(ammoBack == 0){
 346:	31 f4       	brne	.+12     	; 0x354 <randTarget+0x44>
 348:	87 e0       	ldi	r24, 0x07	; 7
			PORTA = 0X07;
 34a:	82 b9       	out	0x02, r24	; 2
 34c:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 34e:	83 7e       	andi	r24, 0xE3	; 227
 350:	8b b9       	out	0x0b, r24	; 11
 352:	05 c0       	rjmp	.+10     	; 0x35e <randTarget+0x4e>
 354:	81 e0       	ldi	r24, 0x01	; 1
		}
		else{
			//Green Light
			PORTA = 0x01;
 356:	82 b9       	out	0x02, r24	; 2
 358:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 35a:	83 7e       	andi	r24, 0xE3	; 227
 35c:	8b b9       	out	0x0b, r24	; 11
 35e:	81 e0       	ldi	r24, 0x01	; 1
		}
		currTarget = 0x01;
 360:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 364:	1f c0       	rjmp	.+62     	; 0x3a4 <randTarget+0x94>
 366:	01 97       	sbiw	r24, 0x01	; 1
	}
	else if (randomNumber == 1){
 368:	89 f4       	brne	.+34     	; 0x38c <randTarget+0x7c>
 36a:	23 2b       	or	r18, r19
		if(ammoBack == 0){
 36c:	31 f4       	brne	.+12     	; 0x37a <randTarget+0x6a>
 36e:	88 e3       	ldi	r24, 0x38	; 56
			//White Light
			PORTA = 0x38;
 370:	82 b9       	out	0x02, r24	; 2
 372:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 374:	83 7e       	andi	r24, 0xE3	; 227
 376:	8b b9       	out	0x0b, r24	; 11
 378:	05 c0       	rjmp	.+10     	; 0x384 <randTarget+0x74>
 37a:	88 e0       	ldi	r24, 0x08	; 8
		}
		else{
			//Green Light
			PORTA = 0x08;
 37c:	82 b9       	out	0x02, r24	; 2
 37e:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 380:	83 7e       	andi	r24, 0xE3	; 227
 382:	8b b9       	out	0x0b, r24	; 11
 384:	82 e0       	ldi	r24, 0x02	; 2
		}		
		currTarget = 0x02;
 386:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 38a:	0c c0       	rjmp	.+24     	; 0x3a4 <randTarget+0x94>
 38c:	23 2b       	or	r18, r19
	}
	else{
		if(ammoBack == 0){
 38e:	29 f4       	brne	.+10     	; 0x39a <randTarget+0x8a>
 390:	8b b1       	in	r24, 0x0b	; 11
			//White Light
			PORTD = PORTD | 0x01C;
 392:	8c 61       	ori	r24, 0x1C	; 28
 394:	8b b9       	out	0x0b, r24	; 11
 396:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 398:	02 c0       	rjmp	.+4      	; 0x39e <randTarget+0x8e>
 39a:	5a 9a       	sbi	0x0b, 2	; 11
		}
		else{
			//Green Light
			PORTD = PORTD | 0x04;
 39c:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 39e:	84 e0       	ldi	r24, 0x04	; 4
		}
		currTarget = 0x04;
 3a0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3a4:	df 91       	pop	r29
	}
	return;
}
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <GameOver>:
 3aa:	cf 93       	push	r28
		break;
	}
	return commState;
}

void GameOver(){
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	c0 54       	subi	r28, 0x40	; 64
 3b4:	d1 09       	sbc	r29, r1
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	f8 94       	cli
 3ba:	de bf       	out	0x3e, r29	; 62
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	cd bf       	out	0x3d, r28	; 61
	char gameOverString[64];
	sendToGun(0x02);
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	91 d0       	rcall	.+290    	; 0x4e6 <sendToGun>
	sprintf(gameOverString,"Game Over,      Final Score: %d",score);
 3c4:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x1>
 3c8:	8f 93       	push	r24
 3ca:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 3ce:	8f 93       	push	r24
 3d0:	82 e1       	ldi	r24, 0x12	; 18
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	9f 93       	push	r25
 3d6:	8f 93       	push	r24
 3d8:	8e 01       	movw	r16, r28
 3da:	0f 5f       	subi	r16, 0xFF	; 255
 3dc:	1f 4f       	sbci	r17, 0xFF	; 255
 3de:	1f 93       	push	r17
 3e0:	0f 93       	push	r16
 3e2:	af d2       	rcall	.+1374   	; 0x942 <sprintf>
	LCD_DisplayString(1, gameOverString);
 3e4:	b8 01       	movw	r22, r16
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	ae de       	rcall	.-676    	; 0x146 <LCD_DisplayString>
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <GameOver+0x4c>

000003f8 <commTranslate>:
volatile unsigned char pins = 0;
unsigned int bullets = 6;
//====END OF GLOBALS=====
void commTranslate(unsigned char data){
	//LCD_DisplayString(1,data);
	if(data == 0xFF){
 3f8:	8f 3f       	cpi	r24, 0xFF	; 255
 3fa:	09 f4       	brne	.+2      	; 0x3fe <commTranslate+0x6>
		GameOver();
 3fc:	d6 df       	rcall	.-84     	; 0x3aa <GameOver>
	}
	else{
		--bullets;
 3fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bullets>
 402:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <bullets+0x1>
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bullets+0x1>
 40c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bullets>
 410:	08 95       	ret

00000412 <targetSelectSM>:
	}
	return timerState;
}

enum targetSelectStates {targetSelectSM_init, targetSelectSM_targetSelect, targetSelectSM_hitWait};
int targetSelectSM(int targetSelectState){
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	ec 01       	movw	r28, r24
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 418:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 41c:	88 23       	and	r24, r24
 41e:	1c f4       	brge	.+6      	; 0x426 <targetSelectSM+0x14>
		payload = USART_Receive(0);
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	4f df       	rcall	.-354    	; 0x2c2 <USART_Receive>
		commTranslate(payload);
 424:	e9 df       	rcall	.-46     	; 0x3f8 <commTranslate>
 426:	c1 30       	cpi	r28, 0x01	; 1
	}
	switch(targetSelectState){
 428:	d1 05       	cpc	r29, r1
 42a:	61 f0       	breq	.+24     	; 0x444 <targetSelectSM+0x32>
 42c:	c2 30       	cpi	r28, 0x02	; 2
 42e:	d1 05       	cpc	r29, r1
 430:	69 f0       	breq	.+26     	; 0x44c <targetSelectSM+0x3a>
 432:	20 97       	sbiw	r28, 0x00	; 0
 434:	e1 f4       	brne	.+56     	; 0x46e <targetSelectSM+0x5c>
 436:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <score+0x1>
		case targetSelectSM_init:
		score = 0;
 43a:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <score>
 43e:	c1 e0       	ldi	r28, 0x01	; 1
		targetSelectState = targetSelectSM_targetSelect;
 440:	d0 e0       	ldi	r29, 0x00	; 0
		break;
 442:	15 c0       	rjmp	.+42     	; 0x46e <targetSelectSM+0x5c>

		case targetSelectSM_targetSelect:
		randTarget();
 444:	65 df       	rcall	.-310    	; 0x310 <randTarget>
 446:	c2 e0       	ldi	r28, 0x02	; 2
		targetSelectState = targetSelectSM_hitWait;
 448:	d0 e0       	ldi	r29, 0x00	; 0
 44a:	11 c0       	rjmp	.+34     	; 0x46e <targetSelectSM+0x5c>
		break;
 44c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <wait>

		case targetSelectSM_hitWait:
		++wait;
 450:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <wait+0x1>
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <wait+0x1>
 45a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <wait>
 45e:	0a 97       	sbiw	r24, 0x0a	; 10
		if(wait == 10){ //2 Seconds is over, time to switch targets
 460:	31 f4       	brne	.+12     	; 0x46e <targetSelectSM+0x5c>
 462:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <wait+0x1>
			wait = 0;
 466:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <wait>
 46a:	c1 e0       	ldi	r28, 0x01	; 1
			targetSelectState = targetSelectSM_targetSelect;
 46c:	d0 e0       	ldi	r29, 0x00	; 0
 46e:	ce 01       	movw	r24, r28
			targetSelectState = targetSelectSM_hitWait;
		}
		break;
	}
	return targetSelectState;
}
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <LCDDisplaySM>:
 476:	cf 93       	push	r28

enum LCDDisplayStates{LCDDisplaySM_update, LCDDisplaySM_GameOver};
int LCDDisplaySM(int LCDDisplayState){
 478:	df 93       	push	r29
 47a:	ec 01       	movw	r28, r24
 47c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 480:	88 23       	and	r24, r24
 482:	1c f4       	brge	.+6      	; 0x48a <LCDDisplaySM+0x14>
		payload = USART_Receive(0);
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	1d df       	rcall	.-454    	; 0x2c2 <USART_Receive>
		commTranslate(payload);
 488:	b7 df       	rcall	.-146    	; 0x3f8 <commTranslate>
 48a:	cd 2b       	or	r28, r29
	}
	switch(LCDDisplayState){
 48c:	39 f5       	brne	.+78     	; 0x4dc <LCDDisplaySM+0x66>
 48e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bullets+0x1>
		case LCDDisplaySM_update:
		sprintf(combineString,"Time: %02d        Score: %d Ammo:%d ",timeLeft,score,bullets);
 492:	8f 93       	push	r24
 494:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bullets>
 498:	8f 93       	push	r24
 49a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x1>
 49e:	8f 93       	push	r24
 4a0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 4a4:	8f 93       	push	r24
 4a6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <timeLeft+0x1>
 4aa:	8f 93       	push	r24
 4ac:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timeLeft>
 4b0:	8f 93       	push	r24
 4b2:	82 e3       	ldi	r24, 0x32	; 50
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	9f 93       	push	r25
 4b8:	8f 93       	push	r24
 4ba:	89 e9       	ldi	r24, 0x99	; 153
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	9f 93       	push	r25
 4c0:	8f 93       	push	r24
 4c2:	3f d2       	rcall	.+1150   	; 0x942 <sprintf>
 4c4:	69 e9       	ldi	r22, 0x99	; 153
		DisplayString(1,combineString);
 4c6:	71 e0       	ldi	r23, 0x01	; 1
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0d df       	rcall	.-486    	; 0x2e6 <DisplayString>
 4cc:	8d b7       	in	r24, 0x3d	; 61
		LCDDisplayState = LCDDisplaySM_update;
		
		break;
 4ce:	9e b7       	in	r25, 0x3e	; 62
 4d0:	0a 96       	adiw	r24, 0x0a	; 10
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	9e bf       	out	0x3e, r25	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	8d bf       	out	0x3d, r24	; 61
 4dc:	80 e0       	ldi	r24, 0x00	; 0

		default:
		LCDDisplayState = LCDDisplaySM_update;
	}
	return LCDDisplayState;
}
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <sendToGun>:
 4e6:	cf 93       	push	r28

void sendToGun(unsigned char sendValue){
 4e8:	c8 2f       	mov	r28, r24
 4ea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
unsigned char payload = 0x00;
if(USART_HasReceived(0)){ //Message Received
 4ee:	88 23       	and	r24, r24
 4f0:	1c f4       	brge	.+6      	; 0x4f8 <sendToGun+0x12>
	payload = USART_Receive(0);
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	e6 de       	rcall	.-564    	; 0x2c2 <USART_Receive>
	commTranslate(payload);
 4f6:	80 df       	rcall	.-256    	; 0x3f8 <commTranslate>
 4f8:	e0 ec       	ldi	r30, 0xC0	; 192
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	85 ff       	sbrs	r24, 5
}
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
 500:	fd cf       	rjmp	.-6      	; 0x4fc <sendToGun+0x16>
 502:	60 e0       	ldi	r22, 0x00	; 0
	USART_Send(sendValue,0);
 504:	8c 2f       	mov	r24, r28
 506:	cb de       	rcall	.-618    	; 0x29e <USART_Send>
 508:	cf 91       	pop	r28
}
 50a:	08 95       	ret

0000050c <hitCheck>:
 50c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <currTarget>
}
void hitCheck(unsigned char pins){
	//Used by PCINT Interrupt to check whether correct target was hit, compare Target to IR receiver
	//Returns true if correct target was hit
	//TODO: Fix if statement if not correct
	if(pins == currTarget){
 510:	98 13       	cpse	r25, r24
 512:	39 c0       	rjmp	.+114    	; 0x586 <hitCheck+0x7a>
		if(ammoBack == 0){
 514:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <ammoBack>
 518:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <ammoBack+0x1>
 51c:	89 2b       	or	r24, r25
 51e:	b1 f4       	brne	.+44     	; 0x54c <hitCheck+0x40>
			if((bullets + 3) > 6){
 520:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bullets>
 524:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <bullets+0x1>
 528:	03 96       	adiw	r24, 0x03	; 3
 52a:	87 30       	cpi	r24, 0x07	; 7
 52c:	91 05       	cpc	r25, r1
 52e:	38 f0       	brcs	.+14     	; 0x53e <hitCheck+0x32>
				bullets = 6;
 530:	86 e0       	ldi	r24, 0x06	; 6
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bullets+0x1>
 538:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bullets>
 53c:	04 c0       	rjmp	.+8      	; 0x546 <hitCheck+0x3a>
			}
			else{
				bullets = bullets + 3;
 53e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bullets+0x1>
 542:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bullets>
			}
			sendToGun(0x01);
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	cd df       	rcall	.-102    	; 0x4e6 <sendToGun>
		}
		if(pinUp == 1){
 54c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <pinUp>
 550:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <pinUp+0x1>
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	91 05       	cpc	r25, r1
 558:	29 f4       	brne	.+10     	; 0x564 <hitCheck+0x58>
			pinUp = 0;
 55a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <pinUp+0x1>
 55e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <pinUp>
 562:	08 95       	ret
		}
		else if(pinUp == 0){
 564:	89 2b       	or	r24, r25
 566:	79 f4       	brne	.+30     	; 0x586 <hitCheck+0x7a>
			pinUp = 1;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <pinUp+0x1>
 570:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <pinUp>
			score++;
 574:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 578:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <score+0x1>
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <score+0x1>
 582:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <score>
 586:	08 95       	ret

00000588 <__vector_5>:
	}
	else{
		return;
	}
}
ISR(PCINT1_vect){
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	0b b6       	in	r0, 0x3b	; 59
 594:	0f 92       	push	r0
 596:	2f 93       	push	r18
 598:	3f 93       	push	r19
 59a:	4f 93       	push	r20
 59c:	5f 93       	push	r21
 59e:	6f 93       	push	r22
 5a0:	7f 93       	push	r23
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
	pins = (PINB & 0x07);
 5ae:	83 b1       	in	r24, 0x03	; 3
 5b0:	87 70       	andi	r24, 0x07	; 7
 5b2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <pins>
	hitCheck(pins);
 5b6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <pins>
 5ba:	a8 df       	rcall	.-176    	; 0x50c <hitCheck>
}
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	7f 91       	pop	r23
 5ca:	6f 91       	pop	r22
 5cc:	5f 91       	pop	r21
 5ce:	4f 91       	pop	r20
 5d0:	3f 91       	pop	r19
 5d2:	2f 91       	pop	r18
 5d4:	0f 90       	pop	r0
 5d6:	0b be       	out	0x3b, r0	; 59
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <commStateSM>:
		currTarget = 0x04;
	}
	return;
}
enum commStates{commStateSM_init, commStateSM_loop};
int commStateSM(int commState){
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	ec 01       	movw	r28, r24
	unsigned char payload = 0x00;
	switch(commState){
 5e8:	00 97       	sbiw	r24, 0x00	; 0
 5ea:	19 f0       	breq	.+6      	; 0x5f2 <commStateSM+0x10>
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	21 f0       	breq	.+8      	; 0x5f8 <commStateSM+0x16>
 5f0:	0a c0       	rjmp	.+20     	; 0x606 <commStateSM+0x24>
		case commStateSM_init:
		commState = commStateSM_loop;
 5f2:	c1 e0       	ldi	r28, 0x01	; 1
 5f4:	d0 e0       	ldi	r29, 0x00	; 0
 5f6:	07 c0       	rjmp	.+14     	; 0x606 <commStateSM+0x24>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 5f8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		break;
		
		case commStateSM_loop:
		if(USART_HasReceived(0)){ //Message Received
 5fc:	88 23       	and	r24, r24
 5fe:	1c f4       	brge	.+6      	; 0x606 <commStateSM+0x24>
			payload = USART_Receive(0);
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	5f de       	rcall	.-834    	; 0x2c2 <USART_Receive>
			commTranslate(payload);
 604:	f9 de       	rcall	.-526    	; 0x3f8 <commTranslate>
 606:	ce 01       	movw	r24, r28
		}
		commState = commStateSM_loop;
		break;
	}
	return commState;
}
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <timerSM>:
 60e:	cf 93       	push	r28
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
enum timerStates{timerSM_init, timerSM_Countdown, timerSM_GameOver};
int timerSM(int timerState){
 610:	df 93       	push	r29
 612:	ec 01       	movw	r28, r24
 614:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 618:	88 23       	and	r24, r24
 61a:	1c f4       	brge	.+6      	; 0x622 <timerSM+0x14>
		payload = USART_Receive(0);
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	51 de       	rcall	.-862    	; 0x2c2 <USART_Receive>
		commTranslate(payload);
 620:	eb de       	rcall	.-554    	; 0x3f8 <commTranslate>
 622:	c1 30       	cpi	r28, 0x01	; 1
	}
	switch(timerState){
 624:	d1 05       	cpc	r29, r1
 626:	71 f0       	breq	.+28     	; 0x644 <timerSM+0x36>
 628:	c2 30       	cpi	r28, 0x02	; 2
 62a:	d1 05       	cpc	r29, r1
 62c:	c1 f0       	breq	.+48     	; 0x65e <timerSM+0x50>
 62e:	20 97       	sbiw	r28, 0x00	; 0
 630:	c1 f4       	brne	.+48     	; 0x662 <timerSM+0x54>
 632:	8c e3       	ldi	r24, 0x3C	; 60
		case timerSM_init:
		timeLeft = 60;
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timeLeft+0x1>
 63a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timeLeft>
 63e:	c1 e0       	ldi	r28, 0x01	; 1
		timerState = timerSM_Countdown;
 640:	d0 e0       	ldi	r29, 0x00	; 0
 642:	0f c0       	rjmp	.+30     	; 0x662 <timerSM+0x54>
		break;
 644:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timeLeft>

		case timerSM_Countdown:
		if(timeLeft > 0){
 648:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <timeLeft+0x1>
 64c:	00 97       	sbiw	r24, 0x00	; 0
 64e:	31 f0       	breq	.+12     	; 0x65c <timerSM+0x4e>
 650:	01 97       	sbiw	r24, 0x01	; 1
			timeLeft = timeLeft - 1;
 652:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timeLeft+0x1>
 656:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timeLeft>
 65a:	03 c0       	rjmp	.+6      	; 0x662 <timerSM+0x54>
			timerState = timerSM_Countdown;
		}
		else{
			timerState = timerSM_GameOver;
			GameOver();
 65c:	a6 de       	rcall	.-692    	; 0x3aa <GameOver>
 65e:	c0 e0       	ldi	r28, 0x00	; 0
		}
		break;

		case timerSM_GameOver:
		timerState = timerSM_init;
 660:	d0 e0       	ldi	r29, 0x00	; 0
 662:	ce 01       	movw	r24, r28
		break;
	}
	return timerState;
}
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <main>:
 66a:	cf 93       	push	r28
	while(1);
}


int main(void)
{
 66c:	df 93       	push	r29
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	28 97       	sbiw	r28, 0x08	; 8
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	f8 94       	cli
 678:	de bf       	out	0x3e, r29	; 62
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	cd bf       	out	0x3d, r28	; 61

	(PCMSK1) |= (1<< PCINT8);
 67e:	ec e6       	ldi	r30, 0x6C	; 108
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	81 60       	ori	r24, 0x01	; 1
 686:	80 83       	st	Z, r24
	(PCMSK1) |= (1<< PCINT9);
 688:	80 81       	ld	r24, Z
 68a:	82 60       	ori	r24, 0x02	; 2
 68c:	80 83       	st	Z, r24
	(PCMSK1) |= (1<< PCINT10);
 68e:	80 81       	ld	r24, Z
 690:	84 60       	ori	r24, 0x04	; 4
 692:	80 83       	st	Z, r24
	(PCICR) |= (1<< PCIE1);
 694:	e8 e6       	ldi	r30, 0x68	; 104
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	82 60       	ori	r24, 0x02	; 2
 69c:	80 83       	st	Z, r24
	sei();
 69e:	78 94       	sei
	DDRD = 0xFF; PORTD = 0x00;
 6a0:	8f ef       	ldi	r24, 0xFF	; 255
 6a2:	8a b9       	out	0x0a, r24	; 10
 6a4:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0XFF; PORTC = 0x00;
 6a6:	87 b9       	out	0x07, r24	; 7
 6a8:	18 b8       	out	0x08, r1	; 8
	DDRB = 0x00; PORTB = 0xFF;
 6aa:	14 b8       	out	0x04, r1	; 4
 6ac:	85 b9       	out	0x05, r24	; 5
	DDRA = 0xFF; PORTA = 0x00;
 6ae:	81 b9       	out	0x01, r24	; 1
 6b0:	12 b8       	out	0x02, r1	; 2
	LCD_init();
 6b2:	31 dd       	rcall	.-1438   	; 0x116 <LCD_init>
	initUSART(0);
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	d1 dd       	rcall	.-1118   	; 0x25a <initUSART>
	static task task1;
	static task task2;
	static task task3;
	static task task4;

	task *tasks[] = {&task1,&task2,&task3,&task4};
 6b8:	88 e0       	ldi	r24, 0x08	; 8
 6ba:	ea e0       	ldi	r30, 0x0A	; 10
 6bc:	f1 e0       	ldi	r31, 0x01	; 1
 6be:	de 01       	movw	r26, r28
 6c0:	11 96       	adiw	r26, 0x01	; 1
 6c2:	01 90       	ld	r0, Z+
 6c4:	0d 92       	st	X+, r0
 6c6:	8a 95       	dec	r24
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <main+0x58>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	task1.state = timerSM_init;
 6ca:	e9 e7       	ldi	r30, 0x79	; 121
 6cc:	f1 e0       	ldi	r31, 0x01	; 1
 6ce:	10 82       	st	Z, r1
	task1.period = 1000;
 6d0:	88 ee       	ldi	r24, 0xE8	; 232
 6d2:	93 e0       	ldi	r25, 0x03	; 3
 6d4:	a0 e0       	ldi	r26, 0x00	; 0
 6d6:	b0 e0       	ldi	r27, 0x00	; 0
 6d8:	81 83       	std	Z+1, r24	; 0x01
 6da:	92 83       	std	Z+2, r25	; 0x02
 6dc:	a3 83       	std	Z+3, r26	; 0x03
 6de:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = task1.period;
 6e0:	85 83       	std	Z+5, r24	; 0x05
 6e2:	96 83       	std	Z+6, r25	; 0x06
 6e4:	a7 83       	std	Z+7, r26	; 0x07
 6e6:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &timerSM;
 6e8:	87 e0       	ldi	r24, 0x07	; 7
 6ea:	93 e0       	ldi	r25, 0x03	; 3
 6ec:	92 87       	std	Z+10, r25	; 0x0a
 6ee:	81 87       	std	Z+9, r24	; 0x09

	task2.state = targetSelectSM_init;
 6f0:	ee e6       	ldi	r30, 0x6E	; 110
 6f2:	f1 e0       	ldi	r31, 0x01	; 1
 6f4:	10 82       	st	Z, r1
	task2.period = 200;
 6f6:	88 ec       	ldi	r24, 0xC8	; 200
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	a0 e0       	ldi	r26, 0x00	; 0
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	81 83       	std	Z+1, r24	; 0x01
 700:	92 83       	std	Z+2, r25	; 0x02
 702:	a3 83       	std	Z+3, r26	; 0x03
 704:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime = task2.period;
 706:	85 83       	std	Z+5, r24	; 0x05
 708:	96 83       	std	Z+6, r25	; 0x06
 70a:	a7 83       	std	Z+7, r26	; 0x07
 70c:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &targetSelectSM;
 70e:	29 e0       	ldi	r18, 0x09	; 9
 710:	32 e0       	ldi	r19, 0x02	; 2
 712:	32 87       	std	Z+10, r19	; 0x0a
 714:	21 87       	std	Z+9, r18	; 0x09

	task3.state = LCDDisplaySM_update;
 716:	e3 e6       	ldi	r30, 0x63	; 99
 718:	f1 e0       	ldi	r31, 0x01	; 1
 71a:	10 82       	st	Z, r1
	task3.period = 200;
 71c:	81 83       	std	Z+1, r24	; 0x01
 71e:	92 83       	std	Z+2, r25	; 0x02
 720:	a3 83       	std	Z+3, r26	; 0x03
 722:	b4 83       	std	Z+4, r27	; 0x04
	task3.elapsedTime = task3.period;
 724:	85 83       	std	Z+5, r24	; 0x05
 726:	96 83       	std	Z+6, r25	; 0x06
 728:	a7 83       	std	Z+7, r26	; 0x07
 72a:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &LCDDisplaySM;
 72c:	8b e3       	ldi	r24, 0x3B	; 59
 72e:	92 e0       	ldi	r25, 0x02	; 2
 730:	92 87       	std	Z+10, r25	; 0x0a
 732:	81 87       	std	Z+9, r24	; 0x09

	task4.state = commStateSM_init;
 734:	e8 e5       	ldi	r30, 0x58	; 88
 736:	f1 e0       	ldi	r31, 0x01	; 1
 738:	10 82       	st	Z, r1
	task4.period = 50;
 73a:	82 e3       	ldi	r24, 0x32	; 50
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	a0 e0       	ldi	r26, 0x00	; 0
 740:	b0 e0       	ldi	r27, 0x00	; 0
 742:	81 83       	std	Z+1, r24	; 0x01
 744:	92 83       	std	Z+2, r25	; 0x02
 746:	a3 83       	std	Z+3, r26	; 0x03
 748:	b4 83       	std	Z+4, r27	; 0x04
	task4.elapsedTime = task4.period;
 74a:	85 83       	std	Z+5, r24	; 0x05
 74c:	96 83       	std	Z+6, r25	; 0x06
 74e:	a7 83       	std	Z+7, r26	; 0x07
 750:	b0 87       	std	Z+8, r27	; 0x08
	task4.TickFct = &commStateSM;
 752:	81 ef       	ldi	r24, 0xF1	; 241
 754:	92 e0       	ldi	r25, 0x02	; 2
 756:	92 87       	std	Z+10, r25	; 0x0a
 758:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(50);
 75a:	62 e3       	ldi	r22, 0x32	; 50
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 762:	0a dd       	rcall	.-1516   	; 0x178 <TimerSet>
 764:	1a dd       	rcall	.-1484   	; 0x19a <TimerOn>
	unsigned int i;
	//====End of Task Scheduler Setup====
	//Send start game signal to gun
	sendToGun(0x03);
 766:	83 e0       	ldi	r24, 0x03	; 3
 768:	be de       	rcall	.-644    	; 0x4e6 <sendToGun>
 76a:	0f 2e       	mov	r0, r31
 76c:	f0 ec       	ldi	r31, 0xC0	; 192
 76e:	af 2e       	mov	r10, r31
 770:	b1 2c       	mov	r11, r1
 772:	f0 2d       	mov	r31, r0
 774:	6e 01       	movw	r12, r28
 776:	89 e0       	ldi	r24, 0x09	; 9
 778:	c8 0e       	add	r12, r24
 77a:	d1 1c       	adc	r13, r1
 77c:	06 c0       	rjmp	.+12     	; 0x78a <main+0x120>
    while (1)
    {	
		while(USART_HasReceived(0)){
			LCD_DisplayString(1,USART_Receive(0));
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	a0 dd       	rcall	.-1216   	; 0x2c2 <USART_Receive>
 782:	68 2f       	mov	r22, r24
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	de dc       	rcall	.-1604   	; 0x146 <LCD_DisplayString>
 78a:	d5 01       	movw	r26, r10
 78c:	8c 91       	ld	r24, X
 78e:	88 23       	and	r24, r24
	//====End of Task Scheduler Setup====
	//Send start game signal to gun
	sendToGun(0x03);
    while (1)
    {	
		while(USART_HasReceived(0)){
 790:	b4 f3       	brlt	.-20     	; 0x77e <main+0x114>
 792:	fe 01       	movw	r30, r28
 794:	31 96       	adiw	r30, 0x01	; 1
 796:	7f 01       	movw	r14, r30
 798:	d7 01       	movw	r26, r14
			LCD_DisplayString(1,USART_Receive(0));
		}
		for( i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period){
 79a:	0d 91       	ld	r16, X+
 79c:	1d 91       	ld	r17, X+
 79e:	7d 01       	movw	r14, r26
 7a0:	f8 01       	movw	r30, r16
 7a2:	45 81       	ldd	r20, Z+5	; 0x05
 7a4:	56 81       	ldd	r21, Z+6	; 0x06
 7a6:	67 81       	ldd	r22, Z+7	; 0x07
 7a8:	70 85       	ldd	r23, Z+8	; 0x08
 7aa:	81 81       	ldd	r24, Z+1	; 0x01
 7ac:	92 81       	ldd	r25, Z+2	; 0x02
 7ae:	a3 81       	ldd	r26, Z+3	; 0x03
 7b0:	b4 81       	ldd	r27, Z+4	; 0x04
 7b2:	48 17       	cp	r20, r24
 7b4:	59 07       	cpc	r21, r25
 7b6:	6a 07       	cpc	r22, r26
 7b8:	7b 07       	cpc	r23, r27
 7ba:	79 f4       	brne	.+30     	; 0x7da <main+0x170>
 7bc:	80 81       	ld	r24, Z
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 7be:	01 84       	ldd	r0, Z+9	; 0x09
 7c0:	f2 85       	ldd	r31, Z+10	; 0x0a
 7c2:	e0 2d       	mov	r30, r0
 7c4:	08 2e       	mov	r0, r24
 7c6:	00 0c       	add	r0, r0
 7c8:	99 0b       	sbc	r25, r25
 7ca:	09 95       	icall
 7cc:	d8 01       	movw	r26, r16
 7ce:	8c 93       	st	X, r24
 7d0:	f8 01       	movw	r30, r16
				tasks[i]->elapsedTime = 0;
 7d2:	15 82       	std	Z+5, r1	; 0x05
 7d4:	16 82       	std	Z+6, r1	; 0x06
 7d6:	17 82       	std	Z+7, r1	; 0x07
 7d8:	10 86       	std	Z+8, r1	; 0x08
 7da:	f8 01       	movw	r30, r16
			}
			tasks[i] ->elapsedTime += 50;
 7dc:	85 81       	ldd	r24, Z+5	; 0x05
 7de:	96 81       	ldd	r25, Z+6	; 0x06
 7e0:	a7 81       	ldd	r26, Z+7	; 0x07
 7e2:	b0 85       	ldd	r27, Z+8	; 0x08
 7e4:	c2 96       	adiw	r24, 0x32	; 50
 7e6:	a1 1d       	adc	r26, r1
 7e8:	b1 1d       	adc	r27, r1
 7ea:	85 83       	std	Z+5, r24	; 0x05
 7ec:	96 83       	std	Z+6, r25	; 0x06
 7ee:	a7 83       	std	Z+7, r26	; 0x07
 7f0:	b0 87       	std	Z+8, r27	; 0x08
 7f2:	ec 14       	cp	r14, r12
    while (1)
    {	
		while(USART_HasReceived(0)){
			LCD_DisplayString(1,USART_Receive(0));
		}
		for( i = 0; i < numTasks; i++){
 7f4:	fd 04       	cpc	r15, r13
 7f6:	81 f6       	brne	.-96     	; 0x798 <main+0x12e>
 7f8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <TimerFlag>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i] ->elapsedTime += 50;
		}
		while(!TimerFlag);
 7fc:	88 23       	and	r24, r24
 7fe:	e1 f3       	breq	.-8      	; 0x7f8 <main+0x18e>
 800:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <TimerFlag>
		TimerFlag = 0;
 804:	c2 cf       	rjmp	.-124    	; 0x78a <main+0x120>

00000806 <__divmodhi4>:
    }
 806:	97 fb       	bst	r25, 7
 808:	07 2e       	mov	r0, r23
 80a:	16 f4       	brtc	.+4      	; 0x810 <__divmodhi4+0xa>
 80c:	00 94       	com	r0
 80e:	06 d0       	rcall	.+12     	; 0x81c <__divmodhi4_neg1>
 810:	77 fd       	sbrc	r23, 7
 812:	08 d0       	rcall	.+16     	; 0x824 <__divmodhi4_neg2>
 814:	2d d0       	rcall	.+90     	; 0x870 <__udivmodhi4>
 816:	07 fc       	sbrc	r0, 7
 818:	05 d0       	rcall	.+10     	; 0x824 <__divmodhi4_neg2>
 81a:	3e f4       	brtc	.+14     	; 0x82a <__divmodhi4_exit>

0000081c <__divmodhi4_neg1>:
 81c:	90 95       	com	r25
 81e:	81 95       	neg	r24
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	08 95       	ret

00000824 <__divmodhi4_neg2>:
 824:	70 95       	com	r23
 826:	61 95       	neg	r22
 828:	7f 4f       	sbci	r23, 0xFF	; 255

0000082a <__divmodhi4_exit>:
 82a:	08 95       	ret

0000082c <__udivmodsi4>:
 82c:	a1 e2       	ldi	r26, 0x21	; 33
 82e:	1a 2e       	mov	r1, r26
 830:	aa 1b       	sub	r26, r26
 832:	bb 1b       	sub	r27, r27
 834:	fd 01       	movw	r30, r26
 836:	0d c0       	rjmp	.+26     	; 0x852 <__udivmodsi4_ep>

00000838 <__udivmodsi4_loop>:
 838:	aa 1f       	adc	r26, r26
 83a:	bb 1f       	adc	r27, r27
 83c:	ee 1f       	adc	r30, r30
 83e:	ff 1f       	adc	r31, r31
 840:	a2 17       	cp	r26, r18
 842:	b3 07       	cpc	r27, r19
 844:	e4 07       	cpc	r30, r20
 846:	f5 07       	cpc	r31, r21
 848:	20 f0       	brcs	.+8      	; 0x852 <__udivmodsi4_ep>
 84a:	a2 1b       	sub	r26, r18
 84c:	b3 0b       	sbc	r27, r19
 84e:	e4 0b       	sbc	r30, r20
 850:	f5 0b       	sbc	r31, r21

00000852 <__udivmodsi4_ep>:
 852:	66 1f       	adc	r22, r22
 854:	77 1f       	adc	r23, r23
 856:	88 1f       	adc	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	1a 94       	dec	r1
 85c:	69 f7       	brne	.-38     	; 0x838 <__udivmodsi4_loop>
 85e:	60 95       	com	r22
 860:	70 95       	com	r23
 862:	80 95       	com	r24
 864:	90 95       	com	r25
 866:	9b 01       	movw	r18, r22
 868:	ac 01       	movw	r20, r24
 86a:	bd 01       	movw	r22, r26
 86c:	cf 01       	movw	r24, r30
 86e:	08 95       	ret

00000870 <__udivmodhi4>:
 870:	aa 1b       	sub	r26, r26
 872:	bb 1b       	sub	r27, r27
 874:	51 e1       	ldi	r21, 0x11	; 17
 876:	07 c0       	rjmp	.+14     	; 0x886 <__udivmodhi4_ep>

00000878 <__udivmodhi4_loop>:
 878:	aa 1f       	adc	r26, r26
 87a:	bb 1f       	adc	r27, r27
 87c:	a6 17       	cp	r26, r22
 87e:	b7 07       	cpc	r27, r23
 880:	10 f0       	brcs	.+4      	; 0x886 <__udivmodhi4_ep>
 882:	a6 1b       	sub	r26, r22
 884:	b7 0b       	sbc	r27, r23

00000886 <__udivmodhi4_ep>:
 886:	88 1f       	adc	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	5a 95       	dec	r21
 88c:	a9 f7       	brne	.-22     	; 0x878 <__udivmodhi4_loop>
 88e:	80 95       	com	r24
 890:	90 95       	com	r25
 892:	bc 01       	movw	r22, r24
 894:	cd 01       	movw	r24, r26
 896:	08 95       	ret

00000898 <do_rand>:
 898:	8f 92       	push	r8
 89a:	9f 92       	push	r9
 89c:	af 92       	push	r10
 89e:	bf 92       	push	r11
 8a0:	cf 92       	push	r12
 8a2:	df 92       	push	r13
 8a4:	ef 92       	push	r14
 8a6:	ff 92       	push	r15
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	ec 01       	movw	r28, r24
 8ae:	68 81       	ld	r22, Y
 8b0:	79 81       	ldd	r23, Y+1	; 0x01
 8b2:	8a 81       	ldd	r24, Y+2	; 0x02
 8b4:	9b 81       	ldd	r25, Y+3	; 0x03
 8b6:	61 15       	cp	r22, r1
 8b8:	71 05       	cpc	r23, r1
 8ba:	81 05       	cpc	r24, r1
 8bc:	91 05       	cpc	r25, r1
 8be:	21 f4       	brne	.+8      	; 0x8c8 <do_rand+0x30>
 8c0:	64 e2       	ldi	r22, 0x24	; 36
 8c2:	79 ed       	ldi	r23, 0xD9	; 217
 8c4:	8b e5       	ldi	r24, 0x5B	; 91
 8c6:	97 e0       	ldi	r25, 0x07	; 7
 8c8:	2d e1       	ldi	r18, 0x1D	; 29
 8ca:	33 ef       	ldi	r19, 0xF3	; 243
 8cc:	41 e0       	ldi	r20, 0x01	; 1
 8ce:	50 e0       	ldi	r21, 0x00	; 0
 8d0:	13 d3       	rcall	.+1574   	; 0xef8 <__divmodsi4>
 8d2:	49 01       	movw	r8, r18
 8d4:	5a 01       	movw	r10, r20
 8d6:	9b 01       	movw	r18, r22
 8d8:	ac 01       	movw	r20, r24
 8da:	a7 ea       	ldi	r26, 0xA7	; 167
 8dc:	b1 e4       	ldi	r27, 0x41	; 65
 8de:	28 d3       	rcall	.+1616   	; 0xf30 <__muluhisi3>
 8e0:	6b 01       	movw	r12, r22
 8e2:	7c 01       	movw	r14, r24
 8e4:	ac ee       	ldi	r26, 0xEC	; 236
 8e6:	b4 ef       	ldi	r27, 0xF4	; 244
 8e8:	a5 01       	movw	r20, r10
 8ea:	94 01       	movw	r18, r8
 8ec:	2d d3       	rcall	.+1626   	; 0xf48 <__mulohisi3>
 8ee:	dc 01       	movw	r26, r24
 8f0:	cb 01       	movw	r24, r22
 8f2:	8c 0d       	add	r24, r12
 8f4:	9d 1d       	adc	r25, r13
 8f6:	ae 1d       	adc	r26, r14
 8f8:	bf 1d       	adc	r27, r15
 8fa:	b7 ff       	sbrs	r27, 7
 8fc:	03 c0       	rjmp	.+6      	; 0x904 <do_rand+0x6c>
 8fe:	01 97       	sbiw	r24, 0x01	; 1
 900:	a1 09       	sbc	r26, r1
 902:	b0 48       	sbci	r27, 0x80	; 128
 904:	88 83       	st	Y, r24
 906:	99 83       	std	Y+1, r25	; 0x01
 908:	aa 83       	std	Y+2, r26	; 0x02
 90a:	bb 83       	std	Y+3, r27	; 0x03
 90c:	9f 77       	andi	r25, 0x7F	; 127
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	ff 90       	pop	r15
 914:	ef 90       	pop	r14
 916:	df 90       	pop	r13
 918:	cf 90       	pop	r12
 91a:	bf 90       	pop	r11
 91c:	af 90       	pop	r10
 91e:	9f 90       	pop	r9
 920:	8f 90       	pop	r8
 922:	08 95       	ret

00000924 <rand_r>:
 924:	b9 cf       	rjmp	.-142    	; 0x898 <do_rand>

00000926 <rand>:
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	91 e0       	ldi	r25, 0x01	; 1
 92a:	b6 cf       	rjmp	.-148    	; 0x898 <do_rand>

0000092c <srand>:
 92c:	a0 e0       	ldi	r26, 0x00	; 0
 92e:	b0 e0       	ldi	r27, 0x00	; 0
 930:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 934:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 938:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 93c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 940:	08 95       	ret

00000942 <sprintf>:
 942:	0f 93       	push	r16
 944:	1f 93       	push	r17
 946:	cf 93       	push	r28
 948:	df 93       	push	r29
 94a:	cd b7       	in	r28, 0x3d	; 61
 94c:	de b7       	in	r29, 0x3e	; 62
 94e:	2e 97       	sbiw	r28, 0x0e	; 14
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	f8 94       	cli
 954:	de bf       	out	0x3e, r29	; 62
 956:	0f be       	out	0x3f, r0	; 63
 958:	cd bf       	out	0x3d, r28	; 61
 95a:	0d 89       	ldd	r16, Y+21	; 0x15
 95c:	1e 89       	ldd	r17, Y+22	; 0x16
 95e:	86 e0       	ldi	r24, 0x06	; 6
 960:	8c 83       	std	Y+4, r24	; 0x04
 962:	1a 83       	std	Y+2, r17	; 0x02
 964:	09 83       	std	Y+1, r16	; 0x01
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	9f e7       	ldi	r25, 0x7F	; 127
 96a:	9e 83       	std	Y+6, r25	; 0x06
 96c:	8d 83       	std	Y+5, r24	; 0x05
 96e:	ae 01       	movw	r20, r28
 970:	47 5e       	subi	r20, 0xE7	; 231
 972:	5f 4f       	sbci	r21, 0xFF	; 255
 974:	6f 89       	ldd	r22, Y+23	; 0x17
 976:	78 8d       	ldd	r23, Y+24	; 0x18
 978:	ce 01       	movw	r24, r28
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	10 d0       	rcall	.+32     	; 0x99e <vfprintf>
 97e:	ef 81       	ldd	r30, Y+7	; 0x07
 980:	f8 85       	ldd	r31, Y+8	; 0x08
 982:	e0 0f       	add	r30, r16
 984:	f1 1f       	adc	r31, r17
 986:	10 82       	st	Z, r1
 988:	2e 96       	adiw	r28, 0x0e	; 14
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	f8 94       	cli
 98e:	de bf       	out	0x3e, r29	; 62
 990:	0f be       	out	0x3f, r0	; 63
 992:	cd bf       	out	0x3d, r28	; 61
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	1f 91       	pop	r17
 99a:	0f 91       	pop	r16
 99c:	08 95       	ret

0000099e <vfprintf>:
 99e:	2f 92       	push	r2
 9a0:	3f 92       	push	r3
 9a2:	4f 92       	push	r4
 9a4:	5f 92       	push	r5
 9a6:	6f 92       	push	r6
 9a8:	7f 92       	push	r7
 9aa:	8f 92       	push	r8
 9ac:	9f 92       	push	r9
 9ae:	af 92       	push	r10
 9b0:	bf 92       	push	r11
 9b2:	cf 92       	push	r12
 9b4:	df 92       	push	r13
 9b6:	ef 92       	push	r14
 9b8:	ff 92       	push	r15
 9ba:	0f 93       	push	r16
 9bc:	1f 93       	push	r17
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	cd b7       	in	r28, 0x3d	; 61
 9c4:	de b7       	in	r29, 0x3e	; 62
 9c6:	2b 97       	sbiw	r28, 0x0b	; 11
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	6c 01       	movw	r12, r24
 9d4:	7b 01       	movw	r14, r22
 9d6:	8a 01       	movw	r16, r20
 9d8:	fc 01       	movw	r30, r24
 9da:	17 82       	std	Z+7, r1	; 0x07
 9dc:	16 82       	std	Z+6, r1	; 0x06
 9de:	83 81       	ldd	r24, Z+3	; 0x03
 9e0:	81 ff       	sbrs	r24, 1
 9e2:	bf c1       	rjmp	.+894    	; 0xd62 <vfprintf+0x3c4>
 9e4:	ce 01       	movw	r24, r28
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	3c 01       	movw	r6, r24
 9ea:	f6 01       	movw	r30, r12
 9ec:	93 81       	ldd	r25, Z+3	; 0x03
 9ee:	f7 01       	movw	r30, r14
 9f0:	93 fd       	sbrc	r25, 3
 9f2:	85 91       	lpm	r24, Z+
 9f4:	93 ff       	sbrs	r25, 3
 9f6:	81 91       	ld	r24, Z+
 9f8:	7f 01       	movw	r14, r30
 9fa:	88 23       	and	r24, r24
 9fc:	09 f4       	brne	.+2      	; 0xa00 <vfprintf+0x62>
 9fe:	ad c1       	rjmp	.+858    	; 0xd5a <vfprintf+0x3bc>
 a00:	85 32       	cpi	r24, 0x25	; 37
 a02:	39 f4       	brne	.+14     	; 0xa12 <vfprintf+0x74>
 a04:	93 fd       	sbrc	r25, 3
 a06:	85 91       	lpm	r24, Z+
 a08:	93 ff       	sbrs	r25, 3
 a0a:	81 91       	ld	r24, Z+
 a0c:	7f 01       	movw	r14, r30
 a0e:	85 32       	cpi	r24, 0x25	; 37
 a10:	21 f4       	brne	.+8      	; 0xa1a <vfprintf+0x7c>
 a12:	b6 01       	movw	r22, r12
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	d6 d1       	rcall	.+940    	; 0xdc4 <fputc>
 a18:	e8 cf       	rjmp	.-48     	; 0x9ea <vfprintf+0x4c>
 a1a:	91 2c       	mov	r9, r1
 a1c:	21 2c       	mov	r2, r1
 a1e:	31 2c       	mov	r3, r1
 a20:	ff e1       	ldi	r31, 0x1F	; 31
 a22:	f3 15       	cp	r31, r3
 a24:	d8 f0       	brcs	.+54     	; 0xa5c <vfprintf+0xbe>
 a26:	8b 32       	cpi	r24, 0x2B	; 43
 a28:	79 f0       	breq	.+30     	; 0xa48 <vfprintf+0xaa>
 a2a:	38 f4       	brcc	.+14     	; 0xa3a <vfprintf+0x9c>
 a2c:	80 32       	cpi	r24, 0x20	; 32
 a2e:	79 f0       	breq	.+30     	; 0xa4e <vfprintf+0xb0>
 a30:	83 32       	cpi	r24, 0x23	; 35
 a32:	a1 f4       	brne	.+40     	; 0xa5c <vfprintf+0xbe>
 a34:	23 2d       	mov	r18, r3
 a36:	20 61       	ori	r18, 0x10	; 16
 a38:	1d c0       	rjmp	.+58     	; 0xa74 <vfprintf+0xd6>
 a3a:	8d 32       	cpi	r24, 0x2D	; 45
 a3c:	61 f0       	breq	.+24     	; 0xa56 <vfprintf+0xb8>
 a3e:	80 33       	cpi	r24, 0x30	; 48
 a40:	69 f4       	brne	.+26     	; 0xa5c <vfprintf+0xbe>
 a42:	23 2d       	mov	r18, r3
 a44:	21 60       	ori	r18, 0x01	; 1
 a46:	16 c0       	rjmp	.+44     	; 0xa74 <vfprintf+0xd6>
 a48:	83 2d       	mov	r24, r3
 a4a:	82 60       	ori	r24, 0x02	; 2
 a4c:	38 2e       	mov	r3, r24
 a4e:	e3 2d       	mov	r30, r3
 a50:	e4 60       	ori	r30, 0x04	; 4
 a52:	3e 2e       	mov	r3, r30
 a54:	2a c0       	rjmp	.+84     	; 0xaaa <vfprintf+0x10c>
 a56:	f3 2d       	mov	r31, r3
 a58:	f8 60       	ori	r31, 0x08	; 8
 a5a:	1d c0       	rjmp	.+58     	; 0xa96 <vfprintf+0xf8>
 a5c:	37 fc       	sbrc	r3, 7
 a5e:	2d c0       	rjmp	.+90     	; 0xaba <vfprintf+0x11c>
 a60:	20 ed       	ldi	r18, 0xD0	; 208
 a62:	28 0f       	add	r18, r24
 a64:	2a 30       	cpi	r18, 0x0A	; 10
 a66:	40 f0       	brcs	.+16     	; 0xa78 <vfprintf+0xda>
 a68:	8e 32       	cpi	r24, 0x2E	; 46
 a6a:	b9 f4       	brne	.+46     	; 0xa9a <vfprintf+0xfc>
 a6c:	36 fc       	sbrc	r3, 6
 a6e:	75 c1       	rjmp	.+746    	; 0xd5a <vfprintf+0x3bc>
 a70:	23 2d       	mov	r18, r3
 a72:	20 64       	ori	r18, 0x40	; 64
 a74:	32 2e       	mov	r3, r18
 a76:	19 c0       	rjmp	.+50     	; 0xaaa <vfprintf+0x10c>
 a78:	36 fe       	sbrs	r3, 6
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <vfprintf+0xea>
 a7c:	8a e0       	ldi	r24, 0x0A	; 10
 a7e:	98 9e       	mul	r9, r24
 a80:	20 0d       	add	r18, r0
 a82:	11 24       	eor	r1, r1
 a84:	92 2e       	mov	r9, r18
 a86:	11 c0       	rjmp	.+34     	; 0xaaa <vfprintf+0x10c>
 a88:	ea e0       	ldi	r30, 0x0A	; 10
 a8a:	2e 9e       	mul	r2, r30
 a8c:	20 0d       	add	r18, r0
 a8e:	11 24       	eor	r1, r1
 a90:	22 2e       	mov	r2, r18
 a92:	f3 2d       	mov	r31, r3
 a94:	f0 62       	ori	r31, 0x20	; 32
 a96:	3f 2e       	mov	r3, r31
 a98:	08 c0       	rjmp	.+16     	; 0xaaa <vfprintf+0x10c>
 a9a:	8c 36       	cpi	r24, 0x6C	; 108
 a9c:	21 f4       	brne	.+8      	; 0xaa6 <vfprintf+0x108>
 a9e:	83 2d       	mov	r24, r3
 aa0:	80 68       	ori	r24, 0x80	; 128
 aa2:	38 2e       	mov	r3, r24
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <vfprintf+0x10c>
 aa6:	88 36       	cpi	r24, 0x68	; 104
 aa8:	41 f4       	brne	.+16     	; 0xaba <vfprintf+0x11c>
 aaa:	f7 01       	movw	r30, r14
 aac:	93 fd       	sbrc	r25, 3
 aae:	85 91       	lpm	r24, Z+
 ab0:	93 ff       	sbrs	r25, 3
 ab2:	81 91       	ld	r24, Z+
 ab4:	7f 01       	movw	r14, r30
 ab6:	81 11       	cpse	r24, r1
 ab8:	b3 cf       	rjmp	.-154    	; 0xa20 <vfprintf+0x82>
 aba:	98 2f       	mov	r25, r24
 abc:	9f 7d       	andi	r25, 0xDF	; 223
 abe:	95 54       	subi	r25, 0x45	; 69
 ac0:	93 30       	cpi	r25, 0x03	; 3
 ac2:	28 f4       	brcc	.+10     	; 0xace <vfprintf+0x130>
 ac4:	0c 5f       	subi	r16, 0xFC	; 252
 ac6:	1f 4f       	sbci	r17, 0xFF	; 255
 ac8:	9f e3       	ldi	r25, 0x3F	; 63
 aca:	99 83       	std	Y+1, r25	; 0x01
 acc:	0d c0       	rjmp	.+26     	; 0xae8 <vfprintf+0x14a>
 ace:	83 36       	cpi	r24, 0x63	; 99
 ad0:	31 f0       	breq	.+12     	; 0xade <vfprintf+0x140>
 ad2:	83 37       	cpi	r24, 0x73	; 115
 ad4:	71 f0       	breq	.+28     	; 0xaf2 <vfprintf+0x154>
 ad6:	83 35       	cpi	r24, 0x53	; 83
 ad8:	09 f0       	breq	.+2      	; 0xadc <vfprintf+0x13e>
 ada:	55 c0       	rjmp	.+170    	; 0xb86 <vfprintf+0x1e8>
 adc:	20 c0       	rjmp	.+64     	; 0xb1e <vfprintf+0x180>
 ade:	f8 01       	movw	r30, r16
 ae0:	80 81       	ld	r24, Z
 ae2:	89 83       	std	Y+1, r24	; 0x01
 ae4:	0e 5f       	subi	r16, 0xFE	; 254
 ae6:	1f 4f       	sbci	r17, 0xFF	; 255
 ae8:	88 24       	eor	r8, r8
 aea:	83 94       	inc	r8
 aec:	91 2c       	mov	r9, r1
 aee:	53 01       	movw	r10, r6
 af0:	12 c0       	rjmp	.+36     	; 0xb16 <vfprintf+0x178>
 af2:	28 01       	movw	r4, r16
 af4:	f2 e0       	ldi	r31, 0x02	; 2
 af6:	4f 0e       	add	r4, r31
 af8:	51 1c       	adc	r5, r1
 afa:	f8 01       	movw	r30, r16
 afc:	a0 80       	ld	r10, Z
 afe:	b1 80       	ldd	r11, Z+1	; 0x01
 b00:	36 fe       	sbrs	r3, 6
 b02:	03 c0       	rjmp	.+6      	; 0xb0a <vfprintf+0x16c>
 b04:	69 2d       	mov	r22, r9
 b06:	70 e0       	ldi	r23, 0x00	; 0
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <vfprintf+0x170>
 b0a:	6f ef       	ldi	r22, 0xFF	; 255
 b0c:	7f ef       	ldi	r23, 0xFF	; 255
 b0e:	c5 01       	movw	r24, r10
 b10:	4e d1       	rcall	.+668    	; 0xdae <strnlen>
 b12:	4c 01       	movw	r8, r24
 b14:	82 01       	movw	r16, r4
 b16:	f3 2d       	mov	r31, r3
 b18:	ff 77       	andi	r31, 0x7F	; 127
 b1a:	3f 2e       	mov	r3, r31
 b1c:	15 c0       	rjmp	.+42     	; 0xb48 <vfprintf+0x1aa>
 b1e:	28 01       	movw	r4, r16
 b20:	22 e0       	ldi	r18, 0x02	; 2
 b22:	42 0e       	add	r4, r18
 b24:	51 1c       	adc	r5, r1
 b26:	f8 01       	movw	r30, r16
 b28:	a0 80       	ld	r10, Z
 b2a:	b1 80       	ldd	r11, Z+1	; 0x01
 b2c:	36 fe       	sbrs	r3, 6
 b2e:	03 c0       	rjmp	.+6      	; 0xb36 <vfprintf+0x198>
 b30:	69 2d       	mov	r22, r9
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <vfprintf+0x19c>
 b36:	6f ef       	ldi	r22, 0xFF	; 255
 b38:	7f ef       	ldi	r23, 0xFF	; 255
 b3a:	c5 01       	movw	r24, r10
 b3c:	2d d1       	rcall	.+602    	; 0xd98 <strnlen_P>
 b3e:	4c 01       	movw	r8, r24
 b40:	f3 2d       	mov	r31, r3
 b42:	f0 68       	ori	r31, 0x80	; 128
 b44:	3f 2e       	mov	r3, r31
 b46:	82 01       	movw	r16, r4
 b48:	33 fc       	sbrc	r3, 3
 b4a:	19 c0       	rjmp	.+50     	; 0xb7e <vfprintf+0x1e0>
 b4c:	82 2d       	mov	r24, r2
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	88 16       	cp	r8, r24
 b52:	99 06       	cpc	r9, r25
 b54:	a0 f4       	brcc	.+40     	; 0xb7e <vfprintf+0x1e0>
 b56:	b6 01       	movw	r22, r12
 b58:	80 e2       	ldi	r24, 0x20	; 32
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	33 d1       	rcall	.+614    	; 0xdc4 <fputc>
 b5e:	2a 94       	dec	r2
 b60:	f5 cf       	rjmp	.-22     	; 0xb4c <vfprintf+0x1ae>
 b62:	f5 01       	movw	r30, r10
 b64:	37 fc       	sbrc	r3, 7
 b66:	85 91       	lpm	r24, Z+
 b68:	37 fe       	sbrs	r3, 7
 b6a:	81 91       	ld	r24, Z+
 b6c:	5f 01       	movw	r10, r30
 b6e:	b6 01       	movw	r22, r12
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	28 d1       	rcall	.+592    	; 0xdc4 <fputc>
 b74:	21 10       	cpse	r2, r1
 b76:	2a 94       	dec	r2
 b78:	21 e0       	ldi	r18, 0x01	; 1
 b7a:	82 1a       	sub	r8, r18
 b7c:	91 08       	sbc	r9, r1
 b7e:	81 14       	cp	r8, r1
 b80:	91 04       	cpc	r9, r1
 b82:	79 f7       	brne	.-34     	; 0xb62 <vfprintf+0x1c4>
 b84:	e1 c0       	rjmp	.+450    	; 0xd48 <vfprintf+0x3aa>
 b86:	84 36       	cpi	r24, 0x64	; 100
 b88:	11 f0       	breq	.+4      	; 0xb8e <vfprintf+0x1f0>
 b8a:	89 36       	cpi	r24, 0x69	; 105
 b8c:	39 f5       	brne	.+78     	; 0xbdc <vfprintf+0x23e>
 b8e:	f8 01       	movw	r30, r16
 b90:	37 fe       	sbrs	r3, 7
 b92:	07 c0       	rjmp	.+14     	; 0xba2 <vfprintf+0x204>
 b94:	60 81       	ld	r22, Z
 b96:	71 81       	ldd	r23, Z+1	; 0x01
 b98:	82 81       	ldd	r24, Z+2	; 0x02
 b9a:	93 81       	ldd	r25, Z+3	; 0x03
 b9c:	0c 5f       	subi	r16, 0xFC	; 252
 b9e:	1f 4f       	sbci	r17, 0xFF	; 255
 ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <vfprintf+0x214>
 ba2:	60 81       	ld	r22, Z
 ba4:	71 81       	ldd	r23, Z+1	; 0x01
 ba6:	07 2e       	mov	r0, r23
 ba8:	00 0c       	add	r0, r0
 baa:	88 0b       	sbc	r24, r24
 bac:	99 0b       	sbc	r25, r25
 bae:	0e 5f       	subi	r16, 0xFE	; 254
 bb0:	1f 4f       	sbci	r17, 0xFF	; 255
 bb2:	f3 2d       	mov	r31, r3
 bb4:	ff 76       	andi	r31, 0x6F	; 111
 bb6:	3f 2e       	mov	r3, r31
 bb8:	97 ff       	sbrs	r25, 7
 bba:	09 c0       	rjmp	.+18     	; 0xbce <vfprintf+0x230>
 bbc:	90 95       	com	r25
 bbe:	80 95       	com	r24
 bc0:	70 95       	com	r23
 bc2:	61 95       	neg	r22
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255
 bc6:	8f 4f       	sbci	r24, 0xFF	; 255
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	f0 68       	ori	r31, 0x80	; 128
 bcc:	3f 2e       	mov	r3, r31
 bce:	2a e0       	ldi	r18, 0x0A	; 10
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	a3 01       	movw	r20, r6
 bd4:	33 d1       	rcall	.+614    	; 0xe3c <__ultoa_invert>
 bd6:	88 2e       	mov	r8, r24
 bd8:	86 18       	sub	r8, r6
 bda:	44 c0       	rjmp	.+136    	; 0xc64 <vfprintf+0x2c6>
 bdc:	85 37       	cpi	r24, 0x75	; 117
 bde:	31 f4       	brne	.+12     	; 0xbec <vfprintf+0x24e>
 be0:	23 2d       	mov	r18, r3
 be2:	2f 7e       	andi	r18, 0xEF	; 239
 be4:	b2 2e       	mov	r11, r18
 be6:	2a e0       	ldi	r18, 0x0A	; 10
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	25 c0       	rjmp	.+74     	; 0xc36 <vfprintf+0x298>
 bec:	93 2d       	mov	r25, r3
 bee:	99 7f       	andi	r25, 0xF9	; 249
 bf0:	b9 2e       	mov	r11, r25
 bf2:	8f 36       	cpi	r24, 0x6F	; 111
 bf4:	c1 f0       	breq	.+48     	; 0xc26 <vfprintf+0x288>
 bf6:	18 f4       	brcc	.+6      	; 0xbfe <vfprintf+0x260>
 bf8:	88 35       	cpi	r24, 0x58	; 88
 bfa:	79 f0       	breq	.+30     	; 0xc1a <vfprintf+0x27c>
 bfc:	ae c0       	rjmp	.+348    	; 0xd5a <vfprintf+0x3bc>
 bfe:	80 37       	cpi	r24, 0x70	; 112
 c00:	19 f0       	breq	.+6      	; 0xc08 <vfprintf+0x26a>
 c02:	88 37       	cpi	r24, 0x78	; 120
 c04:	21 f0       	breq	.+8      	; 0xc0e <vfprintf+0x270>
 c06:	a9 c0       	rjmp	.+338    	; 0xd5a <vfprintf+0x3bc>
 c08:	e9 2f       	mov	r30, r25
 c0a:	e0 61       	ori	r30, 0x10	; 16
 c0c:	be 2e       	mov	r11, r30
 c0e:	b4 fe       	sbrs	r11, 4
 c10:	0d c0       	rjmp	.+26     	; 0xc2c <vfprintf+0x28e>
 c12:	fb 2d       	mov	r31, r11
 c14:	f4 60       	ori	r31, 0x04	; 4
 c16:	bf 2e       	mov	r11, r31
 c18:	09 c0       	rjmp	.+18     	; 0xc2c <vfprintf+0x28e>
 c1a:	34 fe       	sbrs	r3, 4
 c1c:	0a c0       	rjmp	.+20     	; 0xc32 <vfprintf+0x294>
 c1e:	29 2f       	mov	r18, r25
 c20:	26 60       	ori	r18, 0x06	; 6
 c22:	b2 2e       	mov	r11, r18
 c24:	06 c0       	rjmp	.+12     	; 0xc32 <vfprintf+0x294>
 c26:	28 e0       	ldi	r18, 0x08	; 8
 c28:	30 e0       	ldi	r19, 0x00	; 0
 c2a:	05 c0       	rjmp	.+10     	; 0xc36 <vfprintf+0x298>
 c2c:	20 e1       	ldi	r18, 0x10	; 16
 c2e:	30 e0       	ldi	r19, 0x00	; 0
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <vfprintf+0x298>
 c32:	20 e1       	ldi	r18, 0x10	; 16
 c34:	32 e0       	ldi	r19, 0x02	; 2
 c36:	f8 01       	movw	r30, r16
 c38:	b7 fe       	sbrs	r11, 7
 c3a:	07 c0       	rjmp	.+14     	; 0xc4a <vfprintf+0x2ac>
 c3c:	60 81       	ld	r22, Z
 c3e:	71 81       	ldd	r23, Z+1	; 0x01
 c40:	82 81       	ldd	r24, Z+2	; 0x02
 c42:	93 81       	ldd	r25, Z+3	; 0x03
 c44:	0c 5f       	subi	r16, 0xFC	; 252
 c46:	1f 4f       	sbci	r17, 0xFF	; 255
 c48:	06 c0       	rjmp	.+12     	; 0xc56 <vfprintf+0x2b8>
 c4a:	60 81       	ld	r22, Z
 c4c:	71 81       	ldd	r23, Z+1	; 0x01
 c4e:	80 e0       	ldi	r24, 0x00	; 0
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	0e 5f       	subi	r16, 0xFE	; 254
 c54:	1f 4f       	sbci	r17, 0xFF	; 255
 c56:	a3 01       	movw	r20, r6
 c58:	f1 d0       	rcall	.+482    	; 0xe3c <__ultoa_invert>
 c5a:	88 2e       	mov	r8, r24
 c5c:	86 18       	sub	r8, r6
 c5e:	fb 2d       	mov	r31, r11
 c60:	ff 77       	andi	r31, 0x7F	; 127
 c62:	3f 2e       	mov	r3, r31
 c64:	36 fe       	sbrs	r3, 6
 c66:	0d c0       	rjmp	.+26     	; 0xc82 <vfprintf+0x2e4>
 c68:	23 2d       	mov	r18, r3
 c6a:	2e 7f       	andi	r18, 0xFE	; 254
 c6c:	a2 2e       	mov	r10, r18
 c6e:	89 14       	cp	r8, r9
 c70:	58 f4       	brcc	.+22     	; 0xc88 <vfprintf+0x2ea>
 c72:	34 fe       	sbrs	r3, 4
 c74:	0b c0       	rjmp	.+22     	; 0xc8c <vfprintf+0x2ee>
 c76:	32 fc       	sbrc	r3, 2
 c78:	09 c0       	rjmp	.+18     	; 0xc8c <vfprintf+0x2ee>
 c7a:	83 2d       	mov	r24, r3
 c7c:	8e 7e       	andi	r24, 0xEE	; 238
 c7e:	a8 2e       	mov	r10, r24
 c80:	05 c0       	rjmp	.+10     	; 0xc8c <vfprintf+0x2ee>
 c82:	b8 2c       	mov	r11, r8
 c84:	a3 2c       	mov	r10, r3
 c86:	03 c0       	rjmp	.+6      	; 0xc8e <vfprintf+0x2f0>
 c88:	b8 2c       	mov	r11, r8
 c8a:	01 c0       	rjmp	.+2      	; 0xc8e <vfprintf+0x2f0>
 c8c:	b9 2c       	mov	r11, r9
 c8e:	a4 fe       	sbrs	r10, 4
 c90:	0f c0       	rjmp	.+30     	; 0xcb0 <vfprintf+0x312>
 c92:	fe 01       	movw	r30, r28
 c94:	e8 0d       	add	r30, r8
 c96:	f1 1d       	adc	r31, r1
 c98:	80 81       	ld	r24, Z
 c9a:	80 33       	cpi	r24, 0x30	; 48
 c9c:	21 f4       	brne	.+8      	; 0xca6 <vfprintf+0x308>
 c9e:	9a 2d       	mov	r25, r10
 ca0:	99 7e       	andi	r25, 0xE9	; 233
 ca2:	a9 2e       	mov	r10, r25
 ca4:	09 c0       	rjmp	.+18     	; 0xcb8 <vfprintf+0x31a>
 ca6:	a2 fe       	sbrs	r10, 2
 ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <vfprintf+0x318>
 caa:	b3 94       	inc	r11
 cac:	b3 94       	inc	r11
 cae:	04 c0       	rjmp	.+8      	; 0xcb8 <vfprintf+0x31a>
 cb0:	8a 2d       	mov	r24, r10
 cb2:	86 78       	andi	r24, 0x86	; 134
 cb4:	09 f0       	breq	.+2      	; 0xcb8 <vfprintf+0x31a>
 cb6:	b3 94       	inc	r11
 cb8:	a3 fc       	sbrc	r10, 3
 cba:	10 c0       	rjmp	.+32     	; 0xcdc <vfprintf+0x33e>
 cbc:	a0 fe       	sbrs	r10, 0
 cbe:	06 c0       	rjmp	.+12     	; 0xccc <vfprintf+0x32e>
 cc0:	b2 14       	cp	r11, r2
 cc2:	80 f4       	brcc	.+32     	; 0xce4 <vfprintf+0x346>
 cc4:	28 0c       	add	r2, r8
 cc6:	92 2c       	mov	r9, r2
 cc8:	9b 18       	sub	r9, r11
 cca:	0d c0       	rjmp	.+26     	; 0xce6 <vfprintf+0x348>
 ccc:	b2 14       	cp	r11, r2
 cce:	58 f4       	brcc	.+22     	; 0xce6 <vfprintf+0x348>
 cd0:	b6 01       	movw	r22, r12
 cd2:	80 e2       	ldi	r24, 0x20	; 32
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	76 d0       	rcall	.+236    	; 0xdc4 <fputc>
 cd8:	b3 94       	inc	r11
 cda:	f8 cf       	rjmp	.-16     	; 0xccc <vfprintf+0x32e>
 cdc:	b2 14       	cp	r11, r2
 cde:	18 f4       	brcc	.+6      	; 0xce6 <vfprintf+0x348>
 ce0:	2b 18       	sub	r2, r11
 ce2:	02 c0       	rjmp	.+4      	; 0xce8 <vfprintf+0x34a>
 ce4:	98 2c       	mov	r9, r8
 ce6:	21 2c       	mov	r2, r1
 ce8:	a4 fe       	sbrs	r10, 4
 cea:	0f c0       	rjmp	.+30     	; 0xd0a <vfprintf+0x36c>
 cec:	b6 01       	movw	r22, r12
 cee:	80 e3       	ldi	r24, 0x30	; 48
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	68 d0       	rcall	.+208    	; 0xdc4 <fputc>
 cf4:	a2 fe       	sbrs	r10, 2
 cf6:	16 c0       	rjmp	.+44     	; 0xd24 <vfprintf+0x386>
 cf8:	a1 fc       	sbrc	r10, 1
 cfa:	03 c0       	rjmp	.+6      	; 0xd02 <vfprintf+0x364>
 cfc:	88 e7       	ldi	r24, 0x78	; 120
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <vfprintf+0x368>
 d02:	88 e5       	ldi	r24, 0x58	; 88
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	b6 01       	movw	r22, r12
 d08:	0c c0       	rjmp	.+24     	; 0xd22 <vfprintf+0x384>
 d0a:	8a 2d       	mov	r24, r10
 d0c:	86 78       	andi	r24, 0x86	; 134
 d0e:	51 f0       	breq	.+20     	; 0xd24 <vfprintf+0x386>
 d10:	a1 fe       	sbrs	r10, 1
 d12:	02 c0       	rjmp	.+4      	; 0xd18 <vfprintf+0x37a>
 d14:	8b e2       	ldi	r24, 0x2B	; 43
 d16:	01 c0       	rjmp	.+2      	; 0xd1a <vfprintf+0x37c>
 d18:	80 e2       	ldi	r24, 0x20	; 32
 d1a:	a7 fc       	sbrc	r10, 7
 d1c:	8d e2       	ldi	r24, 0x2D	; 45
 d1e:	b6 01       	movw	r22, r12
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	50 d0       	rcall	.+160    	; 0xdc4 <fputc>
 d24:	89 14       	cp	r8, r9
 d26:	30 f4       	brcc	.+12     	; 0xd34 <vfprintf+0x396>
 d28:	b6 01       	movw	r22, r12
 d2a:	80 e3       	ldi	r24, 0x30	; 48
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	4a d0       	rcall	.+148    	; 0xdc4 <fputc>
 d30:	9a 94       	dec	r9
 d32:	f8 cf       	rjmp	.-16     	; 0xd24 <vfprintf+0x386>
 d34:	8a 94       	dec	r8
 d36:	f3 01       	movw	r30, r6
 d38:	e8 0d       	add	r30, r8
 d3a:	f1 1d       	adc	r31, r1
 d3c:	80 81       	ld	r24, Z
 d3e:	b6 01       	movw	r22, r12
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	40 d0       	rcall	.+128    	; 0xdc4 <fputc>
 d44:	81 10       	cpse	r8, r1
 d46:	f6 cf       	rjmp	.-20     	; 0xd34 <vfprintf+0x396>
 d48:	22 20       	and	r2, r2
 d4a:	09 f4       	brne	.+2      	; 0xd4e <vfprintf+0x3b0>
 d4c:	4e ce       	rjmp	.-868    	; 0x9ea <vfprintf+0x4c>
 d4e:	b6 01       	movw	r22, r12
 d50:	80 e2       	ldi	r24, 0x20	; 32
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	37 d0       	rcall	.+110    	; 0xdc4 <fputc>
 d56:	2a 94       	dec	r2
 d58:	f7 cf       	rjmp	.-18     	; 0xd48 <vfprintf+0x3aa>
 d5a:	f6 01       	movw	r30, r12
 d5c:	86 81       	ldd	r24, Z+6	; 0x06
 d5e:	97 81       	ldd	r25, Z+7	; 0x07
 d60:	02 c0       	rjmp	.+4      	; 0xd66 <vfprintf+0x3c8>
 d62:	8f ef       	ldi	r24, 0xFF	; 255
 d64:	9f ef       	ldi	r25, 0xFF	; 255
 d66:	2b 96       	adiw	r28, 0x0b	; 11
 d68:	0f b6       	in	r0, 0x3f	; 63
 d6a:	f8 94       	cli
 d6c:	de bf       	out	0x3e, r29	; 62
 d6e:	0f be       	out	0x3f, r0	; 63
 d70:	cd bf       	out	0x3d, r28	; 61
 d72:	df 91       	pop	r29
 d74:	cf 91       	pop	r28
 d76:	1f 91       	pop	r17
 d78:	0f 91       	pop	r16
 d7a:	ff 90       	pop	r15
 d7c:	ef 90       	pop	r14
 d7e:	df 90       	pop	r13
 d80:	cf 90       	pop	r12
 d82:	bf 90       	pop	r11
 d84:	af 90       	pop	r10
 d86:	9f 90       	pop	r9
 d88:	8f 90       	pop	r8
 d8a:	7f 90       	pop	r7
 d8c:	6f 90       	pop	r6
 d8e:	5f 90       	pop	r5
 d90:	4f 90       	pop	r4
 d92:	3f 90       	pop	r3
 d94:	2f 90       	pop	r2
 d96:	08 95       	ret

00000d98 <strnlen_P>:
 d98:	fc 01       	movw	r30, r24
 d9a:	05 90       	lpm	r0, Z+
 d9c:	61 50       	subi	r22, 0x01	; 1
 d9e:	70 40       	sbci	r23, 0x00	; 0
 da0:	01 10       	cpse	r0, r1
 da2:	d8 f7       	brcc	.-10     	; 0xd9a <strnlen_P+0x2>
 da4:	80 95       	com	r24
 da6:	90 95       	com	r25
 da8:	8e 0f       	add	r24, r30
 daa:	9f 1f       	adc	r25, r31
 dac:	08 95       	ret

00000dae <strnlen>:
 dae:	fc 01       	movw	r30, r24
 db0:	61 50       	subi	r22, 0x01	; 1
 db2:	70 40       	sbci	r23, 0x00	; 0
 db4:	01 90       	ld	r0, Z+
 db6:	01 10       	cpse	r0, r1
 db8:	d8 f7       	brcc	.-10     	; 0xdb0 <strnlen+0x2>
 dba:	80 95       	com	r24
 dbc:	90 95       	com	r25
 dbe:	8e 0f       	add	r24, r30
 dc0:	9f 1f       	adc	r25, r31
 dc2:	08 95       	ret

00000dc4 <fputc>:
 dc4:	0f 93       	push	r16
 dc6:	1f 93       	push	r17
 dc8:	cf 93       	push	r28
 dca:	df 93       	push	r29
 dcc:	fb 01       	movw	r30, r22
 dce:	23 81       	ldd	r18, Z+3	; 0x03
 dd0:	21 fd       	sbrc	r18, 1
 dd2:	03 c0       	rjmp	.+6      	; 0xdda <fputc+0x16>
 dd4:	8f ef       	ldi	r24, 0xFF	; 255
 dd6:	9f ef       	ldi	r25, 0xFF	; 255
 dd8:	2c c0       	rjmp	.+88     	; 0xe32 <fputc+0x6e>
 dda:	22 ff       	sbrs	r18, 2
 ddc:	16 c0       	rjmp	.+44     	; 0xe0a <fputc+0x46>
 dde:	46 81       	ldd	r20, Z+6	; 0x06
 de0:	57 81       	ldd	r21, Z+7	; 0x07
 de2:	24 81       	ldd	r18, Z+4	; 0x04
 de4:	35 81       	ldd	r19, Z+5	; 0x05
 de6:	42 17       	cp	r20, r18
 de8:	53 07       	cpc	r21, r19
 dea:	44 f4       	brge	.+16     	; 0xdfc <fputc+0x38>
 dec:	a0 81       	ld	r26, Z
 dee:	b1 81       	ldd	r27, Z+1	; 0x01
 df0:	9d 01       	movw	r18, r26
 df2:	2f 5f       	subi	r18, 0xFF	; 255
 df4:	3f 4f       	sbci	r19, 0xFF	; 255
 df6:	31 83       	std	Z+1, r19	; 0x01
 df8:	20 83       	st	Z, r18
 dfa:	8c 93       	st	X, r24
 dfc:	26 81       	ldd	r18, Z+6	; 0x06
 dfe:	37 81       	ldd	r19, Z+7	; 0x07
 e00:	2f 5f       	subi	r18, 0xFF	; 255
 e02:	3f 4f       	sbci	r19, 0xFF	; 255
 e04:	37 83       	std	Z+7, r19	; 0x07
 e06:	26 83       	std	Z+6, r18	; 0x06
 e08:	14 c0       	rjmp	.+40     	; 0xe32 <fputc+0x6e>
 e0a:	8b 01       	movw	r16, r22
 e0c:	ec 01       	movw	r28, r24
 e0e:	fb 01       	movw	r30, r22
 e10:	00 84       	ldd	r0, Z+8	; 0x08
 e12:	f1 85       	ldd	r31, Z+9	; 0x09
 e14:	e0 2d       	mov	r30, r0
 e16:	09 95       	icall
 e18:	89 2b       	or	r24, r25
 e1a:	e1 f6       	brne	.-72     	; 0xdd4 <fputc+0x10>
 e1c:	d8 01       	movw	r26, r16
 e1e:	16 96       	adiw	r26, 0x06	; 6
 e20:	8d 91       	ld	r24, X+
 e22:	9c 91       	ld	r25, X
 e24:	17 97       	sbiw	r26, 0x07	; 7
 e26:	01 96       	adiw	r24, 0x01	; 1
 e28:	17 96       	adiw	r26, 0x07	; 7
 e2a:	9c 93       	st	X, r25
 e2c:	8e 93       	st	-X, r24
 e2e:	16 97       	sbiw	r26, 0x06	; 6
 e30:	ce 01       	movw	r24, r28
 e32:	df 91       	pop	r29
 e34:	cf 91       	pop	r28
 e36:	1f 91       	pop	r17
 e38:	0f 91       	pop	r16
 e3a:	08 95       	ret

00000e3c <__ultoa_invert>:
 e3c:	fa 01       	movw	r30, r20
 e3e:	aa 27       	eor	r26, r26
 e40:	28 30       	cpi	r18, 0x08	; 8
 e42:	51 f1       	breq	.+84     	; 0xe98 <__ultoa_invert+0x5c>
 e44:	20 31       	cpi	r18, 0x10	; 16
 e46:	81 f1       	breq	.+96     	; 0xea8 <__ultoa_invert+0x6c>
 e48:	e8 94       	clt
 e4a:	6f 93       	push	r22
 e4c:	6e 7f       	andi	r22, 0xFE	; 254
 e4e:	6e 5f       	subi	r22, 0xFE	; 254
 e50:	7f 4f       	sbci	r23, 0xFF	; 255
 e52:	8f 4f       	sbci	r24, 0xFF	; 255
 e54:	9f 4f       	sbci	r25, 0xFF	; 255
 e56:	af 4f       	sbci	r26, 0xFF	; 255
 e58:	b1 e0       	ldi	r27, 0x01	; 1
 e5a:	3e d0       	rcall	.+124    	; 0xed8 <__ultoa_invert+0x9c>
 e5c:	b4 e0       	ldi	r27, 0x04	; 4
 e5e:	3c d0       	rcall	.+120    	; 0xed8 <__ultoa_invert+0x9c>
 e60:	67 0f       	add	r22, r23
 e62:	78 1f       	adc	r23, r24
 e64:	89 1f       	adc	r24, r25
 e66:	9a 1f       	adc	r25, r26
 e68:	a1 1d       	adc	r26, r1
 e6a:	68 0f       	add	r22, r24
 e6c:	79 1f       	adc	r23, r25
 e6e:	8a 1f       	adc	r24, r26
 e70:	91 1d       	adc	r25, r1
 e72:	a1 1d       	adc	r26, r1
 e74:	6a 0f       	add	r22, r26
 e76:	71 1d       	adc	r23, r1
 e78:	81 1d       	adc	r24, r1
 e7a:	91 1d       	adc	r25, r1
 e7c:	a1 1d       	adc	r26, r1
 e7e:	20 d0       	rcall	.+64     	; 0xec0 <__ultoa_invert+0x84>
 e80:	09 f4       	brne	.+2      	; 0xe84 <__ultoa_invert+0x48>
 e82:	68 94       	set
 e84:	3f 91       	pop	r19
 e86:	2a e0       	ldi	r18, 0x0A	; 10
 e88:	26 9f       	mul	r18, r22
 e8a:	11 24       	eor	r1, r1
 e8c:	30 19       	sub	r19, r0
 e8e:	30 5d       	subi	r19, 0xD0	; 208
 e90:	31 93       	st	Z+, r19
 e92:	de f6       	brtc	.-74     	; 0xe4a <__ultoa_invert+0xe>
 e94:	cf 01       	movw	r24, r30
 e96:	08 95       	ret
 e98:	46 2f       	mov	r20, r22
 e9a:	47 70       	andi	r20, 0x07	; 7
 e9c:	40 5d       	subi	r20, 0xD0	; 208
 e9e:	41 93       	st	Z+, r20
 ea0:	b3 e0       	ldi	r27, 0x03	; 3
 ea2:	0f d0       	rcall	.+30     	; 0xec2 <__ultoa_invert+0x86>
 ea4:	c9 f7       	brne	.-14     	; 0xe98 <__ultoa_invert+0x5c>
 ea6:	f6 cf       	rjmp	.-20     	; 0xe94 <__ultoa_invert+0x58>
 ea8:	46 2f       	mov	r20, r22
 eaa:	4f 70       	andi	r20, 0x0F	; 15
 eac:	40 5d       	subi	r20, 0xD0	; 208
 eae:	4a 33       	cpi	r20, 0x3A	; 58
 eb0:	18 f0       	brcs	.+6      	; 0xeb8 <__ultoa_invert+0x7c>
 eb2:	49 5d       	subi	r20, 0xD9	; 217
 eb4:	31 fd       	sbrc	r19, 1
 eb6:	40 52       	subi	r20, 0x20	; 32
 eb8:	41 93       	st	Z+, r20
 eba:	02 d0       	rcall	.+4      	; 0xec0 <__ultoa_invert+0x84>
 ebc:	a9 f7       	brne	.-22     	; 0xea8 <__ultoa_invert+0x6c>
 ebe:	ea cf       	rjmp	.-44     	; 0xe94 <__ultoa_invert+0x58>
 ec0:	b4 e0       	ldi	r27, 0x04	; 4
 ec2:	a6 95       	lsr	r26
 ec4:	97 95       	ror	r25
 ec6:	87 95       	ror	r24
 ec8:	77 95       	ror	r23
 eca:	67 95       	ror	r22
 ecc:	ba 95       	dec	r27
 ece:	c9 f7       	brne	.-14     	; 0xec2 <__ultoa_invert+0x86>
 ed0:	00 97       	sbiw	r24, 0x00	; 0
 ed2:	61 05       	cpc	r22, r1
 ed4:	71 05       	cpc	r23, r1
 ed6:	08 95       	ret
 ed8:	9b 01       	movw	r18, r22
 eda:	ac 01       	movw	r20, r24
 edc:	0a 2e       	mov	r0, r26
 ede:	06 94       	lsr	r0
 ee0:	57 95       	ror	r21
 ee2:	47 95       	ror	r20
 ee4:	37 95       	ror	r19
 ee6:	27 95       	ror	r18
 ee8:	ba 95       	dec	r27
 eea:	c9 f7       	brne	.-14     	; 0xede <__ultoa_invert+0xa2>
 eec:	62 0f       	add	r22, r18
 eee:	73 1f       	adc	r23, r19
 ef0:	84 1f       	adc	r24, r20
 ef2:	95 1f       	adc	r25, r21
 ef4:	a0 1d       	adc	r26, r0
 ef6:	08 95       	ret

00000ef8 <__divmodsi4>:
 ef8:	05 2e       	mov	r0, r21
 efa:	97 fb       	bst	r25, 7
 efc:	16 f4       	brtc	.+4      	; 0xf02 <__divmodsi4+0xa>
 efe:	00 94       	com	r0
 f00:	0f d0       	rcall	.+30     	; 0xf20 <__negsi2>
 f02:	57 fd       	sbrc	r21, 7
 f04:	05 d0       	rcall	.+10     	; 0xf10 <__divmodsi4_neg2>
 f06:	92 dc       	rcall	.-1756   	; 0x82c <__udivmodsi4>
 f08:	07 fc       	sbrc	r0, 7
 f0a:	02 d0       	rcall	.+4      	; 0xf10 <__divmodsi4_neg2>
 f0c:	46 f4       	brtc	.+16     	; 0xf1e <__divmodsi4_exit>
 f0e:	08 c0       	rjmp	.+16     	; 0xf20 <__negsi2>

00000f10 <__divmodsi4_neg2>:
 f10:	50 95       	com	r21
 f12:	40 95       	com	r20
 f14:	30 95       	com	r19
 f16:	21 95       	neg	r18
 f18:	3f 4f       	sbci	r19, 0xFF	; 255
 f1a:	4f 4f       	sbci	r20, 0xFF	; 255
 f1c:	5f 4f       	sbci	r21, 0xFF	; 255

00000f1e <__divmodsi4_exit>:
 f1e:	08 95       	ret

00000f20 <__negsi2>:
 f20:	90 95       	com	r25
 f22:	80 95       	com	r24
 f24:	70 95       	com	r23
 f26:	61 95       	neg	r22
 f28:	7f 4f       	sbci	r23, 0xFF	; 255
 f2a:	8f 4f       	sbci	r24, 0xFF	; 255
 f2c:	9f 4f       	sbci	r25, 0xFF	; 255
 f2e:	08 95       	ret

00000f30 <__muluhisi3>:
 f30:	0f d0       	rcall	.+30     	; 0xf50 <__umulhisi3>
 f32:	a5 9f       	mul	r26, r21
 f34:	90 0d       	add	r25, r0
 f36:	b4 9f       	mul	r27, r20
 f38:	90 0d       	add	r25, r0
 f3a:	a4 9f       	mul	r26, r20
 f3c:	80 0d       	add	r24, r0
 f3e:	91 1d       	adc	r25, r1
 f40:	11 24       	eor	r1, r1
 f42:	08 95       	ret

00000f44 <__mulshisi3>:
 f44:	b7 ff       	sbrs	r27, 7
 f46:	f4 cf       	rjmp	.-24     	; 0xf30 <__muluhisi3>

00000f48 <__mulohisi3>:
 f48:	f3 df       	rcall	.-26     	; 0xf30 <__muluhisi3>
 f4a:	82 1b       	sub	r24, r18
 f4c:	93 0b       	sbc	r25, r19
 f4e:	08 95       	ret

00000f50 <__umulhisi3>:
 f50:	a2 9f       	mul	r26, r18
 f52:	b0 01       	movw	r22, r0
 f54:	b3 9f       	mul	r27, r19
 f56:	c0 01       	movw	r24, r0
 f58:	a3 9f       	mul	r26, r19
 f5a:	70 0d       	add	r23, r0
 f5c:	81 1d       	adc	r24, r1
 f5e:	11 24       	eor	r1, r1
 f60:	91 1d       	adc	r25, r1
 f62:	b2 9f       	mul	r27, r18
 f64:	70 0d       	add	r23, r0
 f66:	81 1d       	adc	r24, r1
 f68:	11 24       	eor	r1, r1
 f6a:	91 1d       	adc	r25, r1
 f6c:	08 95       	ret

00000f6e <_exit>:
 f6e:	f8 94       	cli

00000f70 <__stop_program>:
 f70:	ff cf       	rjmp	.-2      	; 0xf70 <__stop_program>
