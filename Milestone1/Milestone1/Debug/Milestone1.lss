
Milestone1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000fd8  0000106c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800158  00800158  000010c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014db  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a78  00000000  00000000  00002753  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af7  00000000  00000000  000031cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00003cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e1  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1b  00000000  00000000  000047ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	e9 c2       	rjmp	.+1490   	; 0x5e8 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d6 c0       	rjmp	.+428    	; 0x1e2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 35       	cpi	r26, 0x58	; 88
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e5       	ldi	r26, 0x58	; 88
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 3a       	cpi	r26, 0xA1	; 161
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0f d3       	rcall	.+1566   	; 0x6e2 <main>
  c4:	87 c7       	rjmp	.+3854   	; 0xfd4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerSet>:
 178:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 17c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 180:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 184:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
 188:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <_avr_timer_cntcurr>
 18c:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <_avr_timer_cntcurr+0x1>
 190:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <_avr_timer_cntcurr+0x2>
 194:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <_avr_timer_cntcurr+0x3>
 198:	08 95       	ret

0000019a <TimerOn>:
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1a0:	8d e7       	ldi	r24, 0x7D	; 125
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 1be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 1c2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 1c6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 1ca:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 1ce:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 1d2:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 1d6:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 1da:	8f b7       	in	r24, 0x3f	; 63
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8f bf       	out	0x3f, r24	; 63
 1e0:	08 95       	ret

000001e2 <__vector_13>:
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_avr_timer_cntcurr>
 1f8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <_avr_timer_cntcurr+0x1>
 1fc:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <_avr_timer_cntcurr+0x2>
 200:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <_avr_timer_cntcurr+0x3>
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	a1 09       	sbc	r26, r1
 208:	b1 09       	sbc	r27, r1
 20a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 20e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 212:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 216:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 21a:	89 2b       	or	r24, r25
 21c:	8a 2b       	or	r24, r26
 21e:	8b 2b       	or	r24, r27
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_13+0x66>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <TimerFlag>
 228:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 22c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 230:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 234:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 238:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <_avr_timer_cntcurr>
 23c:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <_avr_timer_cntcurr+0x1>
 240:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <_avr_timer_cntcurr+0x2>
 244:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <_avr_timer_cntcurr+0x3>
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <initUSART>:
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	81 f0       	breq	.+32     	; 0x27e <initUSART+0x24>
 25e:	e1 ec       	ldi	r30, 0xC1	; 193
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 61       	ori	r24, 0x18	; 24
 266:	80 83       	st	Z, r24
 268:	e2 ec       	ldi	r30, 0xC2	; 194
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	80 83       	st	Z, r24
 272:	83 e3       	ldi	r24, 0x33	; 51
 274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 27c:	08 95       	ret
 27e:	e9 ec       	ldi	r30, 0xC9	; 201
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 61       	ori	r24, 0x18	; 24
 286:	80 83       	st	Z, r24
 288:	ea ec       	ldi	r30, 0xCA	; 202
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	80 83       	st	Z, r24
 292:	83 e3       	ldi	r24, 0x33	; 51
 294:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 298:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 29c:	08 95       	ret

0000029e <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	29 f4       	brne	.+10     	; 0x2ac <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2a2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 2a6:	88 23       	and	r24, r24
 2a8:	74 f0       	brlt	.+28     	; 0x2c6 <USART_Flush+0x28>
 2aa:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 2ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2b0:	88 23       	and	r24, r24
 2b2:	8c f4       	brge	.+34     	; 0x2d6 <USART_Flush+0x38>
 2b4:	a6 ec       	ldi	r26, 0xC6	; 198
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	8c 91       	ld	r24, X
 2be:	80 81       	ld	r24, Z
 2c0:	88 23       	and	r24, r24
 2c2:	e4 f3       	brlt	.-8      	; 0x2bc <USART_Flush+0x1e>
 2c4:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2c6:	ae ec       	ldi	r26, 0xCE	; 206
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e8 ec       	ldi	r30, 0xC8	; 200
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	8c 91       	ld	r24, X
 2d0:	80 81       	ld	r24, Z
 2d2:	88 23       	and	r24, r24
 2d4:	e4 f3       	brlt	.-8      	; 0x2ce <USART_Flush+0x30>
 2d6:	08 95       	ret

000002d8 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	41 f0       	breq	.+16     	; 0x2ec <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	90 81       	ld	r25, Z
 2e2:	95 ff       	sbrs	r25, 5
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <USART_Send+0x8>
		UDR0 = sendMe;
 2e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2ea:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 2ec:	e8 ec       	ldi	r30, 0xC8	; 200
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	90 81       	ld	r25, Z
 2f2:	95 ff       	sbrs	r25, 5
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <USART_Send+0x18>
		UDR1 = sendMe;
 2f6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2fa:	08 95       	ret

000002fc <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	41 f0       	breq	.+16     	; 0x310 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 300:	e0 ec       	ldi	r30, 0xC0	; 192
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	88 23       	and	r24, r24
 308:	ec f7       	brge	.-6      	; 0x304 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 30a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 30e:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 310:	e8 ec       	ldi	r30, 0xC8	; 200
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	88 23       	and	r24, r24
 318:	ec f7       	brge	.-6      	; 0x314 <USART_Receive+0x18>
		return UDR1;
 31a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 31e:	08 95       	ret

00000320 <DisplayString>:
	pins = (PINB & 0x07);
	hitCheck(pins);
}


void DisplayString( unsigned char column, const unsigned char* string) {
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
	unsigned char c = column;
	while(*string) {
 326:	fb 01       	movw	r30, r22
 328:	90 81       	ld	r25, Z
 32a:	99 23       	and	r25, r25
 32c:	51 f0       	breq	.+20     	; 0x342 <DisplayString+0x22>
 32e:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 330:	11 e0       	ldi	r17, 0x01	; 1
 332:	18 0f       	add	r17, r24
 334:	e8 de       	rcall	.-560    	; 0x106 <LCD_Cursor>
		LCD_WriteData(*string++);
 336:	89 91       	ld	r24, Y+
 338:	fd de       	rcall	.-518    	; 0x134 <LCD_WriteData>


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 33a:	81 2f       	mov	r24, r17
}


void DisplayString( unsigned char column, const unsigned char* string) {
	unsigned char c = column;
	while(*string) {
 33c:	98 81       	ld	r25, Y
 33e:	91 11       	cpse	r25, r1
 340:	f7 cf       	rjmp	.-18     	; 0x330 <DisplayString+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	08 95       	ret

0000034a <randTarget>:
}
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
	USART_Send(sendValue,0);
}

void randTarget(){
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
	//TODO FINISH LED COLORS AND OUTPUT
	randomNumber = rand()%3;
 34e:	1e d3       	rcall	.+1596   	; 0x98c <rand>
 350:	c3 e0       	ldi	r28, 0x03	; 3
 352:	d0 e0       	ldi	r29, 0x00	; 0
 354:	be 01       	movw	r22, r28
 356:	8a d2       	rcall	.+1300   	; 0x86c <__divmodhi4>
 358:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <randomNumber+0x1>
 35c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <randomNumber>
	ammoBack = rand()% 3;
 360:	15 d3       	rcall	.+1578   	; 0x98c <rand>
 362:	be 01       	movw	r22, r28
 364:	83 d2       	rcall	.+1286   	; 0x86c <__divmodhi4>
 366:	28 2f       	mov	r18, r24
 368:	39 2f       	mov	r19, r25
 36a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <ammoBack>
 36e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <ammoBack+0x1>
 372:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <randomNumber>
	if(randomNumber == 0){
 376:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <randomNumber+0x1>
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	99 f4       	brne	.+38     	; 0x3a4 <randTarget+0x5a>
 37e:	23 2b       	or	r18, r19
		if(ammoBack == 0){
 380:	39 f4       	brne	.+14     	; 0x390 <randTarget+0x46>
 382:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 384:	87 e0       	ldi	r24, 0x07	; 7
			PORTA = 0X07;
 386:	82 b9       	out	0x02, r24	; 2
 388:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 38a:	83 7e       	andi	r24, 0xE3	; 227
 38c:	8b b9       	out	0x0b, r24	; 11
 38e:	06 c0       	rjmp	.+12     	; 0x39c <randTarget+0x52>
 390:	12 b8       	out	0x02, r1	; 2
		}
		else{
			//Green Light
			PORTA = 0x00;
 392:	82 e0       	ldi	r24, 0x02	; 2
			PORTA = 0x02;
 394:	82 b9       	out	0x02, r24	; 2
 396:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 398:	83 7e       	andi	r24, 0xE3	; 227
 39a:	8b b9       	out	0x0b, r24	; 11
 39c:	81 e0       	ldi	r24, 0x01	; 1
		}
		currTarget = 0x01;
 39e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3a2:	27 c0       	rjmp	.+78     	; 0x3f2 <randTarget+0xa8>
 3a4:	01 97       	sbiw	r24, 0x01	; 1
	}
	else if (randomNumber == 1){
 3a6:	99 f4       	brne	.+38     	; 0x3ce <randTarget+0x84>
 3a8:	23 2b       	or	r18, r19
		if(ammoBack == 0){
 3aa:	39 f4       	brne	.+14     	; 0x3ba <randTarget+0x70>
 3ac:	12 b8       	out	0x02, r1	; 2
			//White Light
			PORTA = 0x00;
 3ae:	88 e3       	ldi	r24, 0x38	; 56
			PORTA = 0x38;
 3b0:	82 b9       	out	0x02, r24	; 2
 3b2:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 3b4:	83 7e       	andi	r24, 0xE3	; 227
 3b6:	8b b9       	out	0x0b, r24	; 11
 3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <randTarget+0x7c>
 3ba:	12 b8       	out	0x02, r1	; 2
		}
		else{
			//Green Light
			PORTA = 0x00;
 3bc:	80 e1       	ldi	r24, 0x10	; 16
			PORTA = 0x10;
 3be:	82 b9       	out	0x02, r24	; 2
 3c0:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD & 0xE3;
 3c2:	83 7e       	andi	r24, 0xE3	; 227
 3c4:	8b b9       	out	0x0b, r24	; 11
 3c6:	82 e0       	ldi	r24, 0x02	; 2
		}		
		currTarget = 0x02;
 3c8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3cc:	12 c0       	rjmp	.+36     	; 0x3f2 <randTarget+0xa8>
 3ce:	23 2b       	or	r18, r19
	}
	else{
		if(ammoBack == 0){
 3d0:	41 f4       	brne	.+16     	; 0x3e2 <randTarget+0x98>
 3d2:	8b b1       	in	r24, 0x0b	; 11
			//White Light
			PORTD = PORTD & 0xE3;
 3d4:	83 7e       	andi	r24, 0xE3	; 227
 3d6:	8b b9       	out	0x0b, r24	; 11
 3d8:	8b b1       	in	r24, 0x0b	; 11
			PORTD = PORTD | 0x01C;
 3da:	8c 61       	ori	r24, 0x1C	; 28
 3dc:	8b b9       	out	0x0b, r24	; 11
 3de:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 3e0:	05 c0       	rjmp	.+10     	; 0x3ec <randTarget+0xa2>
 3e2:	8b b1       	in	r24, 0x0b	; 11
		}
		else{
			//Green Light
			PORTD = PORTD & 0xE3;
 3e4:	83 7e       	andi	r24, 0xE3	; 227
 3e6:	8b b9       	out	0x0b, r24	; 11
 3e8:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD = PORTD | 0x08;
 3ea:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
 3ec:	84 e0       	ldi	r24, 0x04	; 4
		}
		currTarget = 0x04;
 3ee:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
 3f2:	df 91       	pop	r29
	}
	return;
}
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <GameOver>:
 3f8:	cf 93       	push	r28
		break;
	}
	return commState;
}

void GameOver(){
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	c0 54       	subi	r28, 0x40	; 64
 402:	d1 09       	sbc	r29, r1
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
	char gameOverString[64];
	sendToGun(0x02);
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	93 d0       	rcall	.+294    	; 0x538 <sendToGun>
	sprintf(gameOverString,"Game Over,      Final Score: %d",score);
 412:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x1>
 416:	8f 93       	push	r24
 418:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 41c:	8f 93       	push	r24
 41e:	82 e1       	ldi	r24, 0x12	; 18
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	9f 93       	push	r25
 424:	8f 93       	push	r24
 426:	8e 01       	movw	r16, r28
 428:	0f 5f       	subi	r16, 0xFF	; 255
 42a:	1f 4f       	sbci	r17, 0xFF	; 255
 42c:	1f 93       	push	r17
 42e:	0f 93       	push	r16
 430:	bb d2       	rcall	.+1398   	; 0x9a8 <sprintf>
	LCD_DisplayString(1, gameOverString);
 432:	b8 01       	movw	r22, r16
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	87 de       	rcall	.-754    	; 0x146 <LCD_DisplayString>
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	ff cf       	rjmp	.-2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>

00000446 <commTranslate>:
volatile unsigned char pins = 0;
unsigned int bullets = 6;
//====END OF GLOBALS=====
void commTranslate(unsigned char data){
	//LCD_DisplayString(1,data);
	if(data == 0xFF){
 446:	8f 3f       	cpi	r24, 0xFF	; 255
 448:	09 f4       	brne	.+2      	; 0x44c <commTranslate+0x6>
		GameOver();
 44a:	d6 df       	rcall	.-84     	; 0x3f8 <GameOver>
	}
	else{
		bullets = data;
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bullets+0x1>
 452:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bullets>
 456:	08 95       	ret

00000458 <targetSelectSM>:
	}
	return timerState;
}

enum targetSelectStates {targetSelectSM_init, targetSelectSM_targetSelect, targetSelectSM_hitWait};
int targetSelectSM(int targetSelectState){
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	ec 01       	movw	r28, r24
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 45e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 462:	88 23       	and	r24, r24
 464:	1c f4       	brge	.+6      	; 0x46c <targetSelectSM+0x14>
		payload = USART_Receive(0);
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	49 df       	rcall	.-366    	; 0x2fc <USART_Receive>
		commTranslate(payload);
 46a:	ed df       	rcall	.-38     	; 0x446 <commTranslate>
 46c:	c1 30       	cpi	r28, 0x01	; 1
	}
	switch(targetSelectState){
 46e:	d1 05       	cpc	r29, r1
 470:	61 f0       	breq	.+24     	; 0x48a <targetSelectSM+0x32>
 472:	c2 30       	cpi	r28, 0x02	; 2
 474:	d1 05       	cpc	r29, r1
 476:	69 f0       	breq	.+26     	; 0x492 <targetSelectSM+0x3a>
 478:	20 97       	sbiw	r28, 0x00	; 0
 47a:	e1 f4       	brne	.+56     	; 0x4b4 <targetSelectSM+0x5c>
 47c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <score+0x1>
		case targetSelectSM_init:
		score = 0;
 480:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <score>
 484:	c1 e0       	ldi	r28, 0x01	; 1
		targetSelectState = targetSelectSM_targetSelect;
 486:	d0 e0       	ldi	r29, 0x00	; 0
		break;
 488:	15 c0       	rjmp	.+42     	; 0x4b4 <targetSelectSM+0x5c>

		case targetSelectSM_targetSelect:
		randTarget();
 48a:	5f df       	rcall	.-322    	; 0x34a <randTarget>
 48c:	c2 e0       	ldi	r28, 0x02	; 2
		targetSelectState = targetSelectSM_hitWait;
 48e:	d0 e0       	ldi	r29, 0x00	; 0
 490:	11 c0       	rjmp	.+34     	; 0x4b4 <targetSelectSM+0x5c>
		break;
 492:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <wait>

		case targetSelectSM_hitWait:
		++wait;
 496:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <wait+0x1>
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <wait+0x1>
 4a0:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <wait>
 4a4:	0a 97       	sbiw	r24, 0x0a	; 10
		if(wait == 10){ //2 Seconds is over, time to switch targets
 4a6:	31 f4       	brne	.+12     	; 0x4b4 <targetSelectSM+0x5c>
 4a8:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <wait+0x1>
			wait = 0;
 4ac:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <wait>
 4b0:	c1 e0       	ldi	r28, 0x01	; 1
			targetSelectState = targetSelectSM_targetSelect;
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
 4b4:	ce 01       	movw	r24, r28
			targetSelectState = targetSelectSM_hitWait;
		}
		break;
	}
	return targetSelectState;
}
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <LCDDisplaySM>:
 4bc:	1f 93       	push	r17

enum LCDDisplayStates{LCDDisplaySM_update, LCDDisplaySM_GameOver};
int LCDDisplaySM(int LCDDisplayState){
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	ec 01       	movw	r28, r24
 4c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 4c8:	88 23       	and	r24, r24
 4ca:	3c f4       	brge	.+14     	; 0x4da <LCDDisplaySM+0x1e>
		payload = USART_Receive(0);
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	16 df       	rcall	.-468    	; 0x2fc <USART_Receive>
 4d0:	18 2f       	mov	r17, r24
		USART_Flush(0);
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	e4 de       	rcall	.-568    	; 0x29e <USART_Flush>
		commTranslate(payload);
 4d6:	81 2f       	mov	r24, r17
 4d8:	b6 df       	rcall	.-148    	; 0x446 <commTranslate>
 4da:	cd 2b       	or	r28, r29
	}
	switch(LCDDisplayState){
 4dc:	39 f5       	brne	.+78     	; 0x52c <LCDDisplaySM+0x70>
 4de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <bullets+0x1>
		case LCDDisplaySM_update:
		sprintf(combineString,"Time: %02d        Score: %d Ammo:%d ",timeLeft,score,bullets);
 4e2:	8f 93       	push	r24
 4e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bullets>
 4e8:	8f 93       	push	r24
 4ea:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x1>
 4ee:	8f 93       	push	r24
 4f0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 4f4:	8f 93       	push	r24
 4f6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <timeLeft+0x1>
 4fa:	8f 93       	push	r24
 4fc:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timeLeft>
 500:	8f 93       	push	r24
 502:	82 e3       	ldi	r24, 0x32	; 50
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	9f 93       	push	r25
 508:	8f 93       	push	r24
 50a:	89 e9       	ldi	r24, 0x99	; 153
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	9f 93       	push	r25
 510:	8f 93       	push	r24
 512:	4a d2       	rcall	.+1172   	; 0x9a8 <sprintf>
 514:	69 e9       	ldi	r22, 0x99	; 153
		DisplayString(1,combineString);
 516:	71 e0       	ldi	r23, 0x01	; 1
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	02 df       	rcall	.-508    	; 0x320 <DisplayString>
 51c:	8d b7       	in	r24, 0x3d	; 61
 51e:	9e b7       	in	r25, 0x3e	; 62
		LCDDisplayState = LCDDisplaySM_update;
		
		break;
 520:	0a 96       	adiw	r24, 0x0a	; 10
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	9e bf       	out	0x3e, r25	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	8d bf       	out	0x3d, r24	; 61
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0

		default:
		LCDDisplayState = LCDDisplaySM_update;
	}
	return LCDDisplayState;
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	1f 91       	pop	r17
 536:	08 95       	ret

00000538 <sendToGun>:
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29

void sendToGun(unsigned char sendValue){
 53c:	c8 2f       	mov	r28, r24
 53e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
unsigned char payload = 0x00;
if(USART_HasReceived(0)){ //Message Received
 542:	88 23       	and	r24, r24
 544:	3c f4       	brge	.+14     	; 0x554 <sendToGun+0x1c>
	payload = USART_Receive(0);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	d9 de       	rcall	.-590    	; 0x2fc <USART_Receive>
 54a:	d8 2f       	mov	r29, r24
	USART_Flush(0);
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	a7 de       	rcall	.-690    	; 0x29e <USART_Flush>
	commTranslate(payload);
 550:	8d 2f       	mov	r24, r29
 552:	79 df       	rcall	.-270    	; 0x446 <commTranslate>
 554:	e0 ec       	ldi	r30, 0xC0	; 192
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	85 ff       	sbrs	r24, 5
}
	while(USART_IsSendReady(0) == 0); //Wait till send is ready then send value to gun.
 55c:	fd cf       	rjmp	.-6      	; 0x558 <sendToGun+0x20>
	USART_Send(sendValue,0);
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	8c 2f       	mov	r24, r28
 562:	ba de       	rcall	.-652    	; 0x2d8 <USART_Send>
 564:	df 91       	pop	r29
}
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <hitCheck>:
 56a:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <pinUp>
}
void hitCheck(unsigned char pins){
	//Used by PCINT Interrupt to check whether correct target was hit, compare Target to IR receiver
	//Returns true if correct target was hit
	//TODO: Fix if statement if not correct
	if(pinUp == 1){
 56e:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <pinUp+0x1>
 572:	21 30       	cpi	r18, 0x01	; 1
 574:	31 05       	cpc	r19, r1
 576:	29 f4       	brne	.+10     	; 0x582 <hitCheck+0x18>
		pinUp = 0;
 578:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <pinUp+0x1>
 57c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <pinUp>
		return;
 580:	08 95       	ret
	}
	if(pins == currTarget){
 582:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <currTarget>
 586:	98 13       	cpse	r25, r24
 588:	2e c0       	rjmp	.+92     	; 0x5e6 <hitCheck+0x7c>
		if(ammoBack == 0){
 58a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <ammoBack>
 58e:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <ammoBack+0x1>
 592:	89 2b       	or	r24, r25
 594:	61 f4       	brne	.+24     	; 0x5ae <hitCheck+0x44>
			sendToGun(0x01);
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	ce df       	rcall	.-100    	; 0x538 <sendToGun>
			score++;
 59c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 5a0:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <score+0x1>
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <score+0x1>
 5aa:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <score>
		}
		if(pinUp == 0){
 5ae:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <pinUp>
 5b2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <pinUp+0x1>
 5b6:	89 2b       	or	r24, r25
 5b8:	b1 f4       	brne	.+44     	; 0x5e6 <hitCheck+0x7c>
			currTarget = 0xFF;
 5ba:	8f ef       	ldi	r24, 0xFF	; 255
 5bc:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <currTarget>
			PORTA = 0x00;
 5c0:	12 b8       	out	0x02, r1	; 2
			PORTD = PORTD & 0xE3;
 5c2:	8b b1       	in	r24, 0x0b	; 11
 5c4:	83 7e       	andi	r24, 0xE3	; 227
 5c6:	8b b9       	out	0x0b, r24	; 11
			pinUp = 1;
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <pinUp+0x1>
 5d0:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <pinUp>
			score++;
 5d4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <score>
 5d8:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <score+0x1>
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <score+0x1>
 5e2:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <score>
 5e6:	08 95       	ret

000005e8 <__vector_5>:
	}
	else{
		return;
	}
}
ISR(PCINT1_vect){
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	0b b6       	in	r0, 0x3b	; 59
 5f4:	0f 92       	push	r0
 5f6:	2f 93       	push	r18
 5f8:	3f 93       	push	r19
 5fa:	4f 93       	push	r20
 5fc:	5f 93       	push	r21
 5fe:	6f 93       	push	r22
 600:	7f 93       	push	r23
 602:	8f 93       	push	r24
 604:	9f 93       	push	r25
 606:	af 93       	push	r26
 608:	bf 93       	push	r27
 60a:	ef 93       	push	r30
 60c:	ff 93       	push	r31
	pins = (PINB & 0x07);
 60e:	83 b1       	in	r24, 0x03	; 3
 610:	87 70       	andi	r24, 0x07	; 7
 612:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <pins>
	hitCheck(pins);
 616:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <pins>
 61a:	a7 df       	rcall	.-178    	; 0x56a <hitCheck>
}
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	bf 91       	pop	r27
 622:	af 91       	pop	r26
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	7f 91       	pop	r23
 62a:	6f 91       	pop	r22
 62c:	5f 91       	pop	r21
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0b be       	out	0x3b, r0	; 59
 638:	0f 90       	pop	r0
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	0f 90       	pop	r0
 63e:	1f 90       	pop	r1
 640:	18 95       	reti

00000642 <commStateSM>:
		currTarget = 0x04;
	}
	return;
}
enum commStates{commStateSM_init, commStateSM_loop};
int commStateSM(int commState){
 642:	1f 93       	push	r17
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	ec 01       	movw	r28, r24
	unsigned char payload = 0x00;
	switch(commState){
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	19 f0       	breq	.+6      	; 0x654 <commStateSM+0x12>
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	21 f0       	breq	.+8      	; 0x65a <commStateSM+0x18>
 652:	0e c0       	rjmp	.+28     	; 0x670 <commStateSM+0x2e>
		case commStateSM_init:
		commState = commStateSM_loop;
 654:	c1 e0       	ldi	r28, 0x01	; 1
 656:	d0 e0       	ldi	r29, 0x00	; 0
 658:	0b c0       	rjmp	.+22     	; 0x670 <commStateSM+0x2e>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 65a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		break;
		
		case commStateSM_loop:
		if(USART_HasReceived(0)){ //Message Received
 65e:	88 23       	and	r24, r24
 660:	3c f4       	brge	.+14     	; 0x670 <commStateSM+0x2e>
			payload = USART_Receive(0);
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	4b de       	rcall	.-874    	; 0x2fc <USART_Receive>
 666:	18 2f       	mov	r17, r24
			USART_Flush(0);
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	19 de       	rcall	.-974    	; 0x29e <USART_Flush>
			commTranslate(payload);
 66c:	81 2f       	mov	r24, r17
 66e:	eb de       	rcall	.-554    	; 0x446 <commTranslate>
 670:	ce 01       	movw	r24, r28
		}
		commState = commStateSM_loop;
		break;
	}
	return commState;
}
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	08 95       	ret

0000067a <timerSM>:
 67a:	1f 93       	push	r17
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
enum timerStates{timerSM_init, timerSM_Countdown, timerSM_GameOver};
int timerSM(int timerState){
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	ec 01       	movw	r28, r24
 682:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	unsigned char payload = 0x00;
	if(USART_HasReceived(0)){ //Message Received
 686:	88 23       	and	r24, r24
 688:	3c f4       	brge	.+14     	; 0x698 <timerSM+0x1e>
		payload = USART_Receive(0);
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	37 de       	rcall	.-914    	; 0x2fc <USART_Receive>
 68e:	18 2f       	mov	r17, r24
		USART_Flush(0);
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	05 de       	rcall	.-1014   	; 0x29e <USART_Flush>
		commTranslate(payload);
 694:	81 2f       	mov	r24, r17
 696:	d7 de       	rcall	.-594    	; 0x446 <commTranslate>
 698:	c1 30       	cpi	r28, 0x01	; 1
		
	}
	switch(timerState){
 69a:	d1 05       	cpc	r29, r1
 69c:	71 f0       	breq	.+28     	; 0x6ba <timerSM+0x40>
 69e:	c2 30       	cpi	r28, 0x02	; 2
 6a0:	d1 05       	cpc	r29, r1
 6a2:	c1 f0       	breq	.+48     	; 0x6d4 <timerSM+0x5a>
 6a4:	20 97       	sbiw	r28, 0x00	; 0
 6a6:	c1 f4       	brne	.+48     	; 0x6d8 <timerSM+0x5e>
 6a8:	8c e3       	ldi	r24, 0x3C	; 60
		case timerSM_init:
		timeLeft = 60;
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timeLeft+0x1>
 6b0:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timeLeft>
 6b4:	c1 e0       	ldi	r28, 0x01	; 1
		timerState = timerSM_Countdown;
 6b6:	d0 e0       	ldi	r29, 0x00	; 0
 6b8:	0f c0       	rjmp	.+30     	; 0x6d8 <timerSM+0x5e>
		break;
 6ba:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timeLeft>

		case timerSM_Countdown:
		if(timeLeft > 0){
 6be:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <timeLeft+0x1>
 6c2:	00 97       	sbiw	r24, 0x00	; 0
 6c4:	31 f0       	breq	.+12     	; 0x6d2 <timerSM+0x58>
 6c6:	01 97       	sbiw	r24, 0x01	; 1
			timeLeft = timeLeft - 1;
 6c8:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <timeLeft+0x1>
 6cc:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timeLeft>
 6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <timerSM+0x5e>
			timerState = timerSM_Countdown;
		}
		else{
			timerState = timerSM_GameOver;
			GameOver();
 6d2:	92 de       	rcall	.-732    	; 0x3f8 <GameOver>
 6d4:	c0 e0       	ldi	r28, 0x00	; 0
		}
		break;

		case timerSM_GameOver:
		timerState = timerSM_init;
 6d6:	d0 e0       	ldi	r29, 0x00	; 0
 6d8:	ce 01       	movw	r24, r28
		break;
	}
	return timerState;
}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	08 95       	ret

000006e2 <main>:
 6e2:	cf 93       	push	r28
	while(1);
}


int main(void)
{
 6e4:	df 93       	push	r29
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
 6ea:	28 97       	sbiw	r28, 0x08	; 8
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	f8 94       	cli
 6f0:	de bf       	out	0x3e, r29	; 62
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	cd bf       	out	0x3d, r28	; 61

	(PCMSK1) |= (1<< PCINT8);
 6f6:	ec e6       	ldi	r30, 0x6C	; 108
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	80 81       	ld	r24, Z
 6fc:	81 60       	ori	r24, 0x01	; 1
 6fe:	80 83       	st	Z, r24
	(PCMSK1) |= (1<< PCINT9);
 700:	80 81       	ld	r24, Z
 702:	82 60       	ori	r24, 0x02	; 2
 704:	80 83       	st	Z, r24
	(PCMSK1) |= (1<< PCINT10);
 706:	80 81       	ld	r24, Z
 708:	84 60       	ori	r24, 0x04	; 4
 70a:	80 83       	st	Z, r24
	(PCICR) |= (1<< PCIE1);
 70c:	e8 e6       	ldi	r30, 0x68	; 104
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	82 60       	ori	r24, 0x02	; 2
 714:	80 83       	st	Z, r24
	sei();
 716:	78 94       	sei
	DDRD = 0xFF; PORTD = 0x00;
 718:	8f ef       	ldi	r24, 0xFF	; 255
 71a:	8a b9       	out	0x0a, r24	; 10
 71c:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0XFF; PORTC = 0x00;
 71e:	87 b9       	out	0x07, r24	; 7
 720:	18 b8       	out	0x08, r1	; 8
	DDRB = 0x00; PORTB = 0xFF;
 722:	14 b8       	out	0x04, r1	; 4
 724:	85 b9       	out	0x05, r24	; 5
	DDRA = 0xFF; PORTA = 0x00;
 726:	81 b9       	out	0x01, r24	; 1
 728:	12 b8       	out	0x02, r1	; 2
	LCD_init();
 72a:	f5 dc       	rcall	.-1558   	; 0x116 <LCD_init>
	initUSART(0);
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	95 dd       	rcall	.-1238   	; 0x25a <initUSART>
	USART_Flush(0);
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	b5 dd       	rcall	.-1174   	; 0x29e <USART_Flush>
 734:	88 e0       	ldi	r24, 0x08	; 8
	static task task1;
	static task task2;
	static task task3;
	static task task4;

	task *tasks[] = {&task1,&task2,&task3,&task4};
 736:	ea e0       	ldi	r30, 0x0A	; 10
 738:	f1 e0       	ldi	r31, 0x01	; 1
 73a:	de 01       	movw	r26, r28
 73c:	11 96       	adiw	r26, 0x01	; 1
 73e:	01 90       	ld	r0, Z+
 740:	0d 92       	st	X+, r0
 742:	8a 95       	dec	r24
 744:	e1 f7       	brne	.-8      	; 0x73e <main+0x5c>
 746:	e9 e7       	ldi	r30, 0x79	; 121
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	task1.state = timerSM_init;
 748:	f1 e0       	ldi	r31, 0x01	; 1
 74a:	10 82       	st	Z, r1
 74c:	88 ee       	ldi	r24, 0xE8	; 232
	task1.period = 1000;
 74e:	93 e0       	ldi	r25, 0x03	; 3
 750:	a0 e0       	ldi	r26, 0x00	; 0
 752:	b0 e0       	ldi	r27, 0x00	; 0
 754:	81 83       	std	Z+1, r24	; 0x01
 756:	92 83       	std	Z+2, r25	; 0x02
 758:	a3 83       	std	Z+3, r26	; 0x03
 75a:	b4 83       	std	Z+4, r27	; 0x04
 75c:	85 83       	std	Z+5, r24	; 0x05
	task1.elapsedTime = task1.period;
 75e:	96 83       	std	Z+6, r25	; 0x06
 760:	a7 83       	std	Z+7, r26	; 0x07
 762:	b0 87       	std	Z+8, r27	; 0x08
 764:	8d e3       	ldi	r24, 0x3D	; 61
	task1.TickFct = &timerSM;
 766:	93 e0       	ldi	r25, 0x03	; 3
 768:	92 87       	std	Z+10, r25	; 0x0a
 76a:	81 87       	std	Z+9, r24	; 0x09
 76c:	ee e6       	ldi	r30, 0x6E	; 110

	task2.state = targetSelectSM_init;
 76e:	f1 e0       	ldi	r31, 0x01	; 1
 770:	10 82       	st	Z, r1
 772:	88 ec       	ldi	r24, 0xC8	; 200
	task2.period = 200;
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	a0 e0       	ldi	r26, 0x00	; 0
 778:	b0 e0       	ldi	r27, 0x00	; 0
 77a:	81 83       	std	Z+1, r24	; 0x01
 77c:	92 83       	std	Z+2, r25	; 0x02
 77e:	a3 83       	std	Z+3, r26	; 0x03
 780:	b4 83       	std	Z+4, r27	; 0x04
 782:	85 83       	std	Z+5, r24	; 0x05
	task2.elapsedTime = task2.period;
 784:	96 83       	std	Z+6, r25	; 0x06
 786:	a7 83       	std	Z+7, r26	; 0x07
 788:	b0 87       	std	Z+8, r27	; 0x08
 78a:	2c e2       	ldi	r18, 0x2C	; 44
	task2.TickFct = &targetSelectSM;
 78c:	32 e0       	ldi	r19, 0x02	; 2
 78e:	32 87       	std	Z+10, r19	; 0x0a
 790:	21 87       	std	Z+9, r18	; 0x09
 792:	e3 e6       	ldi	r30, 0x63	; 99

	task3.state = LCDDisplaySM_update;
 794:	f1 e0       	ldi	r31, 0x01	; 1
 796:	10 82       	st	Z, r1
 798:	81 83       	std	Z+1, r24	; 0x01
	task3.period = 200;
 79a:	92 83       	std	Z+2, r25	; 0x02
 79c:	a3 83       	std	Z+3, r26	; 0x03
 79e:	b4 83       	std	Z+4, r27	; 0x04
 7a0:	85 83       	std	Z+5, r24	; 0x05
	task3.elapsedTime = task3.period;
 7a2:	96 83       	std	Z+6, r25	; 0x06
 7a4:	a7 83       	std	Z+7, r26	; 0x07
 7a6:	b0 87       	std	Z+8, r27	; 0x08
 7a8:	8e e5       	ldi	r24, 0x5E	; 94
	task3.TickFct = &LCDDisplaySM;
 7aa:	92 e0       	ldi	r25, 0x02	; 2
 7ac:	92 87       	std	Z+10, r25	; 0x0a
 7ae:	81 87       	std	Z+9, r24	; 0x09
 7b0:	e8 e5       	ldi	r30, 0x58	; 88

	task4.state = commStateSM_init;
 7b2:	f1 e0       	ldi	r31, 0x01	; 1
 7b4:	10 82       	st	Z, r1
 7b6:	82 e3       	ldi	r24, 0x32	; 50
	task4.period = 50;
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	a0 e0       	ldi	r26, 0x00	; 0
 7bc:	b0 e0       	ldi	r27, 0x00	; 0
 7be:	81 83       	std	Z+1, r24	; 0x01
 7c0:	92 83       	std	Z+2, r25	; 0x02
 7c2:	a3 83       	std	Z+3, r26	; 0x03
 7c4:	b4 83       	std	Z+4, r27	; 0x04
 7c6:	85 83       	std	Z+5, r24	; 0x05
	task4.elapsedTime = task4.period;
 7c8:	96 83       	std	Z+6, r25	; 0x06
 7ca:	a7 83       	std	Z+7, r26	; 0x07
 7cc:	b0 87       	std	Z+8, r27	; 0x08
 7ce:	81 e2       	ldi	r24, 0x21	; 33
	task4.TickFct = &commStateSM;
 7d0:	93 e0       	ldi	r25, 0x03	; 3
 7d2:	92 87       	std	Z+10, r25	; 0x0a
 7d4:	81 87       	std	Z+9, r24	; 0x09
 7d6:	62 e3       	ldi	r22, 0x32	; 50
	
	TimerSet(50);
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	cc dc       	rcall	.-1640   	; 0x178 <TimerSet>
	TimerOn();
 7e0:	dc dc       	rcall	.-1608   	; 0x19a <TimerOn>
 7e2:	83 e0       	ldi	r24, 0x03	; 3
	unsigned int i;
	//====End of Task Scheduler Setup====
	//Send start game signal to gun
	sendToGun(0x03);
 7e4:	a9 de       	rcall	.-686    	; 0x538 <sendToGun>
 7e6:	7e 01       	movw	r14, r28
 7e8:	89 e0       	ldi	r24, 0x09	; 9
 7ea:	e8 0e       	add	r14, r24
 7ec:	f1 1c       	adc	r15, r1
 7ee:	de 01       	movw	r26, r28
 7f0:	11 96       	adiw	r26, 0x01	; 1
 7f2:	6d 01       	movw	r12, r26
 7f4:	f6 01       	movw	r30, r12
 7f6:	01 91       	ld	r16, Z+
			LCD_DisplayString(1,USART_Receive(0));
			USART_Flush(0);
		}
		*/
		for( i = 0; i < numTasks; i++){
			if(tasks[i]->elapsedTime == tasks[i]->period){
 7f8:	11 91       	ld	r17, Z+
 7fa:	6f 01       	movw	r12, r30
 7fc:	d8 01       	movw	r26, r16
 7fe:	15 96       	adiw	r26, 0x05	; 5
 800:	4d 91       	ld	r20, X+
 802:	5d 91       	ld	r21, X+
 804:	6d 91       	ld	r22, X+
 806:	7c 91       	ld	r23, X
 808:	18 97       	sbiw	r26, 0x08	; 8
 80a:	11 96       	adiw	r26, 0x01	; 1
 80c:	8d 91       	ld	r24, X+
 80e:	9d 91       	ld	r25, X+
 810:	0d 90       	ld	r0, X+
 812:	bc 91       	ld	r27, X
 814:	a0 2d       	mov	r26, r0
 816:	48 17       	cp	r20, r24
 818:	59 07       	cpc	r21, r25
 81a:	6a 07       	cpc	r22, r26
 81c:	7b 07       	cpc	r23, r27
 81e:	81 f4       	brne	.+32     	; 0x840 <main+0x15e>
 820:	f8 01       	movw	r30, r16
 822:	80 81       	ld	r24, Z
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 824:	01 84       	ldd	r0, Z+9	; 0x09
 826:	f2 85       	ldd	r31, Z+10	; 0x0a
 828:	e0 2d       	mov	r30, r0
 82a:	08 2e       	mov	r0, r24
 82c:	00 0c       	add	r0, r0
 82e:	99 0b       	sbc	r25, r25
 830:	09 95       	icall
 832:	d8 01       	movw	r26, r16
 834:	8c 93       	st	X, r24
 836:	f8 01       	movw	r30, r16
 838:	15 82       	std	Z+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 83a:	16 82       	std	Z+6, r1	; 0x06
 83c:	17 82       	std	Z+7, r1	; 0x07
 83e:	10 86       	std	Z+8, r1	; 0x08
 840:	f8 01       	movw	r30, r16
 842:	85 81       	ldd	r24, Z+5	; 0x05
			}
			tasks[i] ->elapsedTime += 50;
 844:	96 81       	ldd	r25, Z+6	; 0x06
 846:	a7 81       	ldd	r26, Z+7	; 0x07
 848:	b0 85       	ldd	r27, Z+8	; 0x08
 84a:	c2 96       	adiw	r24, 0x32	; 50
 84c:	a1 1d       	adc	r26, r1
 84e:	b1 1d       	adc	r27, r1
 850:	85 83       	std	Z+5, r24	; 0x05
 852:	96 83       	std	Z+6, r25	; 0x06
 854:	a7 83       	std	Z+7, r26	; 0x07
 856:	b0 87       	std	Z+8, r27	; 0x08
 858:	ce 14       	cp	r12, r14
 85a:	df 04       	cpc	r13, r15
		while(USART_HasReceived(0)){
			LCD_DisplayString(1,USART_Receive(0));
			USART_Flush(0);
		}
		*/
		for( i = 0; i < numTasks; i++){
 85c:	59 f6       	brne	.-106    	; 0x7f4 <main+0x112>
 85e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <TimerFlag>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i] ->elapsedTime += 50;
		}
		while(!TimerFlag);
 862:	88 23       	and	r24, r24
 864:	e1 f3       	breq	.-8      	; 0x85e <main+0x17c>
 866:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <TimerFlag>
		TimerFlag = 0;
 86a:	c1 cf       	rjmp	.-126    	; 0x7ee <main+0x10c>

0000086c <__divmodhi4>:
 86c:	97 fb       	bst	r25, 7
    }
 86e:	07 2e       	mov	r0, r23
 870:	16 f4       	brtc	.+4      	; 0x876 <__divmodhi4+0xa>
 872:	00 94       	com	r0
 874:	06 d0       	rcall	.+12     	; 0x882 <__divmodhi4_neg1>
 876:	77 fd       	sbrc	r23, 7
 878:	08 d0       	rcall	.+16     	; 0x88a <__divmodhi4_neg2>
 87a:	2d d0       	rcall	.+90     	; 0x8d6 <__udivmodhi4>
 87c:	07 fc       	sbrc	r0, 7
 87e:	05 d0       	rcall	.+10     	; 0x88a <__divmodhi4_neg2>
 880:	3e f4       	brtc	.+14     	; 0x890 <__divmodhi4_exit>

00000882 <__divmodhi4_neg1>:
 882:	90 95       	com	r25
 884:	81 95       	neg	r24
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	08 95       	ret

0000088a <__divmodhi4_neg2>:
 88a:	70 95       	com	r23
 88c:	61 95       	neg	r22
 88e:	7f 4f       	sbci	r23, 0xFF	; 255

00000890 <__divmodhi4_exit>:
 890:	08 95       	ret

00000892 <__udivmodsi4>:
 892:	a1 e2       	ldi	r26, 0x21	; 33
 894:	1a 2e       	mov	r1, r26
 896:	aa 1b       	sub	r26, r26
 898:	bb 1b       	sub	r27, r27
 89a:	fd 01       	movw	r30, r26
 89c:	0d c0       	rjmp	.+26     	; 0x8b8 <__udivmodsi4_ep>

0000089e <__udivmodsi4_loop>:
 89e:	aa 1f       	adc	r26, r26
 8a0:	bb 1f       	adc	r27, r27
 8a2:	ee 1f       	adc	r30, r30
 8a4:	ff 1f       	adc	r31, r31
 8a6:	a2 17       	cp	r26, r18
 8a8:	b3 07       	cpc	r27, r19
 8aa:	e4 07       	cpc	r30, r20
 8ac:	f5 07       	cpc	r31, r21
 8ae:	20 f0       	brcs	.+8      	; 0x8b8 <__udivmodsi4_ep>
 8b0:	a2 1b       	sub	r26, r18
 8b2:	b3 0b       	sbc	r27, r19
 8b4:	e4 0b       	sbc	r30, r20
 8b6:	f5 0b       	sbc	r31, r21

000008b8 <__udivmodsi4_ep>:
 8b8:	66 1f       	adc	r22, r22
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 1f       	adc	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	1a 94       	dec	r1
 8c2:	69 f7       	brne	.-38     	; 0x89e <__udivmodsi4_loop>
 8c4:	60 95       	com	r22
 8c6:	70 95       	com	r23
 8c8:	80 95       	com	r24
 8ca:	90 95       	com	r25
 8cc:	9b 01       	movw	r18, r22
 8ce:	ac 01       	movw	r20, r24
 8d0:	bd 01       	movw	r22, r26
 8d2:	cf 01       	movw	r24, r30
 8d4:	08 95       	ret

000008d6 <__udivmodhi4>:
 8d6:	aa 1b       	sub	r26, r26
 8d8:	bb 1b       	sub	r27, r27
 8da:	51 e1       	ldi	r21, 0x11	; 17
 8dc:	07 c0       	rjmp	.+14     	; 0x8ec <__udivmodhi4_ep>

000008de <__udivmodhi4_loop>:
 8de:	aa 1f       	adc	r26, r26
 8e0:	bb 1f       	adc	r27, r27
 8e2:	a6 17       	cp	r26, r22
 8e4:	b7 07       	cpc	r27, r23
 8e6:	10 f0       	brcs	.+4      	; 0x8ec <__udivmodhi4_ep>
 8e8:	a6 1b       	sub	r26, r22
 8ea:	b7 0b       	sbc	r27, r23

000008ec <__udivmodhi4_ep>:
 8ec:	88 1f       	adc	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	5a 95       	dec	r21
 8f2:	a9 f7       	brne	.-22     	; 0x8de <__udivmodhi4_loop>
 8f4:	80 95       	com	r24
 8f6:	90 95       	com	r25
 8f8:	bc 01       	movw	r22, r24
 8fa:	cd 01       	movw	r24, r26
 8fc:	08 95       	ret

000008fe <do_rand>:
 8fe:	8f 92       	push	r8
 900:	9f 92       	push	r9
 902:	af 92       	push	r10
 904:	bf 92       	push	r11
 906:	cf 92       	push	r12
 908:	df 92       	push	r13
 90a:	ef 92       	push	r14
 90c:	ff 92       	push	r15
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	ec 01       	movw	r28, r24
 914:	68 81       	ld	r22, Y
 916:	79 81       	ldd	r23, Y+1	; 0x01
 918:	8a 81       	ldd	r24, Y+2	; 0x02
 91a:	9b 81       	ldd	r25, Y+3	; 0x03
 91c:	61 15       	cp	r22, r1
 91e:	71 05       	cpc	r23, r1
 920:	81 05       	cpc	r24, r1
 922:	91 05       	cpc	r25, r1
 924:	21 f4       	brne	.+8      	; 0x92e <do_rand+0x30>
 926:	64 e2       	ldi	r22, 0x24	; 36
 928:	79 ed       	ldi	r23, 0xD9	; 217
 92a:	8b e5       	ldi	r24, 0x5B	; 91
 92c:	97 e0       	ldi	r25, 0x07	; 7
 92e:	2d e1       	ldi	r18, 0x1D	; 29
 930:	33 ef       	ldi	r19, 0xF3	; 243
 932:	41 e0       	ldi	r20, 0x01	; 1
 934:	50 e0       	ldi	r21, 0x00	; 0
 936:	13 d3       	rcall	.+1574   	; 0xf5e <__divmodsi4>
 938:	49 01       	movw	r8, r18
 93a:	5a 01       	movw	r10, r20
 93c:	9b 01       	movw	r18, r22
 93e:	ac 01       	movw	r20, r24
 940:	a7 ea       	ldi	r26, 0xA7	; 167
 942:	b1 e4       	ldi	r27, 0x41	; 65
 944:	28 d3       	rcall	.+1616   	; 0xf96 <__muluhisi3>
 946:	6b 01       	movw	r12, r22
 948:	7c 01       	movw	r14, r24
 94a:	ac ee       	ldi	r26, 0xEC	; 236
 94c:	b4 ef       	ldi	r27, 0xF4	; 244
 94e:	a5 01       	movw	r20, r10
 950:	94 01       	movw	r18, r8
 952:	2d d3       	rcall	.+1626   	; 0xfae <__mulohisi3>
 954:	dc 01       	movw	r26, r24
 956:	cb 01       	movw	r24, r22
 958:	8c 0d       	add	r24, r12
 95a:	9d 1d       	adc	r25, r13
 95c:	ae 1d       	adc	r26, r14
 95e:	bf 1d       	adc	r27, r15
 960:	b7 ff       	sbrs	r27, 7
 962:	03 c0       	rjmp	.+6      	; 0x96a <do_rand+0x6c>
 964:	01 97       	sbiw	r24, 0x01	; 1
 966:	a1 09       	sbc	r26, r1
 968:	b0 48       	sbci	r27, 0x80	; 128
 96a:	88 83       	st	Y, r24
 96c:	99 83       	std	Y+1, r25	; 0x01
 96e:	aa 83       	std	Y+2, r26	; 0x02
 970:	bb 83       	std	Y+3, r27	; 0x03
 972:	9f 77       	andi	r25, 0x7F	; 127
 974:	df 91       	pop	r29
 976:	cf 91       	pop	r28
 978:	ff 90       	pop	r15
 97a:	ef 90       	pop	r14
 97c:	df 90       	pop	r13
 97e:	cf 90       	pop	r12
 980:	bf 90       	pop	r11
 982:	af 90       	pop	r10
 984:	9f 90       	pop	r9
 986:	8f 90       	pop	r8
 988:	08 95       	ret

0000098a <rand_r>:
 98a:	b9 cf       	rjmp	.-142    	; 0x8fe <do_rand>

0000098c <rand>:
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	91 e0       	ldi	r25, 0x01	; 1
 990:	b6 cf       	rjmp	.-148    	; 0x8fe <do_rand>

00000992 <srand>:
 992:	a0 e0       	ldi	r26, 0x00	; 0
 994:	b0 e0       	ldi	r27, 0x00	; 0
 996:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 99a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 99e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 9a2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 9a6:	08 95       	ret

000009a8 <sprintf>:
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	cd b7       	in	r28, 0x3d	; 61
 9b2:	de b7       	in	r29, 0x3e	; 62
 9b4:	2e 97       	sbiw	r28, 0x0e	; 14
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	f8 94       	cli
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	cd bf       	out	0x3d, r28	; 61
 9c0:	0d 89       	ldd	r16, Y+21	; 0x15
 9c2:	1e 89       	ldd	r17, Y+22	; 0x16
 9c4:	86 e0       	ldi	r24, 0x06	; 6
 9c6:	8c 83       	std	Y+4, r24	; 0x04
 9c8:	1a 83       	std	Y+2, r17	; 0x02
 9ca:	09 83       	std	Y+1, r16	; 0x01
 9cc:	8f ef       	ldi	r24, 0xFF	; 255
 9ce:	9f e7       	ldi	r25, 0x7F	; 127
 9d0:	9e 83       	std	Y+6, r25	; 0x06
 9d2:	8d 83       	std	Y+5, r24	; 0x05
 9d4:	ae 01       	movw	r20, r28
 9d6:	47 5e       	subi	r20, 0xE7	; 231
 9d8:	5f 4f       	sbci	r21, 0xFF	; 255
 9da:	6f 89       	ldd	r22, Y+23	; 0x17
 9dc:	78 8d       	ldd	r23, Y+24	; 0x18
 9de:	ce 01       	movw	r24, r28
 9e0:	01 96       	adiw	r24, 0x01	; 1
 9e2:	10 d0       	rcall	.+32     	; 0xa04 <vfprintf>
 9e4:	ef 81       	ldd	r30, Y+7	; 0x07
 9e6:	f8 85       	ldd	r31, Y+8	; 0x08
 9e8:	e0 0f       	add	r30, r16
 9ea:	f1 1f       	adc	r31, r17
 9ec:	10 82       	st	Z, r1
 9ee:	2e 96       	adiw	r28, 0x0e	; 14
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
 9f4:	de bf       	out	0x3e, r29	; 62
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	08 95       	ret

00000a04 <vfprintf>:
 a04:	2f 92       	push	r2
 a06:	3f 92       	push	r3
 a08:	4f 92       	push	r4
 a0a:	5f 92       	push	r5
 a0c:	6f 92       	push	r6
 a0e:	7f 92       	push	r7
 a10:	8f 92       	push	r8
 a12:	9f 92       	push	r9
 a14:	af 92       	push	r10
 a16:	bf 92       	push	r11
 a18:	cf 92       	push	r12
 a1a:	df 92       	push	r13
 a1c:	ef 92       	push	r14
 a1e:	ff 92       	push	r15
 a20:	0f 93       	push	r16
 a22:	1f 93       	push	r17
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	2b 97       	sbiw	r28, 0x0b	; 11
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	6c 01       	movw	r12, r24
 a3a:	7b 01       	movw	r14, r22
 a3c:	8a 01       	movw	r16, r20
 a3e:	fc 01       	movw	r30, r24
 a40:	17 82       	std	Z+7, r1	; 0x07
 a42:	16 82       	std	Z+6, r1	; 0x06
 a44:	83 81       	ldd	r24, Z+3	; 0x03
 a46:	81 ff       	sbrs	r24, 1
 a48:	bf c1       	rjmp	.+894    	; 0xdc8 <vfprintf+0x3c4>
 a4a:	ce 01       	movw	r24, r28
 a4c:	01 96       	adiw	r24, 0x01	; 1
 a4e:	3c 01       	movw	r6, r24
 a50:	f6 01       	movw	r30, r12
 a52:	93 81       	ldd	r25, Z+3	; 0x03
 a54:	f7 01       	movw	r30, r14
 a56:	93 fd       	sbrc	r25, 3
 a58:	85 91       	lpm	r24, Z+
 a5a:	93 ff       	sbrs	r25, 3
 a5c:	81 91       	ld	r24, Z+
 a5e:	7f 01       	movw	r14, r30
 a60:	88 23       	and	r24, r24
 a62:	09 f4       	brne	.+2      	; 0xa66 <vfprintf+0x62>
 a64:	ad c1       	rjmp	.+858    	; 0xdc0 <vfprintf+0x3bc>
 a66:	85 32       	cpi	r24, 0x25	; 37
 a68:	39 f4       	brne	.+14     	; 0xa78 <vfprintf+0x74>
 a6a:	93 fd       	sbrc	r25, 3
 a6c:	85 91       	lpm	r24, Z+
 a6e:	93 ff       	sbrs	r25, 3
 a70:	81 91       	ld	r24, Z+
 a72:	7f 01       	movw	r14, r30
 a74:	85 32       	cpi	r24, 0x25	; 37
 a76:	21 f4       	brne	.+8      	; 0xa80 <vfprintf+0x7c>
 a78:	b6 01       	movw	r22, r12
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	d6 d1       	rcall	.+940    	; 0xe2a <fputc>
 a7e:	e8 cf       	rjmp	.-48     	; 0xa50 <vfprintf+0x4c>
 a80:	91 2c       	mov	r9, r1
 a82:	21 2c       	mov	r2, r1
 a84:	31 2c       	mov	r3, r1
 a86:	ff e1       	ldi	r31, 0x1F	; 31
 a88:	f3 15       	cp	r31, r3
 a8a:	d8 f0       	brcs	.+54     	; 0xac2 <vfprintf+0xbe>
 a8c:	8b 32       	cpi	r24, 0x2B	; 43
 a8e:	79 f0       	breq	.+30     	; 0xaae <vfprintf+0xaa>
 a90:	38 f4       	brcc	.+14     	; 0xaa0 <vfprintf+0x9c>
 a92:	80 32       	cpi	r24, 0x20	; 32
 a94:	79 f0       	breq	.+30     	; 0xab4 <vfprintf+0xb0>
 a96:	83 32       	cpi	r24, 0x23	; 35
 a98:	a1 f4       	brne	.+40     	; 0xac2 <vfprintf+0xbe>
 a9a:	23 2d       	mov	r18, r3
 a9c:	20 61       	ori	r18, 0x10	; 16
 a9e:	1d c0       	rjmp	.+58     	; 0xada <vfprintf+0xd6>
 aa0:	8d 32       	cpi	r24, 0x2D	; 45
 aa2:	61 f0       	breq	.+24     	; 0xabc <vfprintf+0xb8>
 aa4:	80 33       	cpi	r24, 0x30	; 48
 aa6:	69 f4       	brne	.+26     	; 0xac2 <vfprintf+0xbe>
 aa8:	23 2d       	mov	r18, r3
 aaa:	21 60       	ori	r18, 0x01	; 1
 aac:	16 c0       	rjmp	.+44     	; 0xada <vfprintf+0xd6>
 aae:	83 2d       	mov	r24, r3
 ab0:	82 60       	ori	r24, 0x02	; 2
 ab2:	38 2e       	mov	r3, r24
 ab4:	e3 2d       	mov	r30, r3
 ab6:	e4 60       	ori	r30, 0x04	; 4
 ab8:	3e 2e       	mov	r3, r30
 aba:	2a c0       	rjmp	.+84     	; 0xb10 <vfprintf+0x10c>
 abc:	f3 2d       	mov	r31, r3
 abe:	f8 60       	ori	r31, 0x08	; 8
 ac0:	1d c0       	rjmp	.+58     	; 0xafc <vfprintf+0xf8>
 ac2:	37 fc       	sbrc	r3, 7
 ac4:	2d c0       	rjmp	.+90     	; 0xb20 <vfprintf+0x11c>
 ac6:	20 ed       	ldi	r18, 0xD0	; 208
 ac8:	28 0f       	add	r18, r24
 aca:	2a 30       	cpi	r18, 0x0A	; 10
 acc:	40 f0       	brcs	.+16     	; 0xade <vfprintf+0xda>
 ace:	8e 32       	cpi	r24, 0x2E	; 46
 ad0:	b9 f4       	brne	.+46     	; 0xb00 <vfprintf+0xfc>
 ad2:	36 fc       	sbrc	r3, 6
 ad4:	75 c1       	rjmp	.+746    	; 0xdc0 <vfprintf+0x3bc>
 ad6:	23 2d       	mov	r18, r3
 ad8:	20 64       	ori	r18, 0x40	; 64
 ada:	32 2e       	mov	r3, r18
 adc:	19 c0       	rjmp	.+50     	; 0xb10 <vfprintf+0x10c>
 ade:	36 fe       	sbrs	r3, 6
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <vfprintf+0xea>
 ae2:	8a e0       	ldi	r24, 0x0A	; 10
 ae4:	98 9e       	mul	r9, r24
 ae6:	20 0d       	add	r18, r0
 ae8:	11 24       	eor	r1, r1
 aea:	92 2e       	mov	r9, r18
 aec:	11 c0       	rjmp	.+34     	; 0xb10 <vfprintf+0x10c>
 aee:	ea e0       	ldi	r30, 0x0A	; 10
 af0:	2e 9e       	mul	r2, r30
 af2:	20 0d       	add	r18, r0
 af4:	11 24       	eor	r1, r1
 af6:	22 2e       	mov	r2, r18
 af8:	f3 2d       	mov	r31, r3
 afa:	f0 62       	ori	r31, 0x20	; 32
 afc:	3f 2e       	mov	r3, r31
 afe:	08 c0       	rjmp	.+16     	; 0xb10 <vfprintf+0x10c>
 b00:	8c 36       	cpi	r24, 0x6C	; 108
 b02:	21 f4       	brne	.+8      	; 0xb0c <vfprintf+0x108>
 b04:	83 2d       	mov	r24, r3
 b06:	80 68       	ori	r24, 0x80	; 128
 b08:	38 2e       	mov	r3, r24
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <vfprintf+0x10c>
 b0c:	88 36       	cpi	r24, 0x68	; 104
 b0e:	41 f4       	brne	.+16     	; 0xb20 <vfprintf+0x11c>
 b10:	f7 01       	movw	r30, r14
 b12:	93 fd       	sbrc	r25, 3
 b14:	85 91       	lpm	r24, Z+
 b16:	93 ff       	sbrs	r25, 3
 b18:	81 91       	ld	r24, Z+
 b1a:	7f 01       	movw	r14, r30
 b1c:	81 11       	cpse	r24, r1
 b1e:	b3 cf       	rjmp	.-154    	; 0xa86 <vfprintf+0x82>
 b20:	98 2f       	mov	r25, r24
 b22:	9f 7d       	andi	r25, 0xDF	; 223
 b24:	95 54       	subi	r25, 0x45	; 69
 b26:	93 30       	cpi	r25, 0x03	; 3
 b28:	28 f4       	brcc	.+10     	; 0xb34 <vfprintf+0x130>
 b2a:	0c 5f       	subi	r16, 0xFC	; 252
 b2c:	1f 4f       	sbci	r17, 0xFF	; 255
 b2e:	9f e3       	ldi	r25, 0x3F	; 63
 b30:	99 83       	std	Y+1, r25	; 0x01
 b32:	0d c0       	rjmp	.+26     	; 0xb4e <vfprintf+0x14a>
 b34:	83 36       	cpi	r24, 0x63	; 99
 b36:	31 f0       	breq	.+12     	; 0xb44 <vfprintf+0x140>
 b38:	83 37       	cpi	r24, 0x73	; 115
 b3a:	71 f0       	breq	.+28     	; 0xb58 <vfprintf+0x154>
 b3c:	83 35       	cpi	r24, 0x53	; 83
 b3e:	09 f0       	breq	.+2      	; 0xb42 <vfprintf+0x13e>
 b40:	55 c0       	rjmp	.+170    	; 0xbec <vfprintf+0x1e8>
 b42:	20 c0       	rjmp	.+64     	; 0xb84 <vfprintf+0x180>
 b44:	f8 01       	movw	r30, r16
 b46:	80 81       	ld	r24, Z
 b48:	89 83       	std	Y+1, r24	; 0x01
 b4a:	0e 5f       	subi	r16, 0xFE	; 254
 b4c:	1f 4f       	sbci	r17, 0xFF	; 255
 b4e:	88 24       	eor	r8, r8
 b50:	83 94       	inc	r8
 b52:	91 2c       	mov	r9, r1
 b54:	53 01       	movw	r10, r6
 b56:	12 c0       	rjmp	.+36     	; 0xb7c <vfprintf+0x178>
 b58:	28 01       	movw	r4, r16
 b5a:	f2 e0       	ldi	r31, 0x02	; 2
 b5c:	4f 0e       	add	r4, r31
 b5e:	51 1c       	adc	r5, r1
 b60:	f8 01       	movw	r30, r16
 b62:	a0 80       	ld	r10, Z
 b64:	b1 80       	ldd	r11, Z+1	; 0x01
 b66:	36 fe       	sbrs	r3, 6
 b68:	03 c0       	rjmp	.+6      	; 0xb70 <vfprintf+0x16c>
 b6a:	69 2d       	mov	r22, r9
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <vfprintf+0x170>
 b70:	6f ef       	ldi	r22, 0xFF	; 255
 b72:	7f ef       	ldi	r23, 0xFF	; 255
 b74:	c5 01       	movw	r24, r10
 b76:	4e d1       	rcall	.+668    	; 0xe14 <strnlen>
 b78:	4c 01       	movw	r8, r24
 b7a:	82 01       	movw	r16, r4
 b7c:	f3 2d       	mov	r31, r3
 b7e:	ff 77       	andi	r31, 0x7F	; 127
 b80:	3f 2e       	mov	r3, r31
 b82:	15 c0       	rjmp	.+42     	; 0xbae <vfprintf+0x1aa>
 b84:	28 01       	movw	r4, r16
 b86:	22 e0       	ldi	r18, 0x02	; 2
 b88:	42 0e       	add	r4, r18
 b8a:	51 1c       	adc	r5, r1
 b8c:	f8 01       	movw	r30, r16
 b8e:	a0 80       	ld	r10, Z
 b90:	b1 80       	ldd	r11, Z+1	; 0x01
 b92:	36 fe       	sbrs	r3, 6
 b94:	03 c0       	rjmp	.+6      	; 0xb9c <vfprintf+0x198>
 b96:	69 2d       	mov	r22, r9
 b98:	70 e0       	ldi	r23, 0x00	; 0
 b9a:	02 c0       	rjmp	.+4      	; 0xba0 <vfprintf+0x19c>
 b9c:	6f ef       	ldi	r22, 0xFF	; 255
 b9e:	7f ef       	ldi	r23, 0xFF	; 255
 ba0:	c5 01       	movw	r24, r10
 ba2:	2d d1       	rcall	.+602    	; 0xdfe <strnlen_P>
 ba4:	4c 01       	movw	r8, r24
 ba6:	f3 2d       	mov	r31, r3
 ba8:	f0 68       	ori	r31, 0x80	; 128
 baa:	3f 2e       	mov	r3, r31
 bac:	82 01       	movw	r16, r4
 bae:	33 fc       	sbrc	r3, 3
 bb0:	19 c0       	rjmp	.+50     	; 0xbe4 <vfprintf+0x1e0>
 bb2:	82 2d       	mov	r24, r2
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	88 16       	cp	r8, r24
 bb8:	99 06       	cpc	r9, r25
 bba:	a0 f4       	brcc	.+40     	; 0xbe4 <vfprintf+0x1e0>
 bbc:	b6 01       	movw	r22, r12
 bbe:	80 e2       	ldi	r24, 0x20	; 32
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	33 d1       	rcall	.+614    	; 0xe2a <fputc>
 bc4:	2a 94       	dec	r2
 bc6:	f5 cf       	rjmp	.-22     	; 0xbb2 <vfprintf+0x1ae>
 bc8:	f5 01       	movw	r30, r10
 bca:	37 fc       	sbrc	r3, 7
 bcc:	85 91       	lpm	r24, Z+
 bce:	37 fe       	sbrs	r3, 7
 bd0:	81 91       	ld	r24, Z+
 bd2:	5f 01       	movw	r10, r30
 bd4:	b6 01       	movw	r22, r12
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	28 d1       	rcall	.+592    	; 0xe2a <fputc>
 bda:	21 10       	cpse	r2, r1
 bdc:	2a 94       	dec	r2
 bde:	21 e0       	ldi	r18, 0x01	; 1
 be0:	82 1a       	sub	r8, r18
 be2:	91 08       	sbc	r9, r1
 be4:	81 14       	cp	r8, r1
 be6:	91 04       	cpc	r9, r1
 be8:	79 f7       	brne	.-34     	; 0xbc8 <vfprintf+0x1c4>
 bea:	e1 c0       	rjmp	.+450    	; 0xdae <vfprintf+0x3aa>
 bec:	84 36       	cpi	r24, 0x64	; 100
 bee:	11 f0       	breq	.+4      	; 0xbf4 <vfprintf+0x1f0>
 bf0:	89 36       	cpi	r24, 0x69	; 105
 bf2:	39 f5       	brne	.+78     	; 0xc42 <vfprintf+0x23e>
 bf4:	f8 01       	movw	r30, r16
 bf6:	37 fe       	sbrs	r3, 7
 bf8:	07 c0       	rjmp	.+14     	; 0xc08 <vfprintf+0x204>
 bfa:	60 81       	ld	r22, Z
 bfc:	71 81       	ldd	r23, Z+1	; 0x01
 bfe:	82 81       	ldd	r24, Z+2	; 0x02
 c00:	93 81       	ldd	r25, Z+3	; 0x03
 c02:	0c 5f       	subi	r16, 0xFC	; 252
 c04:	1f 4f       	sbci	r17, 0xFF	; 255
 c06:	08 c0       	rjmp	.+16     	; 0xc18 <vfprintf+0x214>
 c08:	60 81       	ld	r22, Z
 c0a:	71 81       	ldd	r23, Z+1	; 0x01
 c0c:	07 2e       	mov	r0, r23
 c0e:	00 0c       	add	r0, r0
 c10:	88 0b       	sbc	r24, r24
 c12:	99 0b       	sbc	r25, r25
 c14:	0e 5f       	subi	r16, 0xFE	; 254
 c16:	1f 4f       	sbci	r17, 0xFF	; 255
 c18:	f3 2d       	mov	r31, r3
 c1a:	ff 76       	andi	r31, 0x6F	; 111
 c1c:	3f 2e       	mov	r3, r31
 c1e:	97 ff       	sbrs	r25, 7
 c20:	09 c0       	rjmp	.+18     	; 0xc34 <vfprintf+0x230>
 c22:	90 95       	com	r25
 c24:	80 95       	com	r24
 c26:	70 95       	com	r23
 c28:	61 95       	neg	r22
 c2a:	7f 4f       	sbci	r23, 0xFF	; 255
 c2c:	8f 4f       	sbci	r24, 0xFF	; 255
 c2e:	9f 4f       	sbci	r25, 0xFF	; 255
 c30:	f0 68       	ori	r31, 0x80	; 128
 c32:	3f 2e       	mov	r3, r31
 c34:	2a e0       	ldi	r18, 0x0A	; 10
 c36:	30 e0       	ldi	r19, 0x00	; 0
 c38:	a3 01       	movw	r20, r6
 c3a:	33 d1       	rcall	.+614    	; 0xea2 <__ultoa_invert>
 c3c:	88 2e       	mov	r8, r24
 c3e:	86 18       	sub	r8, r6
 c40:	44 c0       	rjmp	.+136    	; 0xcca <vfprintf+0x2c6>
 c42:	85 37       	cpi	r24, 0x75	; 117
 c44:	31 f4       	brne	.+12     	; 0xc52 <vfprintf+0x24e>
 c46:	23 2d       	mov	r18, r3
 c48:	2f 7e       	andi	r18, 0xEF	; 239
 c4a:	b2 2e       	mov	r11, r18
 c4c:	2a e0       	ldi	r18, 0x0A	; 10
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	25 c0       	rjmp	.+74     	; 0xc9c <vfprintf+0x298>
 c52:	93 2d       	mov	r25, r3
 c54:	99 7f       	andi	r25, 0xF9	; 249
 c56:	b9 2e       	mov	r11, r25
 c58:	8f 36       	cpi	r24, 0x6F	; 111
 c5a:	c1 f0       	breq	.+48     	; 0xc8c <vfprintf+0x288>
 c5c:	18 f4       	brcc	.+6      	; 0xc64 <vfprintf+0x260>
 c5e:	88 35       	cpi	r24, 0x58	; 88
 c60:	79 f0       	breq	.+30     	; 0xc80 <vfprintf+0x27c>
 c62:	ae c0       	rjmp	.+348    	; 0xdc0 <vfprintf+0x3bc>
 c64:	80 37       	cpi	r24, 0x70	; 112
 c66:	19 f0       	breq	.+6      	; 0xc6e <vfprintf+0x26a>
 c68:	88 37       	cpi	r24, 0x78	; 120
 c6a:	21 f0       	breq	.+8      	; 0xc74 <vfprintf+0x270>
 c6c:	a9 c0       	rjmp	.+338    	; 0xdc0 <vfprintf+0x3bc>
 c6e:	e9 2f       	mov	r30, r25
 c70:	e0 61       	ori	r30, 0x10	; 16
 c72:	be 2e       	mov	r11, r30
 c74:	b4 fe       	sbrs	r11, 4
 c76:	0d c0       	rjmp	.+26     	; 0xc92 <vfprintf+0x28e>
 c78:	fb 2d       	mov	r31, r11
 c7a:	f4 60       	ori	r31, 0x04	; 4
 c7c:	bf 2e       	mov	r11, r31
 c7e:	09 c0       	rjmp	.+18     	; 0xc92 <vfprintf+0x28e>
 c80:	34 fe       	sbrs	r3, 4
 c82:	0a c0       	rjmp	.+20     	; 0xc98 <vfprintf+0x294>
 c84:	29 2f       	mov	r18, r25
 c86:	26 60       	ori	r18, 0x06	; 6
 c88:	b2 2e       	mov	r11, r18
 c8a:	06 c0       	rjmp	.+12     	; 0xc98 <vfprintf+0x294>
 c8c:	28 e0       	ldi	r18, 0x08	; 8
 c8e:	30 e0       	ldi	r19, 0x00	; 0
 c90:	05 c0       	rjmp	.+10     	; 0xc9c <vfprintf+0x298>
 c92:	20 e1       	ldi	r18, 0x10	; 16
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x298>
 c98:	20 e1       	ldi	r18, 0x10	; 16
 c9a:	32 e0       	ldi	r19, 0x02	; 2
 c9c:	f8 01       	movw	r30, r16
 c9e:	b7 fe       	sbrs	r11, 7
 ca0:	07 c0       	rjmp	.+14     	; 0xcb0 <vfprintf+0x2ac>
 ca2:	60 81       	ld	r22, Z
 ca4:	71 81       	ldd	r23, Z+1	; 0x01
 ca6:	82 81       	ldd	r24, Z+2	; 0x02
 ca8:	93 81       	ldd	r25, Z+3	; 0x03
 caa:	0c 5f       	subi	r16, 0xFC	; 252
 cac:	1f 4f       	sbci	r17, 0xFF	; 255
 cae:	06 c0       	rjmp	.+12     	; 0xcbc <vfprintf+0x2b8>
 cb0:	60 81       	ld	r22, Z
 cb2:	71 81       	ldd	r23, Z+1	; 0x01
 cb4:	80 e0       	ldi	r24, 0x00	; 0
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	0e 5f       	subi	r16, 0xFE	; 254
 cba:	1f 4f       	sbci	r17, 0xFF	; 255
 cbc:	a3 01       	movw	r20, r6
 cbe:	f1 d0       	rcall	.+482    	; 0xea2 <__ultoa_invert>
 cc0:	88 2e       	mov	r8, r24
 cc2:	86 18       	sub	r8, r6
 cc4:	fb 2d       	mov	r31, r11
 cc6:	ff 77       	andi	r31, 0x7F	; 127
 cc8:	3f 2e       	mov	r3, r31
 cca:	36 fe       	sbrs	r3, 6
 ccc:	0d c0       	rjmp	.+26     	; 0xce8 <vfprintf+0x2e4>
 cce:	23 2d       	mov	r18, r3
 cd0:	2e 7f       	andi	r18, 0xFE	; 254
 cd2:	a2 2e       	mov	r10, r18
 cd4:	89 14       	cp	r8, r9
 cd6:	58 f4       	brcc	.+22     	; 0xcee <vfprintf+0x2ea>
 cd8:	34 fe       	sbrs	r3, 4
 cda:	0b c0       	rjmp	.+22     	; 0xcf2 <vfprintf+0x2ee>
 cdc:	32 fc       	sbrc	r3, 2
 cde:	09 c0       	rjmp	.+18     	; 0xcf2 <vfprintf+0x2ee>
 ce0:	83 2d       	mov	r24, r3
 ce2:	8e 7e       	andi	r24, 0xEE	; 238
 ce4:	a8 2e       	mov	r10, r24
 ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <vfprintf+0x2ee>
 ce8:	b8 2c       	mov	r11, r8
 cea:	a3 2c       	mov	r10, r3
 cec:	03 c0       	rjmp	.+6      	; 0xcf4 <vfprintf+0x2f0>
 cee:	b8 2c       	mov	r11, r8
 cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <vfprintf+0x2f0>
 cf2:	b9 2c       	mov	r11, r9
 cf4:	a4 fe       	sbrs	r10, 4
 cf6:	0f c0       	rjmp	.+30     	; 0xd16 <vfprintf+0x312>
 cf8:	fe 01       	movw	r30, r28
 cfa:	e8 0d       	add	r30, r8
 cfc:	f1 1d       	adc	r31, r1
 cfe:	80 81       	ld	r24, Z
 d00:	80 33       	cpi	r24, 0x30	; 48
 d02:	21 f4       	brne	.+8      	; 0xd0c <vfprintf+0x308>
 d04:	9a 2d       	mov	r25, r10
 d06:	99 7e       	andi	r25, 0xE9	; 233
 d08:	a9 2e       	mov	r10, r25
 d0a:	09 c0       	rjmp	.+18     	; 0xd1e <vfprintf+0x31a>
 d0c:	a2 fe       	sbrs	r10, 2
 d0e:	06 c0       	rjmp	.+12     	; 0xd1c <vfprintf+0x318>
 d10:	b3 94       	inc	r11
 d12:	b3 94       	inc	r11
 d14:	04 c0       	rjmp	.+8      	; 0xd1e <vfprintf+0x31a>
 d16:	8a 2d       	mov	r24, r10
 d18:	86 78       	andi	r24, 0x86	; 134
 d1a:	09 f0       	breq	.+2      	; 0xd1e <vfprintf+0x31a>
 d1c:	b3 94       	inc	r11
 d1e:	a3 fc       	sbrc	r10, 3
 d20:	10 c0       	rjmp	.+32     	; 0xd42 <vfprintf+0x33e>
 d22:	a0 fe       	sbrs	r10, 0
 d24:	06 c0       	rjmp	.+12     	; 0xd32 <vfprintf+0x32e>
 d26:	b2 14       	cp	r11, r2
 d28:	80 f4       	brcc	.+32     	; 0xd4a <vfprintf+0x346>
 d2a:	28 0c       	add	r2, r8
 d2c:	92 2c       	mov	r9, r2
 d2e:	9b 18       	sub	r9, r11
 d30:	0d c0       	rjmp	.+26     	; 0xd4c <vfprintf+0x348>
 d32:	b2 14       	cp	r11, r2
 d34:	58 f4       	brcc	.+22     	; 0xd4c <vfprintf+0x348>
 d36:	b6 01       	movw	r22, r12
 d38:	80 e2       	ldi	r24, 0x20	; 32
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	76 d0       	rcall	.+236    	; 0xe2a <fputc>
 d3e:	b3 94       	inc	r11
 d40:	f8 cf       	rjmp	.-16     	; 0xd32 <vfprintf+0x32e>
 d42:	b2 14       	cp	r11, r2
 d44:	18 f4       	brcc	.+6      	; 0xd4c <vfprintf+0x348>
 d46:	2b 18       	sub	r2, r11
 d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x34a>
 d4a:	98 2c       	mov	r9, r8
 d4c:	21 2c       	mov	r2, r1
 d4e:	a4 fe       	sbrs	r10, 4
 d50:	0f c0       	rjmp	.+30     	; 0xd70 <vfprintf+0x36c>
 d52:	b6 01       	movw	r22, r12
 d54:	80 e3       	ldi	r24, 0x30	; 48
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	68 d0       	rcall	.+208    	; 0xe2a <fputc>
 d5a:	a2 fe       	sbrs	r10, 2
 d5c:	16 c0       	rjmp	.+44     	; 0xd8a <vfprintf+0x386>
 d5e:	a1 fc       	sbrc	r10, 1
 d60:	03 c0       	rjmp	.+6      	; 0xd68 <vfprintf+0x364>
 d62:	88 e7       	ldi	r24, 0x78	; 120
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <vfprintf+0x368>
 d68:	88 e5       	ldi	r24, 0x58	; 88
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	b6 01       	movw	r22, r12
 d6e:	0c c0       	rjmp	.+24     	; 0xd88 <vfprintf+0x384>
 d70:	8a 2d       	mov	r24, r10
 d72:	86 78       	andi	r24, 0x86	; 134
 d74:	51 f0       	breq	.+20     	; 0xd8a <vfprintf+0x386>
 d76:	a1 fe       	sbrs	r10, 1
 d78:	02 c0       	rjmp	.+4      	; 0xd7e <vfprintf+0x37a>
 d7a:	8b e2       	ldi	r24, 0x2B	; 43
 d7c:	01 c0       	rjmp	.+2      	; 0xd80 <vfprintf+0x37c>
 d7e:	80 e2       	ldi	r24, 0x20	; 32
 d80:	a7 fc       	sbrc	r10, 7
 d82:	8d e2       	ldi	r24, 0x2D	; 45
 d84:	b6 01       	movw	r22, r12
 d86:	90 e0       	ldi	r25, 0x00	; 0
 d88:	50 d0       	rcall	.+160    	; 0xe2a <fputc>
 d8a:	89 14       	cp	r8, r9
 d8c:	30 f4       	brcc	.+12     	; 0xd9a <vfprintf+0x396>
 d8e:	b6 01       	movw	r22, r12
 d90:	80 e3       	ldi	r24, 0x30	; 48
 d92:	90 e0       	ldi	r25, 0x00	; 0
 d94:	4a d0       	rcall	.+148    	; 0xe2a <fputc>
 d96:	9a 94       	dec	r9
 d98:	f8 cf       	rjmp	.-16     	; 0xd8a <vfprintf+0x386>
 d9a:	8a 94       	dec	r8
 d9c:	f3 01       	movw	r30, r6
 d9e:	e8 0d       	add	r30, r8
 da0:	f1 1d       	adc	r31, r1
 da2:	80 81       	ld	r24, Z
 da4:	b6 01       	movw	r22, r12
 da6:	90 e0       	ldi	r25, 0x00	; 0
 da8:	40 d0       	rcall	.+128    	; 0xe2a <fputc>
 daa:	81 10       	cpse	r8, r1
 dac:	f6 cf       	rjmp	.-20     	; 0xd9a <vfprintf+0x396>
 dae:	22 20       	and	r2, r2
 db0:	09 f4       	brne	.+2      	; 0xdb4 <vfprintf+0x3b0>
 db2:	4e ce       	rjmp	.-868    	; 0xa50 <vfprintf+0x4c>
 db4:	b6 01       	movw	r22, r12
 db6:	80 e2       	ldi	r24, 0x20	; 32
 db8:	90 e0       	ldi	r25, 0x00	; 0
 dba:	37 d0       	rcall	.+110    	; 0xe2a <fputc>
 dbc:	2a 94       	dec	r2
 dbe:	f7 cf       	rjmp	.-18     	; 0xdae <vfprintf+0x3aa>
 dc0:	f6 01       	movw	r30, r12
 dc2:	86 81       	ldd	r24, Z+6	; 0x06
 dc4:	97 81       	ldd	r25, Z+7	; 0x07
 dc6:	02 c0       	rjmp	.+4      	; 0xdcc <vfprintf+0x3c8>
 dc8:	8f ef       	ldi	r24, 0xFF	; 255
 dca:	9f ef       	ldi	r25, 0xFF	; 255
 dcc:	2b 96       	adiw	r28, 0x0b	; 11
 dce:	0f b6       	in	r0, 0x3f	; 63
 dd0:	f8 94       	cli
 dd2:	de bf       	out	0x3e, r29	; 62
 dd4:	0f be       	out	0x3f, r0	; 63
 dd6:	cd bf       	out	0x3d, r28	; 61
 dd8:	df 91       	pop	r29
 dda:	cf 91       	pop	r28
 ddc:	1f 91       	pop	r17
 dde:	0f 91       	pop	r16
 de0:	ff 90       	pop	r15
 de2:	ef 90       	pop	r14
 de4:	df 90       	pop	r13
 de6:	cf 90       	pop	r12
 de8:	bf 90       	pop	r11
 dea:	af 90       	pop	r10
 dec:	9f 90       	pop	r9
 dee:	8f 90       	pop	r8
 df0:	7f 90       	pop	r7
 df2:	6f 90       	pop	r6
 df4:	5f 90       	pop	r5
 df6:	4f 90       	pop	r4
 df8:	3f 90       	pop	r3
 dfa:	2f 90       	pop	r2
 dfc:	08 95       	ret

00000dfe <strnlen_P>:
 dfe:	fc 01       	movw	r30, r24
 e00:	05 90       	lpm	r0, Z+
 e02:	61 50       	subi	r22, 0x01	; 1
 e04:	70 40       	sbci	r23, 0x00	; 0
 e06:	01 10       	cpse	r0, r1
 e08:	d8 f7       	brcc	.-10     	; 0xe00 <strnlen_P+0x2>
 e0a:	80 95       	com	r24
 e0c:	90 95       	com	r25
 e0e:	8e 0f       	add	r24, r30
 e10:	9f 1f       	adc	r25, r31
 e12:	08 95       	ret

00000e14 <strnlen>:
 e14:	fc 01       	movw	r30, r24
 e16:	61 50       	subi	r22, 0x01	; 1
 e18:	70 40       	sbci	r23, 0x00	; 0
 e1a:	01 90       	ld	r0, Z+
 e1c:	01 10       	cpse	r0, r1
 e1e:	d8 f7       	brcc	.-10     	; 0xe16 <strnlen+0x2>
 e20:	80 95       	com	r24
 e22:	90 95       	com	r25
 e24:	8e 0f       	add	r24, r30
 e26:	9f 1f       	adc	r25, r31
 e28:	08 95       	ret

00000e2a <fputc>:
 e2a:	0f 93       	push	r16
 e2c:	1f 93       	push	r17
 e2e:	cf 93       	push	r28
 e30:	df 93       	push	r29
 e32:	fb 01       	movw	r30, r22
 e34:	23 81       	ldd	r18, Z+3	; 0x03
 e36:	21 fd       	sbrc	r18, 1
 e38:	03 c0       	rjmp	.+6      	; 0xe40 <fputc+0x16>
 e3a:	8f ef       	ldi	r24, 0xFF	; 255
 e3c:	9f ef       	ldi	r25, 0xFF	; 255
 e3e:	2c c0       	rjmp	.+88     	; 0xe98 <fputc+0x6e>
 e40:	22 ff       	sbrs	r18, 2
 e42:	16 c0       	rjmp	.+44     	; 0xe70 <fputc+0x46>
 e44:	46 81       	ldd	r20, Z+6	; 0x06
 e46:	57 81       	ldd	r21, Z+7	; 0x07
 e48:	24 81       	ldd	r18, Z+4	; 0x04
 e4a:	35 81       	ldd	r19, Z+5	; 0x05
 e4c:	42 17       	cp	r20, r18
 e4e:	53 07       	cpc	r21, r19
 e50:	44 f4       	brge	.+16     	; 0xe62 <fputc+0x38>
 e52:	a0 81       	ld	r26, Z
 e54:	b1 81       	ldd	r27, Z+1	; 0x01
 e56:	9d 01       	movw	r18, r26
 e58:	2f 5f       	subi	r18, 0xFF	; 255
 e5a:	3f 4f       	sbci	r19, 0xFF	; 255
 e5c:	31 83       	std	Z+1, r19	; 0x01
 e5e:	20 83       	st	Z, r18
 e60:	8c 93       	st	X, r24
 e62:	26 81       	ldd	r18, Z+6	; 0x06
 e64:	37 81       	ldd	r19, Z+7	; 0x07
 e66:	2f 5f       	subi	r18, 0xFF	; 255
 e68:	3f 4f       	sbci	r19, 0xFF	; 255
 e6a:	37 83       	std	Z+7, r19	; 0x07
 e6c:	26 83       	std	Z+6, r18	; 0x06
 e6e:	14 c0       	rjmp	.+40     	; 0xe98 <fputc+0x6e>
 e70:	8b 01       	movw	r16, r22
 e72:	ec 01       	movw	r28, r24
 e74:	fb 01       	movw	r30, r22
 e76:	00 84       	ldd	r0, Z+8	; 0x08
 e78:	f1 85       	ldd	r31, Z+9	; 0x09
 e7a:	e0 2d       	mov	r30, r0
 e7c:	09 95       	icall
 e7e:	89 2b       	or	r24, r25
 e80:	e1 f6       	brne	.-72     	; 0xe3a <fputc+0x10>
 e82:	d8 01       	movw	r26, r16
 e84:	16 96       	adiw	r26, 0x06	; 6
 e86:	8d 91       	ld	r24, X+
 e88:	9c 91       	ld	r25, X
 e8a:	17 97       	sbiw	r26, 0x07	; 7
 e8c:	01 96       	adiw	r24, 0x01	; 1
 e8e:	17 96       	adiw	r26, 0x07	; 7
 e90:	9c 93       	st	X, r25
 e92:	8e 93       	st	-X, r24
 e94:	16 97       	sbiw	r26, 0x06	; 6
 e96:	ce 01       	movw	r24, r28
 e98:	df 91       	pop	r29
 e9a:	cf 91       	pop	r28
 e9c:	1f 91       	pop	r17
 e9e:	0f 91       	pop	r16
 ea0:	08 95       	ret

00000ea2 <__ultoa_invert>:
 ea2:	fa 01       	movw	r30, r20
 ea4:	aa 27       	eor	r26, r26
 ea6:	28 30       	cpi	r18, 0x08	; 8
 ea8:	51 f1       	breq	.+84     	; 0xefe <__ultoa_invert+0x5c>
 eaa:	20 31       	cpi	r18, 0x10	; 16
 eac:	81 f1       	breq	.+96     	; 0xf0e <__ultoa_invert+0x6c>
 eae:	e8 94       	clt
 eb0:	6f 93       	push	r22
 eb2:	6e 7f       	andi	r22, 0xFE	; 254
 eb4:	6e 5f       	subi	r22, 0xFE	; 254
 eb6:	7f 4f       	sbci	r23, 0xFF	; 255
 eb8:	8f 4f       	sbci	r24, 0xFF	; 255
 eba:	9f 4f       	sbci	r25, 0xFF	; 255
 ebc:	af 4f       	sbci	r26, 0xFF	; 255
 ebe:	b1 e0       	ldi	r27, 0x01	; 1
 ec0:	3e d0       	rcall	.+124    	; 0xf3e <__ultoa_invert+0x9c>
 ec2:	b4 e0       	ldi	r27, 0x04	; 4
 ec4:	3c d0       	rcall	.+120    	; 0xf3e <__ultoa_invert+0x9c>
 ec6:	67 0f       	add	r22, r23
 ec8:	78 1f       	adc	r23, r24
 eca:	89 1f       	adc	r24, r25
 ecc:	9a 1f       	adc	r25, r26
 ece:	a1 1d       	adc	r26, r1
 ed0:	68 0f       	add	r22, r24
 ed2:	79 1f       	adc	r23, r25
 ed4:	8a 1f       	adc	r24, r26
 ed6:	91 1d       	adc	r25, r1
 ed8:	a1 1d       	adc	r26, r1
 eda:	6a 0f       	add	r22, r26
 edc:	71 1d       	adc	r23, r1
 ede:	81 1d       	adc	r24, r1
 ee0:	91 1d       	adc	r25, r1
 ee2:	a1 1d       	adc	r26, r1
 ee4:	20 d0       	rcall	.+64     	; 0xf26 <__ultoa_invert+0x84>
 ee6:	09 f4       	brne	.+2      	; 0xeea <__ultoa_invert+0x48>
 ee8:	68 94       	set
 eea:	3f 91       	pop	r19
 eec:	2a e0       	ldi	r18, 0x0A	; 10
 eee:	26 9f       	mul	r18, r22
 ef0:	11 24       	eor	r1, r1
 ef2:	30 19       	sub	r19, r0
 ef4:	30 5d       	subi	r19, 0xD0	; 208
 ef6:	31 93       	st	Z+, r19
 ef8:	de f6       	brtc	.-74     	; 0xeb0 <__ultoa_invert+0xe>
 efa:	cf 01       	movw	r24, r30
 efc:	08 95       	ret
 efe:	46 2f       	mov	r20, r22
 f00:	47 70       	andi	r20, 0x07	; 7
 f02:	40 5d       	subi	r20, 0xD0	; 208
 f04:	41 93       	st	Z+, r20
 f06:	b3 e0       	ldi	r27, 0x03	; 3
 f08:	0f d0       	rcall	.+30     	; 0xf28 <__ultoa_invert+0x86>
 f0a:	c9 f7       	brne	.-14     	; 0xefe <__ultoa_invert+0x5c>
 f0c:	f6 cf       	rjmp	.-20     	; 0xefa <__ultoa_invert+0x58>
 f0e:	46 2f       	mov	r20, r22
 f10:	4f 70       	andi	r20, 0x0F	; 15
 f12:	40 5d       	subi	r20, 0xD0	; 208
 f14:	4a 33       	cpi	r20, 0x3A	; 58
 f16:	18 f0       	brcs	.+6      	; 0xf1e <__ultoa_invert+0x7c>
 f18:	49 5d       	subi	r20, 0xD9	; 217
 f1a:	31 fd       	sbrc	r19, 1
 f1c:	40 52       	subi	r20, 0x20	; 32
 f1e:	41 93       	st	Z+, r20
 f20:	02 d0       	rcall	.+4      	; 0xf26 <__ultoa_invert+0x84>
 f22:	a9 f7       	brne	.-22     	; 0xf0e <__ultoa_invert+0x6c>
 f24:	ea cf       	rjmp	.-44     	; 0xefa <__ultoa_invert+0x58>
 f26:	b4 e0       	ldi	r27, 0x04	; 4
 f28:	a6 95       	lsr	r26
 f2a:	97 95       	ror	r25
 f2c:	87 95       	ror	r24
 f2e:	77 95       	ror	r23
 f30:	67 95       	ror	r22
 f32:	ba 95       	dec	r27
 f34:	c9 f7       	brne	.-14     	; 0xf28 <__ultoa_invert+0x86>
 f36:	00 97       	sbiw	r24, 0x00	; 0
 f38:	61 05       	cpc	r22, r1
 f3a:	71 05       	cpc	r23, r1
 f3c:	08 95       	ret
 f3e:	9b 01       	movw	r18, r22
 f40:	ac 01       	movw	r20, r24
 f42:	0a 2e       	mov	r0, r26
 f44:	06 94       	lsr	r0
 f46:	57 95       	ror	r21
 f48:	47 95       	ror	r20
 f4a:	37 95       	ror	r19
 f4c:	27 95       	ror	r18
 f4e:	ba 95       	dec	r27
 f50:	c9 f7       	brne	.-14     	; 0xf44 <__ultoa_invert+0xa2>
 f52:	62 0f       	add	r22, r18
 f54:	73 1f       	adc	r23, r19
 f56:	84 1f       	adc	r24, r20
 f58:	95 1f       	adc	r25, r21
 f5a:	a0 1d       	adc	r26, r0
 f5c:	08 95       	ret

00000f5e <__divmodsi4>:
 f5e:	05 2e       	mov	r0, r21
 f60:	97 fb       	bst	r25, 7
 f62:	16 f4       	brtc	.+4      	; 0xf68 <__divmodsi4+0xa>
 f64:	00 94       	com	r0
 f66:	0f d0       	rcall	.+30     	; 0xf86 <__negsi2>
 f68:	57 fd       	sbrc	r21, 7
 f6a:	05 d0       	rcall	.+10     	; 0xf76 <__divmodsi4_neg2>
 f6c:	92 dc       	rcall	.-1756   	; 0x892 <__udivmodsi4>
 f6e:	07 fc       	sbrc	r0, 7
 f70:	02 d0       	rcall	.+4      	; 0xf76 <__divmodsi4_neg2>
 f72:	46 f4       	brtc	.+16     	; 0xf84 <__divmodsi4_exit>
 f74:	08 c0       	rjmp	.+16     	; 0xf86 <__negsi2>

00000f76 <__divmodsi4_neg2>:
 f76:	50 95       	com	r21
 f78:	40 95       	com	r20
 f7a:	30 95       	com	r19
 f7c:	21 95       	neg	r18
 f7e:	3f 4f       	sbci	r19, 0xFF	; 255
 f80:	4f 4f       	sbci	r20, 0xFF	; 255
 f82:	5f 4f       	sbci	r21, 0xFF	; 255

00000f84 <__divmodsi4_exit>:
 f84:	08 95       	ret

00000f86 <__negsi2>:
 f86:	90 95       	com	r25
 f88:	80 95       	com	r24
 f8a:	70 95       	com	r23
 f8c:	61 95       	neg	r22
 f8e:	7f 4f       	sbci	r23, 0xFF	; 255
 f90:	8f 4f       	sbci	r24, 0xFF	; 255
 f92:	9f 4f       	sbci	r25, 0xFF	; 255
 f94:	08 95       	ret

00000f96 <__muluhisi3>:
 f96:	0f d0       	rcall	.+30     	; 0xfb6 <__umulhisi3>
 f98:	a5 9f       	mul	r26, r21
 f9a:	90 0d       	add	r25, r0
 f9c:	b4 9f       	mul	r27, r20
 f9e:	90 0d       	add	r25, r0
 fa0:	a4 9f       	mul	r26, r20
 fa2:	80 0d       	add	r24, r0
 fa4:	91 1d       	adc	r25, r1
 fa6:	11 24       	eor	r1, r1
 fa8:	08 95       	ret

00000faa <__mulshisi3>:
 faa:	b7 ff       	sbrs	r27, 7
 fac:	f4 cf       	rjmp	.-24     	; 0xf96 <__muluhisi3>

00000fae <__mulohisi3>:
 fae:	f3 df       	rcall	.-26     	; 0xf96 <__muluhisi3>
 fb0:	82 1b       	sub	r24, r18
 fb2:	93 0b       	sbc	r25, r19
 fb4:	08 95       	ret

00000fb6 <__umulhisi3>:
 fb6:	a2 9f       	mul	r26, r18
 fb8:	b0 01       	movw	r22, r0
 fba:	b3 9f       	mul	r27, r19
 fbc:	c0 01       	movw	r24, r0
 fbe:	a3 9f       	mul	r26, r19
 fc0:	70 0d       	add	r23, r0
 fc2:	81 1d       	adc	r24, r1
 fc4:	11 24       	eor	r1, r1
 fc6:	91 1d       	adc	r25, r1
 fc8:	b2 9f       	mul	r27, r18
 fca:	70 0d       	add	r23, r0
 fcc:	81 1d       	adc	r24, r1
 fce:	11 24       	eor	r1, r1
 fd0:	91 1d       	adc	r25, r1
 fd2:	08 95       	ret

00000fd4 <_exit>:
 fd4:	f8 94       	cli

00000fd6 <__stop_program>:
 fd6:	ff cf       	rjmp	.-2      	; 0xfd6 <__stop_program>
