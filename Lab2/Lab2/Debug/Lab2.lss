
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000033a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  000003d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf7  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000916  00000000  00000000  000011cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060f  00000000  00000000  00001ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055b  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000237  00000000  00000000  0000276f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000029a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1d d1       	rcall	.+570    	; 0x2fe <main>
  c4:	38 c1       	rjmp	.+624    	; 0x336 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
			}
			slaveState = slaveInitState;
			break;

		default:
			slaveState = slaveInitState;
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  d8:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <_avr_timer_cntcurr>
  dc:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <_avr_timer_cntcurr+0x1>
  e0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr+0x2>
  e4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 11a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 11e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 122:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 126:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 148:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 150:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 15e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 162:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 166:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 188:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 18c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 190:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 194:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <initUSART>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <initUSART+0x24>
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	80 83       	st	Z, r24
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 60       	ori	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24
 1c2:	83 e3       	ldi	r24, 0x33	; 51
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1cc:	08 95       	ret
 1ce:	e9 ec       	ldi	r30, 0xC9	; 201
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
 1d8:	ea ec       	ldi	r30, 0xCA	; 202
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
 1e2:	83 e3       	ldi	r24, 0x33	; 51
 1e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ec:	08 95       	ret

000001ee <USART_Flush>:
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	29 f4       	brne	.+10     	; 0x1fc <USART_Flush+0xe>
 1f2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1f6:	88 23       	and	r24, r24
 1f8:	74 f0       	brlt	.+28     	; 0x216 <USART_Flush+0x28>
 1fa:	08 95       	ret
 1fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 200:	88 23       	and	r24, r24
 202:	8c f4       	brge	.+34     	; 0x226 <USART_Flush+0x38>
 204:	a6 ec       	ldi	r26, 0xC6	; 198
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e0 ec       	ldi	r30, 0xC0	; 192
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	8c 91       	ld	r24, X
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	e4 f3       	brlt	.-8      	; 0x20c <USART_Flush+0x1e>
 214:	08 95       	ret
 216:	ae ec       	ldi	r26, 0xCE	; 206
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e8 ec       	ldi	r30, 0xC8	; 200
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	8c 91       	ld	r24, X
 220:	80 81       	ld	r24, Z
 222:	88 23       	and	r24, r24
 224:	e4 f3       	brlt	.-8      	; 0x21e <USART_Flush+0x30>
 226:	08 95       	ret

00000228 <USART_Send>:
 228:	61 30       	cpi	r22, 0x01	; 1
 22a:	41 f0       	breq	.+16     	; 0x23c <USART_Send+0x14>
 22c:	e0 ec       	ldi	r30, 0xC0	; 192
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	90 81       	ld	r25, Z
 232:	95 ff       	sbrs	r25, 5
 234:	fd cf       	rjmp	.-6      	; 0x230 <USART_Send+0x8>
 236:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 23a:	08 95       	ret
 23c:	e8 ec       	ldi	r30, 0xC8	; 200
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	90 81       	ld	r25, Z
 242:	95 ff       	sbrs	r25, 5
 244:	fd cf       	rjmp	.-6      	; 0x240 <USART_Send+0x18>
 246:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 24a:	08 95       	ret

0000024c <leaderSM>:
}

enum leaderStates{leaderInitState,leaderLEDOn,leaderTransmissionWait,leaderLEDOff, leaderTransmissionWaitOff} leaderState;

void leaderSM(){
	switch(leaderState){//Transitions
 24c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <leaderState>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	39 f1       	breq	.+78     	; 0x2a2 <leaderSM+0x56>
 254:	28 f4       	brcc	.+10     	; 0x260 <leaderSM+0x14>
 256:	88 23       	and	r24, r24
 258:	49 f0       	breq	.+18     	; 0x26c <leaderSM+0x20>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	59 f0       	breq	.+22     	; 0x274 <leaderSM+0x28>
 25e:	4c c0       	rjmp	.+152    	; 0x2f8 <leaderSM+0xac>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	49 f1       	breq	.+82     	; 0x2b6 <leaderSM+0x6a>
 264:	84 30       	cpi	r24, 0x04	; 4
 266:	09 f4       	brne	.+2      	; 0x26a <leaderSM+0x1e>
 268:	3d c0       	rjmp	.+122    	; 0x2e4 <leaderSM+0x98>
 26a:	46 c0       	rjmp	.+140    	; 0x2f8 <leaderSM+0xac>
		case leaderInitState:
			leaderState = leaderLEDOn;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <leaderState>
			break;
 272:	08 95       	ret
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 274:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

		case leaderLEDOn:
			if(USART_IsSendReady(1) != 0){
 278:	85 ff       	sbrs	r24, 5
 27a:	40 c0       	rjmp	.+128    	; 0x2fc <leaderSM+0xb0>
				tempA = 0x01;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
				USART_Send(0x01,1);
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	d1 df       	rcall	.-94     	; 0x228 <USART_Send>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 286:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				if(USART_HasTransmitted(1) != 0){
 28a:	86 ff       	sbrs	r24, 6
 28c:	06 c0       	rjmp	.+12     	; 0x29a <leaderSM+0x4e>
					USART_Flush(1);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	ae df       	rcall	.-164    	; 0x1ee <USART_Flush>
					leaderState = leaderLEDOff;
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <leaderState>
 298:	08 95       	ret
				}
				else{
					leaderState = leaderTransmissionWait;
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <leaderState>
 2a0:	08 95       	ret
 2a2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			}

			break;

		case leaderTransmissionWait:
			if(USART_HasTransmitted(1) != 0){
 2a6:	86 ff       	sbrs	r24, 6
				USART_Flush(1);
 2a8:	29 c0       	rjmp	.+82     	; 0x2fc <leaderSM+0xb0>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	a0 df       	rcall	.-192    	; 0x1ee <USART_Flush>
				leaderState = leaderLEDOff;
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <leaderState>
 2b4:	08 95       	ret
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 2b6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				leaderState = leaderTransmissionWait;
			}
			break;

		case leaderLEDOff:
			if(USART_IsSendReady(1) != 0){
 2ba:	85 ff       	sbrs	r24, 5
 2bc:	1f c0       	rjmp	.+62     	; 0x2fc <leaderSM+0xb0>
				tempA = 0x00;
 2be:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
				USART_Send(0x00,1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	b0 df       	rcall	.-160    	; 0x228 <USART_Send>
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
 2c8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				if(USART_HasTransmitted(1) != 0){
 2cc:	86 ff       	sbrs	r24, 6
					USART_Flush(1);
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <leaderSM+0x90>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	8d df       	rcall	.-230    	; 0x1ee <USART_Flush>
					leaderState = leaderLEDOn;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <leaderState>
 2da:	08 95       	ret
				}
				else{
					leaderState= leaderTransmissionWaitOff;
 2dc:	84 e0       	ldi	r24, 0x04	; 4
 2de:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <leaderState>
 2e2:	08 95       	ret
 2e4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			else{
				leaderState = leaderLEDOff;
			}
			break;
		case leaderTransmissionWaitOff:
			if(USART_HasTransmitted(1) != 0){
 2e8:	86 ff       	sbrs	r24, 6
				USART_Flush(1);
 2ea:	08 c0       	rjmp	.+16     	; 0x2fc <leaderSM+0xb0>
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	7f df       	rcall	.-258    	; 0x1ee <USART_Flush>
				leaderState = leaderLEDOn;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <leaderState>
 2f6:	08 95       	ret
				leaderState = leaderTransmissionWaitOff;
			}
			break;

		default:
			leaderState = leaderInitState;
 2f8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <leaderState>
 2fc:	08 95       	ret

000002fe <main>:
}

int main(void) {
	//1 are outputs and 0 are in inputs
    /* Insert DDR and PORT initializations */
	DDRA = 0xFF; PORTA = 0x00; //OUTPUTS
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	81 b9       	out	0x01, r24	; 1
 302:	12 b8       	out	0x02, r1	; 2
    /* Insert your solution below */
	//Receive on USART0
	initUSART(0);
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	51 df       	rcall	.-350    	; 0x1aa <initUSART>
	USART_Flush(0);
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	71 df       	rcall	.-286    	; 0x1ee <USART_Flush>
	//Transmit on USART1
	initUSART(1);
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	4d df       	rcall	.-358    	; 0x1aa <initUSART>
	USART_Flush(1);
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	6d df       	rcall	.-294    	; 0x1ee <USART_Flush>
 314:	ea de       	rcall	.-556    	; 0xea <TimerOn>

	TimerOn();
 316:	64 e6       	ldi	r22, 0x64	; 100
	TimerSet(100);
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	d4 de       	rcall	.-600    	; 0xc8 <TimerSet>
 320:	95 df       	rcall	.-214    	; 0x24c <leaderSM>
    while (1) {
	//TODO: ADD desired SM to run
	leaderSM();
 322:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
	//slaveSM();
    PORTA = tempA;
 326:	82 b9       	out	0x02, r24	; 2
 328:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <TimerFlag>

	while(!TimerFlag){}
 32c:	88 23       	and	r24, r24
 32e:	e1 f3       	breq	.-8      	; 0x328 <main+0x2a>
 330:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <TimerFlag>
	TimerFlag = 0;
 334:	f5 cf       	rjmp	.-22     	; 0x320 <main+0x22>

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
    }
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
